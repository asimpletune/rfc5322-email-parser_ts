// RFC 5322
// See: https://datatracker.ietf.org/doc/html/rfc5322
// The following is the RFC5322 "Internet Message Format" specification
// using tspeg to represent the grammar and to generate a parser in TS

// Note: this first token is the entrypoint for the rest of the grammar
input           := addr_spec

// "Core Rules" from RFC5234
// See: https://datatracker.ietf.org/doc/html/rfc5234#appendix-B.1
CR              :=    '\x0D'        // carriage return, i.e. '\r'
CRLF            :=    CR LF         // Internet standard newline
DQUOTE          :=    '\x22'        // double quote, i.e. '"'
HTAB            :=    '\x09'        // horizontal tab, i.e. 'TAB'
LF              :=    '\x0A'        // linefeed, i.e. '\n'
SP              :=    '\x20'        // space, i.e. 'Space'
VCHAR           :=    '[\x21-\x7E]' // visible (printing) characters
WSP             :=    SP | HTAB     // white space

// § 3.2.1 Quoted Characters
// See: https://datatracker.ietf.org/doc/html/rfc5322#section-3.2.1
quoted_pair     :=    { '\\' { VCHAR | WSP } } | obs_qp

// §3.2.2 Folding White Space and Comments
// See: https://datatracker.ietf.org/doc/html/rfc5322#section-3.2.2
FWS             :=    { { WSP* CRLF }? WSP+ } |  obs_FWS
ctext           :=    '[\x21-\x27]' | '[\x2a-\x5b]' | '[\x5d-\x7e]' | obs_ctext
ccontent        :=    ctext | quoted_pair | comment
comment         :=    '\(' { FWS? ccontent }* FWS? '\)'
CFWS            :=    { { FWS? comment }+ FWS? } | FWS

// § 3.2.3 Atom
// See: https://datatracker.ietf.org/doc/html/rfc5322#section-3.2.3
// (Printable US-ASCII characters not including specials. Used for atoms.)
atext           :=    '[A-Za-z0-9!#$%&\x27*+\-\/=?^_`{|}~]'
atom            :=    CFWS? atext+ CFWS?
dot_atom_text   :=    _head_atext = atext+ _tail_atext={ '\.' _atext = atext+ }*
                      .head = string { return this._head_atext.join('') }
                      .tail = string[] { return this._tail_atext.map(a => a._atext.join('')) }
                      .literal = string { return this.head + this.tail.map(atext => '.' + atext).join('') }

dot_atom        :=    CFWS? _dot_atom_text = dot_atom_text CFWS?
                      .head = string { return this._dot_atom_text.head }
                      .tail = string[] { return this._dot_atom_text.tail }
                      .literal = string { return this._dot_atom_text.literal }
                      .parts = string[] { return this.literal.split('.') }

// (Special characters that do not appear in atext)
specials        :=     '\(' |'\)' | '[<>]' | '\[' | '\]' | '[:;@]' | '\\' | ',' | '\.' | DQUOTE

// § 3.2.4 Quoted Strings
// See https://datatracker.ietf.org/doc/html/rfc5322#section-3.2.4
// (Printable US-ASCII characters not including '\"' or the quote character)
qtext           :=    '\x21' | '[\x23-\x5b]' | '[\x5d-\x7e]' | obs_qtext
qcontent        :=    qtext | quoted_pair
quoted_string   :=    CFWS? DQUOTE _contents = { FWS? _qcontent = qcontent }* FWS? DQUOTE CFWS?
                      .literal = string { return `"${this.contents}"` }
                      .contents = string { return this._contents.map(c => c._qcontent).join('') }

// § 3.2.5 Miscellaneous Tokens
// See: https://datatracker.ietf.org/doc/html/rfc5322#section-3.2.5
word            :=    atom | quoted_string
phrase          :=    word+ | obs_phrase

// § 3.4 Address Specification
// See: https://datatracker.ietf.org/doc/html/rfc5322#section-3.4

address         :=    mailbox | group
mailbox         :=    name_addr | addr_spec
name_addr       :=    display_name? angle_addr
angle_addr      :=    CFWS? '<' addr_spec '>' CFWS? | obs_angle_addr
group           :=    display_name ':' group_list? ';' CFWS?
display_name    :=    phrase
mailbox_list    :=    { mailbox { ',' mailbox }* } | obs_mbox_list
address_list    :=    { address { ',' address }*  } | obs_addr_list
group_list      :=    mailbox_list | CFWS | obs_group_list

// § 3.4.1 Addr-Spec Specification
// See: https://datatracker.ietf.org/doc/html/rfc5322#section-3.4.1
addr_spec       :=    local_part = local_part '@' domain = domain
local_part      :=    token = dot_atom | token = quoted_string | token = obs_local_part
domain          :=    token = dot_atom | token = domain_literal | token = obs_domain
domain_literal  :=    CFWS? '\[' _contents = { FWS? _dtext = dtext }* FWS? '\]' CFWS?
                      .literal = string { return `[${this.contents}]` }
                      .contents = string { return this._contents.map(c => c._dtext).join('') }
// (Printable US-ASCII characters not including '[', ']', or '\"')
dtext           :=    '[\x21-\x5a]' | '[\x5e-\x7e]' | obs_dtext = obs_dtext

// § 4.1 Miscellaneous Obsolete Tokens
// See: https://datatracker.ietf.org/doc/html/rfc5322#section-4.1
// (US-ASCII control characters that do not include the carriage return, line feed, and white space characters)
obs_NO_WS_CTL   :=    '[\x01-\x08]' | '\x0B' | '\x0C' | '[\x0E-\x1F]' | '\x7F'
obs_qtext       :=    obs_NO_WS_CTL
obs_ctext       :=    obs_NO_WS_CTL
obs_qp          :=    '\\' { '\x00' | obs_NO_WS_CTL | LF | CR }
obs_phrase      :=    word { word | '.' | CFWS }

// § 4.2 Obsolete Folding White Space
// See: https://datatracker.ietf.org/doc/html/rfc5322#section-4.2
obs_FWS         :=    WSP+ { CRLF WSP+ }*

// § 4.4 Obsolete Addressing
// See: https://datatracker.ietf.org/doc/html/rfc5322#section-4.4
obs_angle_addr  :=    CFWS? '<' obs_route addr_spec '>' CFWS?
obs_route       :=    obs_domain_list ':'
obs_domain_list :=    { CFWS | ',' }* '@' domain { ',' CFWS? { '@' domain }? }*
obs_mbox_list   :=    { CFWS? ',' }* mailbox { ',' { mailbox | CFWS }? }*
obs_addr_list   :=    { CFWS? ',' }* address { ',' { address | CFWS }? }*
obs_group_list  :=    { CFWS? ',' }+ CFWS?
obs_local_part  :=    word { '\.' word }*
obs_domain      :=    head_atom = atom { '\.' tail_atom = atom }*
obs_dtext       :=    obs_NO_WS_CTL | quoted_pair