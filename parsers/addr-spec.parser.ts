/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* // RFC 5322
* // See: https://datatracker.ietf.org/doc/html/rfc5322
* // The following is the RFC5322 "Internet Message Format" specification
* // using tspeg to represent the grammar and to generate a parser in TS
* // Note: this first token is the entrypoint for the rest of the grammar
* input           := addr_spec
* // "Core Rules" from RFC5234
* // See: https://datatracker.ietf.org/doc/html/rfc5234#appendix-B.1
* CR              :=    '\x0D'        // carriage return, i.e. '\r'
* CRLF            :=    CR LF         // Internet standard newline
* DQUOTE          :=    '\x22'        // double quote, i.e. '"'
* HTAB            :=    '\x09'        // horizontal tab, i.e. 'TAB'
* LF              :=    '\x0A'        // linefeed, i.e. '\n'
* SP              :=    '\x20'        // space, i.e. 'Space'
* VCHAR           :=    '[\x21-\x7E]' // visible (printing) characters
* WSP             :=    SP | HTAB     // white space
* // § 3.2.1 Quoted Characters
* // See: https://datatracker.ietf.org/doc/html/rfc5322#section-3.2.1
* quoted_pair     :=    {'\\' {VCHAR | WSP}} | obs_qp
* // §3.2.2 Folding White Space and Comments
* // See: https://datatracker.ietf.org/doc/html/rfc5322#section-3.2.2
* FWS             :=    {{WSP* CRLF}? WSP+} |  obs_FWS
* ctext           :=    '[\x21-\x27]' | '[\x2a-\x5b]' | '[\x5d-\x7e]' | obs_ctext
* ccontent        :=    ctext | quoted_pair | comment
* comment         :=    '\(' {FWS? ccontent}* FWS? '\)'
* CFWS            :=    {{FWS? comment}+ FWS?} | FWS
* // § 3.2.3 Atom
* // See: https://datatracker.ietf.org/doc/html/rfc5322#section-3.2.3
* // (Printable US-ASCII characters not including specials. Used for atoms.)
* atext           :=    '[A-Za-z0-9!#$%&\x27*+\-\/=?^_`{|}~]'
* atom            :=    CFWS? atext+ CFWS?
* dot_atom_text   :=    _head_atext = atext+ _tail_atext={'\.' _atext = atext+}*
*                       .head = string { return this._head_atext.join('')}
*                       .tail = string[] { return this._tail_atext.map(a => a._atext.join('')) }
*                       .literal = string { return this.head + this.tail.map(atext => '.' + atext).join('') }
* dot_atom        :=    CFWS? _dot_atom_text = dot_atom_text CFWS?
*                       .head = string { return this._dot_atom_text.head }
*                       .tail = string[] { return this._dot_atom_text.tail }
*                       .literal = string { return this._dot_atom_text.literal }
* // (Special characters that do not appear in atext)
* specials        :=     '\(' |'\)' | '[<>]' | '\[' | '\]' | '[:;@]' | '\\' | ',' | '\.' | DQUOTE
* // § 3.2.4 Quoted Strings
* // See https://datatracker.ietf.org/doc/html/rfc5322#section-3.2.4
* // (Printable US-ASCII characters not including '\"' or the quote character)
* qtext           :=    '\x21' | '[\x23-\x5b]' | '[\x5d-\x7e]' | obs_qtext
* qcontent        :=    qtext | quoted_pair
* quoted_string   :=    CFWS? DQUOTE {FWS? qcontent = qcontent}* FWS? DQUOTE CFWS?
* // § 3.2.5 Miscellaneous Tokens
* // See: https://datatracker.ietf.org/doc/html/rfc5322#section-3.2.5
* word            :=    atom | quoted_string
* // § 3.4.1 Addr-Spec Specification
* // See: https://datatracker.ietf.org/doc/html/rfc5322#section-3.4.1
* addr_spec       :=    local_part = local_part '@' domain = domain
* local_part      :=    token = dot_atom | token = quoted_string | token = obs_local_part
* domain          :=    dot_atom = dot_atom | domain_literal = domain_literal | obs_domain = obs_domain
* domain_literal  :=    CFWS? '\[' {FWS? dtext=dtext}* FWS? '\]' CFWS?
* // (Printable US-ASCII characters not including '[', ']', or '\"')
* dtext           :=    '[\x21-\x5a]' | '[\x5e-\x7e]' | obs_dtext = obs_dtext
* // § 4.1 Miscellaneous Obsolete Tokens
* // See: https://datatracker.ietf.org/doc/html/rfc5322#section-4.1
* // (US-ASCII control characters that do not include the carriage return, line feed, and white space characters)
* obs_NO_WS_CTL   :=    '[\x01-\x08]' | '\x0B' | '\x0C' | '[\x0E-\x1F]' | '\x7F'
* obs_qtext       :=    obs_NO_WS_CTL
* obs_ctext       :=    obs_NO_WS_CTL
* obs_qp          :=    '\\' {'\x00' | obs_NO_WS_CTL | LF | CR}
* // § 4.2 Obsolete Folding White Space
* // See: https://datatracker.ietf.org/doc/html/rfc5322#section-4.2
* obs_FWS         :=    WSP+ {CRLF WSP+}*
* // § 4.4 Obsolete Addressing
* // See: https://datatracker.ietf.org/doc/html/rfc5322#section-4.4
* obs_local_part  :=    word {'\.' word}*
* obs_domain      :=    head_atom = atom {'\.' tail_atom = atom}*
* obs_dtext       :=    obs_NO_WS_CTL | quoted_pair
*/
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
export interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    input = "input",
    CR = "CR",
    CRLF = "CRLF",
    DQUOTE = "DQUOTE",
    HTAB = "HTAB",
    LF = "LF",
    SP = "SP",
    VCHAR = "VCHAR",
    WSP_1 = "WSP_1",
    WSP_2 = "WSP_2",
    quoted_pair_1 = "quoted_pair_1",
    quoted_pair_2 = "quoted_pair_2",
    quoted_pair_$0 = "quoted_pair_$0",
    quoted_pair_$0_$0_1 = "quoted_pair_$0_$0_1",
    quoted_pair_$0_$0_2 = "quoted_pair_$0_$0_2",
    FWS_1 = "FWS_1",
    FWS_2 = "FWS_2",
    FWS_$0 = "FWS_$0",
    FWS_$0_$0 = "FWS_$0_$0",
    ctext_1 = "ctext_1",
    ctext_2 = "ctext_2",
    ctext_3 = "ctext_3",
    ctext_4 = "ctext_4",
    ccontent_1 = "ccontent_1",
    ccontent_2 = "ccontent_2",
    ccontent_3 = "ccontent_3",
    comment = "comment",
    comment_$0 = "comment_$0",
    CFWS_1 = "CFWS_1",
    CFWS_2 = "CFWS_2",
    CFWS_$0 = "CFWS_$0",
    CFWS_$0_$0 = "CFWS_$0_$0",
    atext = "atext",
    atom = "atom",
    dot_atom_text = "dot_atom_text",
    dot_atom_text_$0 = "dot_atom_text_$0",
    dot_atom = "dot_atom",
    specials_1 = "specials_1",
    specials_2 = "specials_2",
    specials_3 = "specials_3",
    specials_4 = "specials_4",
    specials_5 = "specials_5",
    specials_6 = "specials_6",
    specials_7 = "specials_7",
    specials_8 = "specials_8",
    specials_9 = "specials_9",
    specials_10 = "specials_10",
    qtext_1 = "qtext_1",
    qtext_2 = "qtext_2",
    qtext_3 = "qtext_3",
    qtext_4 = "qtext_4",
    qcontent_1 = "qcontent_1",
    qcontent_2 = "qcontent_2",
    quoted_string = "quoted_string",
    quoted_string_$0 = "quoted_string_$0",
    word_1 = "word_1",
    word_2 = "word_2",
    addr_spec = "addr_spec",
    local_part_1 = "local_part_1",
    local_part_2 = "local_part_2",
    local_part_3 = "local_part_3",
    domain_1 = "domain_1",
    domain_2 = "domain_2",
    domain_3 = "domain_3",
    domain_literal = "domain_literal",
    domain_literal_$0 = "domain_literal_$0",
    dtext_1 = "dtext_1",
    dtext_2 = "dtext_2",
    dtext_3 = "dtext_3",
    obs_NO_WS_CTL_1 = "obs_NO_WS_CTL_1",
    obs_NO_WS_CTL_2 = "obs_NO_WS_CTL_2",
    obs_NO_WS_CTL_3 = "obs_NO_WS_CTL_3",
    obs_NO_WS_CTL_4 = "obs_NO_WS_CTL_4",
    obs_NO_WS_CTL_5 = "obs_NO_WS_CTL_5",
    obs_qtext = "obs_qtext",
    obs_ctext = "obs_ctext",
    obs_qp = "obs_qp",
    obs_qp_$0_1 = "obs_qp_$0_1",
    obs_qp_$0_2 = "obs_qp_$0_2",
    obs_qp_$0_3 = "obs_qp_$0_3",
    obs_qp_$0_4 = "obs_qp_$0_4",
    obs_FWS = "obs_FWS",
    obs_FWS_$0 = "obs_FWS_$0",
    obs_local_part = "obs_local_part",
    obs_local_part_$0 = "obs_local_part_$0",
    obs_domain = "obs_domain",
    obs_domain_$0 = "obs_domain_$0",
    obs_dtext_1 = "obs_dtext_1",
    obs_dtext_2 = "obs_dtext_2",
}
export type input = addr_spec;
export type CR = string;
export interface CRLF {
    kind: ASTKinds.CRLF;
}
export type DQUOTE = string;
export type HTAB = string;
export type LF = string;
export type SP = string;
export type VCHAR = string;
export type WSP = WSP_1 | WSP_2;
export type WSP_1 = SP;
export type WSP_2 = HTAB;
export type quoted_pair = quoted_pair_1 | quoted_pair_2;
export type quoted_pair_1 = quoted_pair_$0;
export type quoted_pair_2 = obs_qp;
export interface quoted_pair_$0 {
    kind: ASTKinds.quoted_pair_$0;
}
export type quoted_pair_$0_$0 = quoted_pair_$0_$0_1 | quoted_pair_$0_$0_2;
export type quoted_pair_$0_$0_1 = VCHAR;
export type quoted_pair_$0_$0_2 = WSP;
export type FWS = FWS_1 | FWS_2;
export type FWS_1 = FWS_$0;
export type FWS_2 = obs_FWS;
export interface FWS_$0 {
    kind: ASTKinds.FWS_$0;
}
export interface FWS_$0_$0 {
    kind: ASTKinds.FWS_$0_$0;
}
export type ctext = ctext_1 | ctext_2 | ctext_3 | ctext_4;
export type ctext_1 = string;
export type ctext_2 = string;
export type ctext_3 = string;
export type ctext_4 = obs_ctext;
export type ccontent = ccontent_1 | ccontent_2 | ccontent_3;
export type ccontent_1 = ctext;
export type ccontent_2 = quoted_pair;
export type ccontent_3 = comment;
export interface comment {
    kind: ASTKinds.comment;
}
export interface comment_$0 {
    kind: ASTKinds.comment_$0;
}
export type CFWS = CFWS_1 | CFWS_2;
export type CFWS_1 = CFWS_$0;
export type CFWS_2 = FWS;
export interface CFWS_$0 {
    kind: ASTKinds.CFWS_$0;
}
export interface CFWS_$0_$0 {
    kind: ASTKinds.CFWS_$0_$0;
}
export type atext = string;
export interface atom {
    kind: ASTKinds.atom;
}
export class dot_atom_text {
    public kind: ASTKinds.dot_atom_text = ASTKinds.dot_atom_text;
    public _head_atext: atext[];
    public _tail_atext: dot_atom_text_$0[];
    public head: string;
    public tail: string[];
    public literal: string;
    constructor(_head_atext: atext[], _tail_atext: dot_atom_text_$0[]){
        this._head_atext = _head_atext;
        this._tail_atext = _tail_atext;
        this.head = ((): string => {
        return this._head_atext.join('')
        })();
        this.tail = ((): string[] => {
        return this._tail_atext.map(a => a._atext.join(''))
        })();
        this.literal = ((): string => {
        return this.head + this.tail.map(atext => '.' + atext).join('')
        })();
    }
}
export interface dot_atom_text_$0 {
    kind: ASTKinds.dot_atom_text_$0;
    _atext: atext[];
}
export class dot_atom {
    public kind: ASTKinds.dot_atom = ASTKinds.dot_atom;
    public _dot_atom_text: dot_atom_text;
    public head: string;
    public tail: string[];
    public literal: string;
    constructor(_dot_atom_text: dot_atom_text){
        this._dot_atom_text = _dot_atom_text;
        this.head = ((): string => {
        return this._dot_atom_text.head
        })();
        this.tail = ((): string[] => {
        return this._dot_atom_text.tail
        })();
        this.literal = ((): string => {
        return this._dot_atom_text.literal
        })();
    }
}
export type specials = specials_1 | specials_2 | specials_3 | specials_4 | specials_5 | specials_6 | specials_7 | specials_8 | specials_9 | specials_10;
export type specials_1 = string;
export type specials_2 = string;
export type specials_3 = string;
export type specials_4 = string;
export type specials_5 = string;
export type specials_6 = string;
export type specials_7 = string;
export type specials_8 = string;
export type specials_9 = string;
export type specials_10 = DQUOTE;
export type qtext = qtext_1 | qtext_2 | qtext_3 | qtext_4;
export type qtext_1 = string;
export type qtext_2 = string;
export type qtext_3 = string;
export type qtext_4 = obs_qtext;
export type qcontent = qcontent_1 | qcontent_2;
export type qcontent_1 = qtext;
export type qcontent_2 = quoted_pair;
export interface quoted_string {
    kind: ASTKinds.quoted_string;
}
export interface quoted_string_$0 {
    kind: ASTKinds.quoted_string_$0;
    qcontent: qcontent;
}
export type word = word_1 | word_2;
export type word_1 = atom;
export type word_2 = quoted_string;
export interface addr_spec {
    kind: ASTKinds.addr_spec;
    local_part: local_part;
    domain: domain;
}
export type local_part = local_part_1 | local_part_2 | local_part_3;
export interface local_part_1 {
    kind: ASTKinds.local_part_1;
    token: dot_atom;
}
export interface local_part_2 {
    kind: ASTKinds.local_part_2;
    token: quoted_string;
}
export interface local_part_3 {
    kind: ASTKinds.local_part_3;
    token: obs_local_part;
}
export type domain = domain_1 | domain_2 | domain_3;
export interface domain_1 {
    kind: ASTKinds.domain_1;
    dot_atom: dot_atom;
}
export interface domain_2 {
    kind: ASTKinds.domain_2;
    domain_literal: domain_literal;
}
export interface domain_3 {
    kind: ASTKinds.domain_3;
    obs_domain: obs_domain;
}
export interface domain_literal {
    kind: ASTKinds.domain_literal;
}
export interface domain_literal_$0 {
    kind: ASTKinds.domain_literal_$0;
    dtext: dtext;
}
export type dtext = dtext_1 | dtext_2 | dtext_3;
export type dtext_1 = string;
export type dtext_2 = string;
export interface dtext_3 {
    kind: ASTKinds.dtext_3;
    obs_dtext: obs_dtext;
}
export type obs_NO_WS_CTL = obs_NO_WS_CTL_1 | obs_NO_WS_CTL_2 | obs_NO_WS_CTL_3 | obs_NO_WS_CTL_4 | obs_NO_WS_CTL_5;
export type obs_NO_WS_CTL_1 = string;
export type obs_NO_WS_CTL_2 = string;
export type obs_NO_WS_CTL_3 = string;
export type obs_NO_WS_CTL_4 = string;
export type obs_NO_WS_CTL_5 = string;
export type obs_qtext = obs_NO_WS_CTL;
export type obs_ctext = obs_NO_WS_CTL;
export interface obs_qp {
    kind: ASTKinds.obs_qp;
}
export type obs_qp_$0 = obs_qp_$0_1 | obs_qp_$0_2 | obs_qp_$0_3 | obs_qp_$0_4;
export type obs_qp_$0_1 = string;
export type obs_qp_$0_2 = obs_NO_WS_CTL;
export type obs_qp_$0_3 = LF;
export type obs_qp_$0_4 = CR;
export interface obs_FWS {
    kind: ASTKinds.obs_FWS;
}
export interface obs_FWS_$0 {
    kind: ASTKinds.obs_FWS_$0;
}
export interface obs_local_part {
    kind: ASTKinds.obs_local_part;
}
export interface obs_local_part_$0 {
    kind: ASTKinds.obs_local_part_$0;
}
export interface obs_domain {
    kind: ASTKinds.obs_domain;
    head_atom: atom;
}
export interface obs_domain_$0 {
    kind: ASTKinds.obs_domain_$0;
    tail_atom: atom;
}
export type obs_dtext = obs_dtext_1 | obs_dtext_2;
export type obs_dtext_1 = obs_NO_WS_CTL;
export type obs_dtext_2 = quoted_pair;
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
    }
    public matchinput($$dpth: number, $$cr?: ErrorTracker): Nullable<input> {
        return this.matchaddr_spec($$dpth + 1, $$cr);
    }
    public matchCR($$dpth: number, $$cr?: ErrorTracker): Nullable<CR> {
        return this.regexAccept(String.raw`(?:\x0D)`, $$dpth + 1, $$cr);
    }
    public matchCRLF($$dpth: number, $$cr?: ErrorTracker): Nullable<CRLF> {
        return this.run<CRLF>($$dpth,
            () => {
                let $$res: Nullable<CRLF> = null;
                if (true
                    && this.matchCR($$dpth + 1, $$cr) !== null
                    && this.matchLF($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.CRLF, };
                }
                return $$res;
            });
    }
    public matchDQUOTE($$dpth: number, $$cr?: ErrorTracker): Nullable<DQUOTE> {
        return this.regexAccept(String.raw`(?:\x22)`, $$dpth + 1, $$cr);
    }
    public matchHTAB($$dpth: number, $$cr?: ErrorTracker): Nullable<HTAB> {
        return this.regexAccept(String.raw`(?:\x09)`, $$dpth + 1, $$cr);
    }
    public matchLF($$dpth: number, $$cr?: ErrorTracker): Nullable<LF> {
        return this.regexAccept(String.raw`(?:\x0A)`, $$dpth + 1, $$cr);
    }
    public matchSP($$dpth: number, $$cr?: ErrorTracker): Nullable<SP> {
        return this.regexAccept(String.raw`(?:\x20)`, $$dpth + 1, $$cr);
    }
    public matchVCHAR($$dpth: number, $$cr?: ErrorTracker): Nullable<VCHAR> {
        return this.regexAccept(String.raw`(?:[\x21-\x7E])`, $$dpth + 1, $$cr);
    }
    public matchWSP($$dpth: number, $$cr?: ErrorTracker): Nullable<WSP> {
        return this.choice<WSP>([
            () => this.matchWSP_1($$dpth + 1, $$cr),
            () => this.matchWSP_2($$dpth + 1, $$cr),
        ]);
    }
    public matchWSP_1($$dpth: number, $$cr?: ErrorTracker): Nullable<WSP_1> {
        return this.matchSP($$dpth + 1, $$cr);
    }
    public matchWSP_2($$dpth: number, $$cr?: ErrorTracker): Nullable<WSP_2> {
        return this.matchHTAB($$dpth + 1, $$cr);
    }
    public matchquoted_pair($$dpth: number, $$cr?: ErrorTracker): Nullable<quoted_pair> {
        return this.choice<quoted_pair>([
            () => this.matchquoted_pair_1($$dpth + 1, $$cr),
            () => this.matchquoted_pair_2($$dpth + 1, $$cr),
        ]);
    }
    public matchquoted_pair_1($$dpth: number, $$cr?: ErrorTracker): Nullable<quoted_pair_1> {
        return this.matchquoted_pair_$0($$dpth + 1, $$cr);
    }
    public matchquoted_pair_2($$dpth: number, $$cr?: ErrorTracker): Nullable<quoted_pair_2> {
        return this.matchobs_qp($$dpth + 1, $$cr);
    }
    public matchquoted_pair_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<quoted_pair_$0> {
        return this.run<quoted_pair_$0>($$dpth,
            () => {
                let $$res: Nullable<quoted_pair_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\\)`, $$dpth + 1, $$cr) !== null
                    && this.matchquoted_pair_$0_$0($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.quoted_pair_$0, };
                }
                return $$res;
            });
    }
    public matchquoted_pair_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<quoted_pair_$0_$0> {
        return this.choice<quoted_pair_$0_$0>([
            () => this.matchquoted_pair_$0_$0_1($$dpth + 1, $$cr),
            () => this.matchquoted_pair_$0_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchquoted_pair_$0_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<quoted_pair_$0_$0_1> {
        return this.matchVCHAR($$dpth + 1, $$cr);
    }
    public matchquoted_pair_$0_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<quoted_pair_$0_$0_2> {
        return this.matchWSP($$dpth + 1, $$cr);
    }
    public matchFWS($$dpth: number, $$cr?: ErrorTracker): Nullable<FWS> {
        return this.choice<FWS>([
            () => this.matchFWS_1($$dpth + 1, $$cr),
            () => this.matchFWS_2($$dpth + 1, $$cr),
        ]);
    }
    public matchFWS_1($$dpth: number, $$cr?: ErrorTracker): Nullable<FWS_1> {
        return this.matchFWS_$0($$dpth + 1, $$cr);
    }
    public matchFWS_2($$dpth: number, $$cr?: ErrorTracker): Nullable<FWS_2> {
        return this.matchobs_FWS($$dpth + 1, $$cr);
    }
    public matchFWS_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<FWS_$0> {
        return this.run<FWS_$0>($$dpth,
            () => {
                let $$res: Nullable<FWS_$0> = null;
                if (true
                    && ((this.matchFWS_$0_$0($$dpth + 1, $$cr)) || true)
                    && this.loop<WSP>(() => this.matchWSP($$dpth + 1, $$cr), false) !== null
                ) {
                    $$res = {kind: ASTKinds.FWS_$0, };
                }
                return $$res;
            });
    }
    public matchFWS_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<FWS_$0_$0> {
        return this.run<FWS_$0_$0>($$dpth,
            () => {
                let $$res: Nullable<FWS_$0_$0> = null;
                if (true
                    && this.loop<WSP>(() => this.matchWSP($$dpth + 1, $$cr), true) !== null
                    && this.matchCRLF($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.FWS_$0_$0, };
                }
                return $$res;
            });
    }
    public matchctext($$dpth: number, $$cr?: ErrorTracker): Nullable<ctext> {
        return this.choice<ctext>([
            () => this.matchctext_1($$dpth + 1, $$cr),
            () => this.matchctext_2($$dpth + 1, $$cr),
            () => this.matchctext_3($$dpth + 1, $$cr),
            () => this.matchctext_4($$dpth + 1, $$cr),
        ]);
    }
    public matchctext_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ctext_1> {
        return this.regexAccept(String.raw`(?:[\x21-\x27])`, $$dpth + 1, $$cr);
    }
    public matchctext_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ctext_2> {
        return this.regexAccept(String.raw`(?:[\x2a-\x5b])`, $$dpth + 1, $$cr);
    }
    public matchctext_3($$dpth: number, $$cr?: ErrorTracker): Nullable<ctext_3> {
        return this.regexAccept(String.raw`(?:[\x5d-\x7e])`, $$dpth + 1, $$cr);
    }
    public matchctext_4($$dpth: number, $$cr?: ErrorTracker): Nullable<ctext_4> {
        return this.matchobs_ctext($$dpth + 1, $$cr);
    }
    public matchccontent($$dpth: number, $$cr?: ErrorTracker): Nullable<ccontent> {
        return this.choice<ccontent>([
            () => this.matchccontent_1($$dpth + 1, $$cr),
            () => this.matchccontent_2($$dpth + 1, $$cr),
            () => this.matchccontent_3($$dpth + 1, $$cr),
        ]);
    }
    public matchccontent_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ccontent_1> {
        return this.matchctext($$dpth + 1, $$cr);
    }
    public matchccontent_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ccontent_2> {
        return this.matchquoted_pair($$dpth + 1, $$cr);
    }
    public matchccontent_3($$dpth: number, $$cr?: ErrorTracker): Nullable<ccontent_3> {
        return this.matchcomment($$dpth + 1, $$cr);
    }
    public matchcomment($$dpth: number, $$cr?: ErrorTracker): Nullable<comment> {
        return this.run<comment>($$dpth,
            () => {
                let $$res: Nullable<comment> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && this.loop<comment_$0>(() => this.matchcomment_$0($$dpth + 1, $$cr), true) !== null
                    && ((this.matchFWS($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.comment, };
                }
                return $$res;
            });
    }
    public matchcomment_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<comment_$0> {
        return this.run<comment_$0>($$dpth,
            () => {
                let $$res: Nullable<comment_$0> = null;
                if (true
                    && ((this.matchFWS($$dpth + 1, $$cr)) || true)
                    && this.matchccontent($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.comment_$0, };
                }
                return $$res;
            });
    }
    public matchCFWS($$dpth: number, $$cr?: ErrorTracker): Nullable<CFWS> {
        return this.choice<CFWS>([
            () => this.matchCFWS_1($$dpth + 1, $$cr),
            () => this.matchCFWS_2($$dpth + 1, $$cr),
        ]);
    }
    public matchCFWS_1($$dpth: number, $$cr?: ErrorTracker): Nullable<CFWS_1> {
        return this.matchCFWS_$0($$dpth + 1, $$cr);
    }
    public matchCFWS_2($$dpth: number, $$cr?: ErrorTracker): Nullable<CFWS_2> {
        return this.matchFWS($$dpth + 1, $$cr);
    }
    public matchCFWS_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<CFWS_$0> {
        return this.run<CFWS_$0>($$dpth,
            () => {
                let $$res: Nullable<CFWS_$0> = null;
                if (true
                    && this.loop<CFWS_$0_$0>(() => this.matchCFWS_$0_$0($$dpth + 1, $$cr), false) !== null
                    && ((this.matchFWS($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.CFWS_$0, };
                }
                return $$res;
            });
    }
    public matchCFWS_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<CFWS_$0_$0> {
        return this.run<CFWS_$0_$0>($$dpth,
            () => {
                let $$res: Nullable<CFWS_$0_$0> = null;
                if (true
                    && ((this.matchFWS($$dpth + 1, $$cr)) || true)
                    && this.matchcomment($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.CFWS_$0_$0, };
                }
                return $$res;
            });
    }
    public matchatext($$dpth: number, $$cr?: ErrorTracker): Nullable<atext> {
        return this.regexAccept(String.raw`(?:[A-Za-z0-9!#$%&\x27*+\-\/=?^_\`{|}~])`, $$dpth + 1, $$cr);
    }
    public matchatom($$dpth: number, $$cr?: ErrorTracker): Nullable<atom> {
        return this.run<atom>($$dpth,
            () => {
                let $$res: Nullable<atom> = null;
                if (true
                    && ((this.matchCFWS($$dpth + 1, $$cr)) || true)
                    && this.loop<atext>(() => this.matchatext($$dpth + 1, $$cr), false) !== null
                    && ((this.matchCFWS($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.atom, };
                }
                return $$res;
            });
    }
    public matchdot_atom_text($$dpth: number, $$cr?: ErrorTracker): Nullable<dot_atom_text> {
        return this.run<dot_atom_text>($$dpth,
            () => {
                let $scope$_head_atext: Nullable<atext[]>;
                let $scope$_tail_atext: Nullable<dot_atom_text_$0[]>;
                let $$res: Nullable<dot_atom_text> = null;
                if (true
                    && ($scope$_head_atext = this.loop<atext>(() => this.matchatext($$dpth + 1, $$cr), false)) !== null
                    && ($scope$_tail_atext = this.loop<dot_atom_text_$0>(() => this.matchdot_atom_text_$0($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = new dot_atom_text($scope$_head_atext, $scope$_tail_atext);
                }
                return $$res;
            });
    }
    public matchdot_atom_text_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<dot_atom_text_$0> {
        return this.run<dot_atom_text_$0>($$dpth,
            () => {
                let $scope$_atext: Nullable<atext[]>;
                let $$res: Nullable<dot_atom_text_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\.)`, $$dpth + 1, $$cr) !== null
                    && ($scope$_atext = this.loop<atext>(() => this.matchatext($$dpth + 1, $$cr), false)) !== null
                ) {
                    $$res = {kind: ASTKinds.dot_atom_text_$0, _atext: $scope$_atext};
                }
                return $$res;
            });
    }
    public matchdot_atom($$dpth: number, $$cr?: ErrorTracker): Nullable<dot_atom> {
        return this.run<dot_atom>($$dpth,
            () => {
                let $scope$_dot_atom_text: Nullable<dot_atom_text>;
                let $$res: Nullable<dot_atom> = null;
                if (true
                    && ((this.matchCFWS($$dpth + 1, $$cr)) || true)
                    && ($scope$_dot_atom_text = this.matchdot_atom_text($$dpth + 1, $$cr)) !== null
                    && ((this.matchCFWS($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = new dot_atom($scope$_dot_atom_text);
                }
                return $$res;
            });
    }
    public matchspecials($$dpth: number, $$cr?: ErrorTracker): Nullable<specials> {
        return this.choice<specials>([
            () => this.matchspecials_1($$dpth + 1, $$cr),
            () => this.matchspecials_2($$dpth + 1, $$cr),
            () => this.matchspecials_3($$dpth + 1, $$cr),
            () => this.matchspecials_4($$dpth + 1, $$cr),
            () => this.matchspecials_5($$dpth + 1, $$cr),
            () => this.matchspecials_6($$dpth + 1, $$cr),
            () => this.matchspecials_7($$dpth + 1, $$cr),
            () => this.matchspecials_8($$dpth + 1, $$cr),
            () => this.matchspecials_9($$dpth + 1, $$cr),
            () => this.matchspecials_10($$dpth + 1, $$cr),
        ]);
    }
    public matchspecials_1($$dpth: number, $$cr?: ErrorTracker): Nullable<specials_1> {
        return this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr);
    }
    public matchspecials_2($$dpth: number, $$cr?: ErrorTracker): Nullable<specials_2> {
        return this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr);
    }
    public matchspecials_3($$dpth: number, $$cr?: ErrorTracker): Nullable<specials_3> {
        return this.regexAccept(String.raw`(?:[<>])`, $$dpth + 1, $$cr);
    }
    public matchspecials_4($$dpth: number, $$cr?: ErrorTracker): Nullable<specials_4> {
        return this.regexAccept(String.raw`(?:\[)`, $$dpth + 1, $$cr);
    }
    public matchspecials_5($$dpth: number, $$cr?: ErrorTracker): Nullable<specials_5> {
        return this.regexAccept(String.raw`(?:\])`, $$dpth + 1, $$cr);
    }
    public matchspecials_6($$dpth: number, $$cr?: ErrorTracker): Nullable<specials_6> {
        return this.regexAccept(String.raw`(?:[:;@])`, $$dpth + 1, $$cr);
    }
    public matchspecials_7($$dpth: number, $$cr?: ErrorTracker): Nullable<specials_7> {
        return this.regexAccept(String.raw`(?:\\)`, $$dpth + 1, $$cr);
    }
    public matchspecials_8($$dpth: number, $$cr?: ErrorTracker): Nullable<specials_8> {
        return this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr);
    }
    public matchspecials_9($$dpth: number, $$cr?: ErrorTracker): Nullable<specials_9> {
        return this.regexAccept(String.raw`(?:\.)`, $$dpth + 1, $$cr);
    }
    public matchspecials_10($$dpth: number, $$cr?: ErrorTracker): Nullable<specials_10> {
        return this.matchDQUOTE($$dpth + 1, $$cr);
    }
    public matchqtext($$dpth: number, $$cr?: ErrorTracker): Nullable<qtext> {
        return this.choice<qtext>([
            () => this.matchqtext_1($$dpth + 1, $$cr),
            () => this.matchqtext_2($$dpth + 1, $$cr),
            () => this.matchqtext_3($$dpth + 1, $$cr),
            () => this.matchqtext_4($$dpth + 1, $$cr),
        ]);
    }
    public matchqtext_1($$dpth: number, $$cr?: ErrorTracker): Nullable<qtext_1> {
        return this.regexAccept(String.raw`(?:\x21)`, $$dpth + 1, $$cr);
    }
    public matchqtext_2($$dpth: number, $$cr?: ErrorTracker): Nullable<qtext_2> {
        return this.regexAccept(String.raw`(?:[\x23-\x5b])`, $$dpth + 1, $$cr);
    }
    public matchqtext_3($$dpth: number, $$cr?: ErrorTracker): Nullable<qtext_3> {
        return this.regexAccept(String.raw`(?:[\x5d-\x7e])`, $$dpth + 1, $$cr);
    }
    public matchqtext_4($$dpth: number, $$cr?: ErrorTracker): Nullable<qtext_4> {
        return this.matchobs_qtext($$dpth + 1, $$cr);
    }
    public matchqcontent($$dpth: number, $$cr?: ErrorTracker): Nullable<qcontent> {
        return this.choice<qcontent>([
            () => this.matchqcontent_1($$dpth + 1, $$cr),
            () => this.matchqcontent_2($$dpth + 1, $$cr),
        ]);
    }
    public matchqcontent_1($$dpth: number, $$cr?: ErrorTracker): Nullable<qcontent_1> {
        return this.matchqtext($$dpth + 1, $$cr);
    }
    public matchqcontent_2($$dpth: number, $$cr?: ErrorTracker): Nullable<qcontent_2> {
        return this.matchquoted_pair($$dpth + 1, $$cr);
    }
    public matchquoted_string($$dpth: number, $$cr?: ErrorTracker): Nullable<quoted_string> {
        return this.run<quoted_string>($$dpth,
            () => {
                let $$res: Nullable<quoted_string> = null;
                if (true
                    && ((this.matchCFWS($$dpth + 1, $$cr)) || true)
                    && this.matchDQUOTE($$dpth + 1, $$cr) !== null
                    && this.loop<quoted_string_$0>(() => this.matchquoted_string_$0($$dpth + 1, $$cr), true) !== null
                    && ((this.matchFWS($$dpth + 1, $$cr)) || true)
                    && this.matchDQUOTE($$dpth + 1, $$cr) !== null
                    && ((this.matchCFWS($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.quoted_string, };
                }
                return $$res;
            });
    }
    public matchquoted_string_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<quoted_string_$0> {
        return this.run<quoted_string_$0>($$dpth,
            () => {
                let $scope$qcontent: Nullable<qcontent>;
                let $$res: Nullable<quoted_string_$0> = null;
                if (true
                    && ((this.matchFWS($$dpth + 1, $$cr)) || true)
                    && ($scope$qcontent = this.matchqcontent($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.quoted_string_$0, qcontent: $scope$qcontent};
                }
                return $$res;
            });
    }
    public matchword($$dpth: number, $$cr?: ErrorTracker): Nullable<word> {
        return this.choice<word>([
            () => this.matchword_1($$dpth + 1, $$cr),
            () => this.matchword_2($$dpth + 1, $$cr),
        ]);
    }
    public matchword_1($$dpth: number, $$cr?: ErrorTracker): Nullable<word_1> {
        return this.matchatom($$dpth + 1, $$cr);
    }
    public matchword_2($$dpth: number, $$cr?: ErrorTracker): Nullable<word_2> {
        return this.matchquoted_string($$dpth + 1, $$cr);
    }
    public matchaddr_spec($$dpth: number, $$cr?: ErrorTracker): Nullable<addr_spec> {
        return this.run<addr_spec>($$dpth,
            () => {
                let $scope$local_part: Nullable<local_part>;
                let $scope$domain: Nullable<domain>;
                let $$res: Nullable<addr_spec> = null;
                if (true
                    && ($scope$local_part = this.matchlocal_part($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:@)`, $$dpth + 1, $$cr) !== null
                    && ($scope$domain = this.matchdomain($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.addr_spec, local_part: $scope$local_part, domain: $scope$domain};
                }
                return $$res;
            });
    }
    public matchlocal_part($$dpth: number, $$cr?: ErrorTracker): Nullable<local_part> {
        return this.choice<local_part>([
            () => this.matchlocal_part_1($$dpth + 1, $$cr),
            () => this.matchlocal_part_2($$dpth + 1, $$cr),
            () => this.matchlocal_part_3($$dpth + 1, $$cr),
        ]);
    }
    public matchlocal_part_1($$dpth: number, $$cr?: ErrorTracker): Nullable<local_part_1> {
        return this.run<local_part_1>($$dpth,
            () => {
                let $scope$token: Nullable<dot_atom>;
                let $$res: Nullable<local_part_1> = null;
                if (true
                    && ($scope$token = this.matchdot_atom($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.local_part_1, token: $scope$token};
                }
                return $$res;
            });
    }
    public matchlocal_part_2($$dpth: number, $$cr?: ErrorTracker): Nullable<local_part_2> {
        return this.run<local_part_2>($$dpth,
            () => {
                let $scope$token: Nullable<quoted_string>;
                let $$res: Nullable<local_part_2> = null;
                if (true
                    && ($scope$token = this.matchquoted_string($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.local_part_2, token: $scope$token};
                }
                return $$res;
            });
    }
    public matchlocal_part_3($$dpth: number, $$cr?: ErrorTracker): Nullable<local_part_3> {
        return this.run<local_part_3>($$dpth,
            () => {
                let $scope$token: Nullable<obs_local_part>;
                let $$res: Nullable<local_part_3> = null;
                if (true
                    && ($scope$token = this.matchobs_local_part($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.local_part_3, token: $scope$token};
                }
                return $$res;
            });
    }
    public matchdomain($$dpth: number, $$cr?: ErrorTracker): Nullable<domain> {
        return this.choice<domain>([
            () => this.matchdomain_1($$dpth + 1, $$cr),
            () => this.matchdomain_2($$dpth + 1, $$cr),
            () => this.matchdomain_3($$dpth + 1, $$cr),
        ]);
    }
    public matchdomain_1($$dpth: number, $$cr?: ErrorTracker): Nullable<domain_1> {
        return this.run<domain_1>($$dpth,
            () => {
                let $scope$dot_atom: Nullable<dot_atom>;
                let $$res: Nullable<domain_1> = null;
                if (true
                    && ($scope$dot_atom = this.matchdot_atom($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.domain_1, dot_atom: $scope$dot_atom};
                }
                return $$res;
            });
    }
    public matchdomain_2($$dpth: number, $$cr?: ErrorTracker): Nullable<domain_2> {
        return this.run<domain_2>($$dpth,
            () => {
                let $scope$domain_literal: Nullable<domain_literal>;
                let $$res: Nullable<domain_2> = null;
                if (true
                    && ($scope$domain_literal = this.matchdomain_literal($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.domain_2, domain_literal: $scope$domain_literal};
                }
                return $$res;
            });
    }
    public matchdomain_3($$dpth: number, $$cr?: ErrorTracker): Nullable<domain_3> {
        return this.run<domain_3>($$dpth,
            () => {
                let $scope$obs_domain: Nullable<obs_domain>;
                let $$res: Nullable<domain_3> = null;
                if (true
                    && ($scope$obs_domain = this.matchobs_domain($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.domain_3, obs_domain: $scope$obs_domain};
                }
                return $$res;
            });
    }
    public matchdomain_literal($$dpth: number, $$cr?: ErrorTracker): Nullable<domain_literal> {
        return this.run<domain_literal>($$dpth,
            () => {
                let $$res: Nullable<domain_literal> = null;
                if (true
                    && ((this.matchCFWS($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:\[)`, $$dpth + 1, $$cr) !== null
                    && this.loop<domain_literal_$0>(() => this.matchdomain_literal_$0($$dpth + 1, $$cr), true) !== null
                    && ((this.matchFWS($$dpth + 1, $$cr)) || true)
                    && this.regexAccept(String.raw`(?:\])`, $$dpth + 1, $$cr) !== null
                    && ((this.matchCFWS($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.domain_literal, };
                }
                return $$res;
            });
    }
    public matchdomain_literal_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<domain_literal_$0> {
        return this.run<domain_literal_$0>($$dpth,
            () => {
                let $scope$dtext: Nullable<dtext>;
                let $$res: Nullable<domain_literal_$0> = null;
                if (true
                    && ((this.matchFWS($$dpth + 1, $$cr)) || true)
                    && ($scope$dtext = this.matchdtext($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.domain_literal_$0, dtext: $scope$dtext};
                }
                return $$res;
            });
    }
    public matchdtext($$dpth: number, $$cr?: ErrorTracker): Nullable<dtext> {
        return this.choice<dtext>([
            () => this.matchdtext_1($$dpth + 1, $$cr),
            () => this.matchdtext_2($$dpth + 1, $$cr),
            () => this.matchdtext_3($$dpth + 1, $$cr),
        ]);
    }
    public matchdtext_1($$dpth: number, $$cr?: ErrorTracker): Nullable<dtext_1> {
        return this.regexAccept(String.raw`(?:[\x21-\x5a])`, $$dpth + 1, $$cr);
    }
    public matchdtext_2($$dpth: number, $$cr?: ErrorTracker): Nullable<dtext_2> {
        return this.regexAccept(String.raw`(?:[\x5e-\x7e])`, $$dpth + 1, $$cr);
    }
    public matchdtext_3($$dpth: number, $$cr?: ErrorTracker): Nullable<dtext_3> {
        return this.run<dtext_3>($$dpth,
            () => {
                let $scope$obs_dtext: Nullable<obs_dtext>;
                let $$res: Nullable<dtext_3> = null;
                if (true
                    && ($scope$obs_dtext = this.matchobs_dtext($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.dtext_3, obs_dtext: $scope$obs_dtext};
                }
                return $$res;
            });
    }
    public matchobs_NO_WS_CTL($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_NO_WS_CTL> {
        return this.choice<obs_NO_WS_CTL>([
            () => this.matchobs_NO_WS_CTL_1($$dpth + 1, $$cr),
            () => this.matchobs_NO_WS_CTL_2($$dpth + 1, $$cr),
            () => this.matchobs_NO_WS_CTL_3($$dpth + 1, $$cr),
            () => this.matchobs_NO_WS_CTL_4($$dpth + 1, $$cr),
            () => this.matchobs_NO_WS_CTL_5($$dpth + 1, $$cr),
        ]);
    }
    public matchobs_NO_WS_CTL_1($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_NO_WS_CTL_1> {
        return this.regexAccept(String.raw`(?:[\x01-\x08])`, $$dpth + 1, $$cr);
    }
    public matchobs_NO_WS_CTL_2($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_NO_WS_CTL_2> {
        return this.regexAccept(String.raw`(?:\x0B)`, $$dpth + 1, $$cr);
    }
    public matchobs_NO_WS_CTL_3($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_NO_WS_CTL_3> {
        return this.regexAccept(String.raw`(?:\x0C)`, $$dpth + 1, $$cr);
    }
    public matchobs_NO_WS_CTL_4($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_NO_WS_CTL_4> {
        return this.regexAccept(String.raw`(?:[\x0E-\x1F])`, $$dpth + 1, $$cr);
    }
    public matchobs_NO_WS_CTL_5($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_NO_WS_CTL_5> {
        return this.regexAccept(String.raw`(?:\x7F)`, $$dpth + 1, $$cr);
    }
    public matchobs_qtext($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_qtext> {
        return this.matchobs_NO_WS_CTL($$dpth + 1, $$cr);
    }
    public matchobs_ctext($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_ctext> {
        return this.matchobs_NO_WS_CTL($$dpth + 1, $$cr);
    }
    public matchobs_qp($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_qp> {
        return this.run<obs_qp>($$dpth,
            () => {
                let $$res: Nullable<obs_qp> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\\)`, $$dpth + 1, $$cr) !== null
                    && this.matchobs_qp_$0($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_qp, };
                }
                return $$res;
            });
    }
    public matchobs_qp_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_qp_$0> {
        return this.choice<obs_qp_$0>([
            () => this.matchobs_qp_$0_1($$dpth + 1, $$cr),
            () => this.matchobs_qp_$0_2($$dpth + 1, $$cr),
            () => this.matchobs_qp_$0_3($$dpth + 1, $$cr),
            () => this.matchobs_qp_$0_4($$dpth + 1, $$cr),
        ]);
    }
    public matchobs_qp_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_qp_$0_1> {
        return this.regexAccept(String.raw`(?:\x00)`, $$dpth + 1, $$cr);
    }
    public matchobs_qp_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_qp_$0_2> {
        return this.matchobs_NO_WS_CTL($$dpth + 1, $$cr);
    }
    public matchobs_qp_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_qp_$0_3> {
        return this.matchLF($$dpth + 1, $$cr);
    }
    public matchobs_qp_$0_4($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_qp_$0_4> {
        return this.matchCR($$dpth + 1, $$cr);
    }
    public matchobs_FWS($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_FWS> {
        return this.run<obs_FWS>($$dpth,
            () => {
                let $$res: Nullable<obs_FWS> = null;
                if (true
                    && this.loop<WSP>(() => this.matchWSP($$dpth + 1, $$cr), false) !== null
                    && this.loop<obs_FWS_$0>(() => this.matchobs_FWS_$0($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_FWS, };
                }
                return $$res;
            });
    }
    public matchobs_FWS_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_FWS_$0> {
        return this.run<obs_FWS_$0>($$dpth,
            () => {
                let $$res: Nullable<obs_FWS_$0> = null;
                if (true
                    && this.matchCRLF($$dpth + 1, $$cr) !== null
                    && this.loop<WSP>(() => this.matchWSP($$dpth + 1, $$cr), false) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_FWS_$0, };
                }
                return $$res;
            });
    }
    public matchobs_local_part($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_local_part> {
        return this.run<obs_local_part>($$dpth,
            () => {
                let $$res: Nullable<obs_local_part> = null;
                if (true
                    && this.matchword($$dpth + 1, $$cr) !== null
                    && this.loop<obs_local_part_$0>(() => this.matchobs_local_part_$0($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_local_part, };
                }
                return $$res;
            });
    }
    public matchobs_local_part_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_local_part_$0> {
        return this.run<obs_local_part_$0>($$dpth,
            () => {
                let $$res: Nullable<obs_local_part_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\.)`, $$dpth + 1, $$cr) !== null
                    && this.matchword($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_local_part_$0, };
                }
                return $$res;
            });
    }
    public matchobs_domain($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_domain> {
        return this.run<obs_domain>($$dpth,
            () => {
                let $scope$head_atom: Nullable<atom>;
                let $$res: Nullable<obs_domain> = null;
                if (true
                    && ($scope$head_atom = this.matchatom($$dpth + 1, $$cr)) !== null
                    && this.loop<obs_domain_$0>(() => this.matchobs_domain_$0($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_domain, head_atom: $scope$head_atom};
                }
                return $$res;
            });
    }
    public matchobs_domain_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_domain_$0> {
        return this.run<obs_domain_$0>($$dpth,
            () => {
                let $scope$tail_atom: Nullable<atom>;
                let $$res: Nullable<obs_domain_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\.)`, $$dpth + 1, $$cr) !== null
                    && ($scope$tail_atom = this.matchatom($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_domain_$0, tail_atom: $scope$tail_atom};
                }
                return $$res;
            });
    }
    public matchobs_dtext($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_dtext> {
        return this.choice<obs_dtext>([
            () => this.matchobs_dtext_1($$dpth + 1, $$cr),
            () => this.matchobs_dtext_2($$dpth + 1, $$cr),
        ]);
    }
    public matchobs_dtext_1($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_dtext_1> {
        return this.matchobs_NO_WS_CTL($$dpth + 1, $$cr);
    }
    public matchobs_dtext_2($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_dtext_2> {
        return this.matchquoted_pair($$dpth + 1, $$cr);
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchinput(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchinput(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchinput(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const t = func();
            if (t === null) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y");
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<input>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}