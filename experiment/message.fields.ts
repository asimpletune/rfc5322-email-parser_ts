/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* ---
* import { makeLiteral } from './foo'
* ---
* start := a=message
* 	.literal = string { return makeLiteral(this) }
* CR := a='\x0D'
* 	.literal = string { return makeLiteral(this) }
* CRLF := a='\r\n'
* 	.literal = string { return makeLiteral(this) }
* DIGIT := a='\d'
* 	.literal = string { return makeLiteral(this) }
* TWO_DIGIT := a='\d\d'
* 	.literal = string { return makeLiteral(this) }
* FOUR_DIGIT := a='\d\d\d\d'
* 	.literal = string { return makeLiteral(this) }
* DQUOTE := a='\x22'
* 	.literal = string { return makeLiteral(this) }
* HTAB := a='\x09'
* 	.literal = string { return makeLiteral(this) }
* LF := a='\x0A'
* 	.literal = string { return makeLiteral(this) }
* SP := a='\x20'
* 	.literal = string { return makeLiteral(this) }
* VCHAR := a='[\x21-\x7E]'
* 	.literal = string { return makeLiteral(this) }
* WSP := a=SP | b=HTAB
* 	.literal = string { return makeLiteral(this) }
* quoted_pair := a={ a='\\' b={ a=VCHAR | b=WSP } } | b=obs_qp
* 	.literal = string { return makeLiteral(this) }
* FWS := a={ a={ a=WSP* b=CRLF }? b=WSP+ } | b=obs_FWS
* 	.literal = string { return makeLiteral(this) }
* ctext := a='[\x21-\x27]' | b='[\x2a-\x5b]' | c='[\x5d-\x7e]' | d=obs_ctext
* 	.literal = string { return makeLiteral(this) }
* ccontent := a=ctext | b=quoted_pair | c=comment
* 	.literal = string { return makeLiteral(this) }
* comment := a='\(' b={ a=FWS? b=ccontent }* c=FWS? d='\)'
* 	.literal = string { return makeLiteral(this) }
* CFWS := a={ a={ a=FWS? b=comment }+ b=FWS? } | b=FWS
* 	.literal = string { return makeLiteral(this) }
* atext := a='[A-Za-z0-9!#$%&\x27\*\+\-\/=?^_`{|}~]'
* 	.literal = string { return makeLiteral(this) }
* atom := a=CFWS? b=atext+ c=CFWS?
* 	.literal = string { return makeLiteral(this) }
* dot_atom_text := a=atext+ b={ a='\.' b=atext+ }*
* 	.literal = string { return makeLiteral(this) }
* dot_atom := a=CFWS? b=dot_atom_text c=CFWS?
* 	.literal = string { return makeLiteral(this) }
* specials := a='\(' | b='\)' | c='[<>]' | d='\[' | e='\]' | f='[:;@]' | g='\\' | h=',' | i='\.' | j=DQUOTE
* 	.literal = string { return makeLiteral(this) }
* qtext := a='\x21' | b='[\x23-\x5b]' | c='[\x5d-\x7e]' | d=obs_qtext
* 	.literal = string { return makeLiteral(this) }
* qcontent := a=qtext | b=quoted_pair
* 	.literal = string { return makeLiteral(this) }
* quoted_string := a=CFWS? b=DQUOTE c={ a=FWS? b=qcontent }* d=FWS? e=DQUOTE f=CFWS?
* 	.literal = string { return makeLiteral(this) }
* word := a=atom | b=quoted_string
* 	.literal = string { return makeLiteral(this) }
* phrase := a=word+ | b=obs_phrase
* 	.literal = string { return makeLiteral(this) }
* unstructured := a={ a={ a=FWS? b=VCHAR }* b=WSP* } | b=obs_unstruct
* 	.literal = string { return makeLiteral(this) }
* date_time := a={ a=day_of_week b=',' }? b=date c=time d=CFWS?
* 	.literal = string { return makeLiteral(this) }
* day_of_week := a={ a=FWS? b=day_name } | b=obs_day_of_week
* 	.literal = string { return makeLiteral(this) }
* day_name := a='Mon' | b='Tue' | c='Wed' | d='Thu' | e='Fri' | f='Sat' | g='Sun'
* 	.literal = string { return makeLiteral(this) }
* date := a=day b=month c=year
* 	.literal = string { return makeLiteral(this) }
* day := a={ a=FWS? b=DIGIT c=DIGIT? d=FWS } | b=obs_day
* 	.literal = string { return makeLiteral(this) }
* month := a='Jan' | b='Feb' | c='Mar' | d='Apr' | e='May' | f='Jun' | g='Jul' | h='Aug' | i='Sep' | j='Oct' | k='Nov' | l='Dec'
* 	.literal = string { return makeLiteral(this) }
* year := a={ a=FWS b=FOUR_DIGIT c=DIGIT* d=FWS } | b=obs_year
* 	.literal = string { return makeLiteral(this) }
* time := a=time_of_day b=zone
* 	.literal = string { return makeLiteral(this) }
* time_of_day := a=hour b=':' c=minute d={ a=':' b=second }?
* 	.literal = string { return makeLiteral(this) }
* hour := a=TWO_DIGIT | b=obs_hour
* 	.literal = string { return makeLiteral(this) }
* minute := a=TWO_DIGIT | b=obs_minute
* 	.literal = string { return makeLiteral(this) }
* second := a=TWO_DIGIT | b=obs_second
* 	.literal = string { return makeLiteral(this) }
* zone := a={ a=FWS b={ a='\+' | b='\-' } c=FOUR_DIGIT } | b=obs_zone
* 	.literal = string { return makeLiteral(this) }
* address := a=mailbox | b=group
* 	.literal = string { return makeLiteral(this) }
* mailbox := a=name_addr | b=addr_spec
* 	.literal = string { return makeLiteral(this) }
* name_addr := a=display_name? b=angle_addr
* 	.literal = string { return makeLiteral(this) }
* angle_addr := a=CFWS? b='<' c=addr_spec d='>' e=CFWS? | f=obs_angle_addr
* 	.literal = string { return makeLiteral(this) }
* group := a=display_name b=':' c=group_list? d=';' e=CFWS?
* 	.literal = string { return makeLiteral(this) }
* display_name := a=phrase
* 	.literal = string { return makeLiteral(this) }
* mailbox_list := a={ a=mailbox b={ a=',' b=mailbox }* } | b=obs_mbox_list
* 	.literal = string { return makeLiteral(this) }
* address_list := a={ a=address b={ a=',' b=address }* } | b=obs_addr_list
* 	.literal = string { return makeLiteral(this) }
* group_list := a=mailbox_list | b=CFWS | c=obs_group_list
* 	.literal = string { return makeLiteral(this) }
* addr_spec := a=local_part b='@' c=domain
* 	.literal = string { return makeLiteral(this) }
* local_part := a=dot_atom | b=quoted_string | c=obs_local_part
* 	.literal = string { return makeLiteral(this) }
* domain := a=dot_atom | b=domain_literal | c=obs_domain
* 	.literal = string { return makeLiteral(this) }
* domain_literal := a=CFWS? b='\[' c={ a=FWS? b=dtext }* d=FWS? e='\]' f=CFWS?
* 	.literal = string { return makeLiteral(this) }
* dtext := a='[\x21-\x5a]' | b='[\x5e-\x7e]' | c=obs_dtext
* 	.literal = string { return makeLiteral(this) }
* message := a={ a=fields | b=obs_fields } b={ a=CRLF b=body }?
* 	.literal = string { return makeLiteral(this) }
* body := a={ a={ a=_998text b=CRLF }* b=_998text } | b=obs_body
* 	.literal = string { return makeLiteral(this) }
* text := a='[\x01-\x09]' | b='\x0B' | c='\x0C' | d='[\x0E-\x7f]'
* 	.literal = string { return makeLiteral(this) }
* _998text := a='[\x01-\x09\x0B\x0C\x0E-\x7F]{998,}'
* 	.literal = string { return makeLiteral(this) }
* fields := a={ a=trace b=optional_field* | c={ a=resent_date | b=resent_from | c=resent_sender | d=resent_to | e=resent_cc | f=resent_bcc | g=resent_msg_id }* }* b={ a=orig_date | b=from | c=sender | d=reply_to | e=to | f=cc | g=bcc | h=message_id | i=in_reply_to | j=references | k=subject | l=comments | m=keywords | n=optional_field }*
* 	.literal = string { return makeLiteral(this) }
* orig_date := a='Date:' b=date_time c=CRLF
* 	.literal = string { return makeLiteral(this) }
* from := a='From:' b=mailbox_list c=CRLF
* 	.literal = string { return makeLiteral(this) }
* sender := a='Sender:' b=mailbox c=CRLF
* 	.literal = string { return makeLiteral(this) }
* reply_to := a='Reply_To:' b=address_list c=CRLF
* 	.literal = string { return makeLiteral(this) }
* to := a='To:' b=address_list c=CRLF
* 	.literal = string { return makeLiteral(this) }
* cc := a='Cc:' b=address_list c=CRLF
* 	.literal = string { return makeLiteral(this) }
* bcc := a='Bcc:' b={ a=address_list | b=CFWS }? c=CRLF
* 	.literal = string { return makeLiteral(this) }
* message_id := a='Message-ID:' b=msg_id c=CRLF
* 	.literal = string { return makeLiteral(this) }
* in_reply_to := a='In-Reply-To:' b=msg_id+ c=CRLF
* 	.literal = string { return makeLiteral(this) }
* references := a='References:' b=msg_id+ c=CRLF
* 	.literal = string { return makeLiteral(this) }
* msg_id := a=CFWS? b='<' c=id_left d='@' e=id_right f='>' g=CFWS?
* 	.literal = string { return makeLiteral(this) }
* id_left := a=dot_atom_text | b=obs_id_left
* 	.literal = string { return makeLiteral(this) }
* id_right := a=dot_atom_text | b=no_fold_literal | c=obs_id_right
* 	.literal = string { return makeLiteral(this) }
* no_fold_literal := a='\[' b=dtext* c='\]'
* 	.literal = string { return makeLiteral(this) }
* subject := a='Subject:' b=unstructured c=CRLF
* 	.literal = string { return makeLiteral(this) }
* comments := a='Comments:' b=unstructured c=CRLF
* 	.literal = string { return makeLiteral(this) }
* keywords := a='Keywords:' b=phrase c={ a=',' b=phrase }* d=CRLF
* 	.literal = string { return makeLiteral(this) }
* resent_date := a='Resent-Date:' b=date_time c=CRLF
* 	.literal = string { return makeLiteral(this) }
* resent_from := a='Resent-From:' b=mailbox_list c=CRLF
* 	.literal = string { return makeLiteral(this) }
* resent_sender := a='Resent-Sender:' b=mailbox c=CRLF
* 	.literal = string { return makeLiteral(this) }
* resent_to := a='Resent-To:' b=address_list c=CRLF
* 	.literal = string { return makeLiteral(this) }
* resent_cc := a='Resent-Cc:' b=address_list c=CRLF
* 	.literal = string { return makeLiteral(this) }
* resent_bcc := a='Resent-Bcc:' b={ a=address_list | b=CFWS }? c=CRLF
* 	.literal = string { return makeLiteral(this) }
* resent_msg_id := a='Resent-Message_ID:' b=msg_id c=CRLF
* 	.literal = string { return makeLiteral(this) }
* trace := a=return_path? b=received+
* 	.literal = string { return makeLiteral(this) }
* return_path := a='Return-Path:' b=path c=CRLF
* 	.literal = string { return makeLiteral(this) }
* path := a=angle_addr | b={ a=CFWS? b='<' c=CFWS d='>' e=CFWS? }
* 	.literal = string { return makeLiteral(this) }
* received := a='Received:' b=received_token* c=';' d=date_time e=CRLF
* 	.literal = string { return makeLiteral(this) }
* received_token := a=word | b=angle_addr | c=addr_spec | d=domain
* 	.literal = string { return makeLiteral(this) }
* optional_field := a=field_name b=':' c=unstructured d=CRLF
* 	.literal = string { return makeLiteral(this) }
* field_name := a=ftext+
* 	.literal = string { return makeLiteral(this) }
* ftext := a='[\x21-\x39]' | b='[\x3b-\x7e]'
* 	.literal = string { return makeLiteral(this) }
* obs_NO_WS_CTL := a='[\x01-\x08]' | b='\x0B' | c='\x0C' | d='[\x0E-\x1F]' | e='\x7F'
* 	.literal = string { return makeLiteral(this) }
* obs_ctext := a=obs_NO_WS_CTL
* 	.literal = string { return makeLiteral(this) }
* obs_qtext := a=obs_NO_WS_CTL
* 	.literal = string { return makeLiteral(this) }
* obs_utext := a='\x00' | b=obs_NO_WS_CTL | c=VCHAR
* 	.literal = string { return makeLiteral(this) }
* obs_qp := a='\\' b={ a='\x00' | b=obs_NO_WS_CTL | c=LF | d=CR }
* 	.literal = string { return makeLiteral(this) }
* obs_body := a={ a={ a=LF* b=CR* c={ a={ a='\x00' | b=text } b=LF* c=CR* }* } | b=CRLF }*
* 	.literal = string { return makeLiteral(this) }
* obs_unstruct := a={ a={ a=LF* b=CR* c={ a=obs_utext b=LF* c=CR* }* } | b=FWS }*
* 	.literal = string { return makeLiteral(this) }
* obs_phrase := a=word b={ a=word | b='.' | c=CFWS }
* 	.literal = string { return makeLiteral(this) }
* obs_phrase_list := a={ a=phrase | b=CFWS } b={ a=',' b={ a=phrase | b=CFWS }? }*
* 	.literal = string { return makeLiteral(this) }
* obs_FWS := a=WSP+ b={ a=CRLF b=WSP+ }*
* 	.literal = string { return makeLiteral(this) }
* obs_day_of_week := a=CFWS? b=day_name c=CFWS?
* 	.literal = string { return makeLiteral(this) }
* obs_day := a=CFWS? b=DIGIT c=DIGIT? d=CFWS?
* 	.literal = string { return makeLiteral(this) }
* obs_year := a=CFWS? b=TWO_DIGIT c=DIGIT* d=CFWS?
* 	.literal = string { return makeLiteral(this) }
* obs_hour := a=CFWS? b=TWO_DIGIT c=CFWS?
* 	.literal = string { return makeLiteral(this) }
* obs_minute := a=CFWS? b=TWO_DIGIT c=CFWS?
* 	.literal = string { return makeLiteral(this) }
* obs_second := a=CFWS? b=TWO_DIGIT c=CFWS?
* 	.literal = string { return makeLiteral(this) }
* obs_zone := a='UT' | b='GMT' | c='EST' | d='EDT' | e='CST' | f='CDT' | g='MST' | h='MDT' | i='PST' | j='PDT' | k='[\x41-\x49]' | l='[\x4b-\x5a]' | m='[\x61-\x69]' | n='[\x6b-\x7a]'
* 	.literal = string { return makeLiteral(this) }
* obs_angle_addr := a=CFWS? b='<' c=obs_route d=addr_spec e='>' f=CFWS?
* 	.literal = string { return makeLiteral(this) }
* obs_route := a=obs_domain_list b=':'
* 	.literal = string { return makeLiteral(this) }
* obs_domain_list := a={ a=CFWS | b=',' }* b='@' c=domain d={ a=',' b=CFWS? c={ a='@' b=domain }? }*
* 	.literal = string { return makeLiteral(this) }
* obs_mbox_list := a={ a=CFWS? b=',' }* b=mailbox c={ a=',' b={ a=mailbox | b=CFWS }? }*
* 	.literal = string { return makeLiteral(this) }
* obs_addr_list := a={ a=CFWS? b=',' }* b=address c={ a=',' b={ a=address | b=CFWS }? }*
* 	.literal = string { return makeLiteral(this) }
* obs_group_list := a={ a=CFWS? b=',' }+ b=CFWS?
* 	.literal = string { return makeLiteral(this) }
* obs_local_part := a=word b={ a='\.' b=word }*
* 	.literal = string { return makeLiteral(this) }
* obs_domain := a=atom b={ a='\.' b=atom }*
* 	.literal = string { return makeLiteral(this) }
* obs_dtext := a=obs_NO_WS_CTL | b=quoted_pair
* 	.literal = string { return makeLiteral(this) }
* obs_fields := a={ a=obs_return | b=obs_received | c=obs_orig_date | d=obs_from | e=obs_sender | f=obs_reply_to | g=obs_to | h=obs_cc | i=obs_bcc | j=obs_message_id | k=obs_in_reply_to | l=obs_references | m=obs_subject | n=obs_comments | o=obs_keywords | p=obs_resent_date | q=obs_resent_from | r=obs_resent_send | s=obs_resent_rply | t=obs_resent_to | u=obs_resent_cc | v=obs_resent_bcc | w=obs_resent_mid | x=obs_optional }*
* 	.literal = string { return makeLiteral(this) }
* obs_orig_date := a='Date' b=WSP* c=':' d=date_time e=CRLF
* 	.literal = string { return makeLiteral(this) }
* obs_from := a='From' b=WSP* c=':' d=mailbox_list e=CRLF
* 	.literal = string { return makeLiteral(this) }
* obs_sender := a='Sender' b=WSP* c=':' d=mailbox e=CRLF
* 	.literal = string { return makeLiteral(this) }
* obs_reply_to := a='Reply-To' b=WSP* c=':' d=address_list e=CRLF
* 	.literal = string { return makeLiteral(this) }
* obs_to := a='To' b=WSP* c=':' d=address_list e=CRLF
* 	.literal = string { return makeLiteral(this) }
* obs_cc := a='Cc' b=WSP* c=':' d=address_list e=CRLF
* 	.literal = string { return makeLiteral(this) }
* obs_bcc := a='Bcc' b=WSP* c=':' d={ a=address_list | b={ a={ a=CFWS? b=',' }* b=CFWS? } } e=CRLF
* 	.literal = string { return makeLiteral(this) }
* obs_message_id := a='Message-ID' b=WSP* c=':' d=msg_id e=CRLF
* 	.literal = string { return makeLiteral(this) }
* obs_in_reply_to := a='In-Reply-To' b=WSP* c=':' d={ a=phrase | b=msg_id }* e=CRLF
* 	.literal = string { return makeLiteral(this) }
* obs_references := a='References' b=WSP* c=':' d={ a=phrase | b=msg_id }* e=CRLF
* 	.literal = string { return makeLiteral(this) }
* obs_id_left := a=local_part
* 	.literal = string { return makeLiteral(this) }
* obs_id_right := a=domain
* 	.literal = string { return makeLiteral(this) }
* obs_subject := a='Subject' b=WSP* c=':' d=unstructured e=CRLF
* 	.literal = string { return makeLiteral(this) }
* obs_comments := a='Comments' b=WSP* c=':' d=unstructured e=CRLF
* 	.literal = string { return makeLiteral(this) }
* obs_keywords := a='Keywords' b=WSP* c=':' d=obs_phrase_list e=CRLF
* 	.literal = string { return makeLiteral(this) }
* obs_resent_from := a='Resent-From' b=WSP* c=':' d=mailbox_list e=CRLF
* 	.literal = string { return makeLiteral(this) }
* obs_resent_send := a='Resent-Sender' b=WSP* c=':' d=mailbox e=CRLF
* 	.literal = string { return makeLiteral(this) }
* obs_resent_date := a='Resent-Date' b=WSP* c=':' d=date_time e=CRLF
* 	.literal = string { return makeLiteral(this) }
* obs_resent_to := a='Resent-To' b=WSP* c=':' d=address_list e=CRLF
* 	.literal = string { return makeLiteral(this) }
* obs_resent_cc := a='Resent-Cc' b=WSP* c=':' d=address_list e=CRLF
* 	.literal = string { return makeLiteral(this) }
* obs_resent_bcc := a='Resent-Bcc' b=WSP* c=':' d={ a=address_list | b={ a={ a=CFWS? b=',' }* b=CFWS? } } e=CRLF
* 	.literal = string { return makeLiteral(this) }
* obs_resent_mid := a='Resent-Message-ID' b=WSP* c=':' d=msg_id e=CRLF
* 	.literal = string { return makeLiteral(this) }
* obs_resent_rply := a='Resent-Reply-To' b=WSP* c=':' d=address_list e=CRLF
* 	.literal = string { return makeLiteral(this) }
* obs_return := a='Return-Path' b=WSP* c=':' d=path e=CRLF
* 	.literal = string { return makeLiteral(this) }
* obs_received := a='Received' b=WSP* c=':' d=received_token* e=CRLF
* 	.literal = string { return makeLiteral(this) }
* obs_optional := a=field_name b=WSP* c=':' d=unstructured e=CRLF
* 	.literal = string { return makeLiteral(this) }
*/

import { makeLiteral } from './foo'

type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
export interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    start = "start",
    CR = "CR",
    CRLF = "CRLF",
    DIGIT = "DIGIT",
    TWO_DIGIT = "TWO_DIGIT",
    FOUR_DIGIT = "FOUR_DIGIT",
    DQUOTE = "DQUOTE",
    HTAB = "HTAB",
    LF = "LF",
    SP = "SP",
    VCHAR = "VCHAR",
    WSP_1 = "WSP_1",
    WSP_2 = "WSP_2",
    quoted_pair_1 = "quoted_pair_1",
    quoted_pair_2 = "quoted_pair_2",
    quoted_pair_$0 = "quoted_pair_$0",
    quoted_pair_$0_$0_1 = "quoted_pair_$0_$0_1",
    quoted_pair_$0_$0_2 = "quoted_pair_$0_$0_2",
    FWS_1 = "FWS_1",
    FWS_2 = "FWS_2",
    FWS_$0 = "FWS_$0",
    FWS_$0_$0 = "FWS_$0_$0",
    ctext_1 = "ctext_1",
    ctext_2 = "ctext_2",
    ctext_3 = "ctext_3",
    ctext_4 = "ctext_4",
    ccontent_1 = "ccontent_1",
    ccontent_2 = "ccontent_2",
    ccontent_3 = "ccontent_3",
    comment = "comment",
    comment_$0 = "comment_$0",
    CFWS_1 = "CFWS_1",
    CFWS_2 = "CFWS_2",
    CFWS_$0 = "CFWS_$0",
    CFWS_$0_$0 = "CFWS_$0_$0",
    atext = "atext",
    atom = "atom",
    dot_atom_text = "dot_atom_text",
    dot_atom_text_$0 = "dot_atom_text_$0",
    dot_atom = "dot_atom",
    specials_1 = "specials_1",
    specials_2 = "specials_2",
    specials_3 = "specials_3",
    specials_4 = "specials_4",
    specials_5 = "specials_5",
    specials_6 = "specials_6",
    specials_7 = "specials_7",
    specials_8 = "specials_8",
    specials_9 = "specials_9",
    specials_10 = "specials_10",
    qtext_1 = "qtext_1",
    qtext_2 = "qtext_2",
    qtext_3 = "qtext_3",
    qtext_4 = "qtext_4",
    qcontent_1 = "qcontent_1",
    qcontent_2 = "qcontent_2",
    quoted_string = "quoted_string",
    quoted_string_$0 = "quoted_string_$0",
    word_1 = "word_1",
    word_2 = "word_2",
    phrase_1 = "phrase_1",
    phrase_2 = "phrase_2",
    unstructured_1 = "unstructured_1",
    unstructured_2 = "unstructured_2",
    unstructured_$0 = "unstructured_$0",
    unstructured_$0_$0 = "unstructured_$0_$0",
    date_time = "date_time",
    date_time_$0 = "date_time_$0",
    day_of_week_1 = "day_of_week_1",
    day_of_week_2 = "day_of_week_2",
    day_of_week_$0 = "day_of_week_$0",
    day_name_1 = "day_name_1",
    day_name_2 = "day_name_2",
    day_name_3 = "day_name_3",
    day_name_4 = "day_name_4",
    day_name_5 = "day_name_5",
    day_name_6 = "day_name_6",
    day_name_7 = "day_name_7",
    date = "date",
    day_1 = "day_1",
    day_2 = "day_2",
    day_$0 = "day_$0",
    month_1 = "month_1",
    month_2 = "month_2",
    month_3 = "month_3",
    month_4 = "month_4",
    month_5 = "month_5",
    month_6 = "month_6",
    month_7 = "month_7",
    month_8 = "month_8",
    month_9 = "month_9",
    month_10 = "month_10",
    month_11 = "month_11",
    month_12 = "month_12",
    year_1 = "year_1",
    year_2 = "year_2",
    year_$0 = "year_$0",
    time = "time",
    time_of_day = "time_of_day",
    time_of_day_$0 = "time_of_day_$0",
    hour_1 = "hour_1",
    hour_2 = "hour_2",
    minute_1 = "minute_1",
    minute_2 = "minute_2",
    second_1 = "second_1",
    second_2 = "second_2",
    zone_1 = "zone_1",
    zone_2 = "zone_2",
    zone_$0 = "zone_$0",
    zone_$0_$0_1 = "zone_$0_$0_1",
    zone_$0_$0_2 = "zone_$0_$0_2",
    address_1 = "address_1",
    address_2 = "address_2",
    mailbox_1 = "mailbox_1",
    mailbox_2 = "mailbox_2",
    name_addr = "name_addr",
    angle_addr_1 = "angle_addr_1",
    angle_addr_2 = "angle_addr_2",
    group = "group",
    display_name = "display_name",
    mailbox_list_1 = "mailbox_list_1",
    mailbox_list_2 = "mailbox_list_2",
    mailbox_list_$0 = "mailbox_list_$0",
    mailbox_list_$0_$0 = "mailbox_list_$0_$0",
    address_list_1 = "address_list_1",
    address_list_2 = "address_list_2",
    address_list_$0 = "address_list_$0",
    address_list_$0_$0 = "address_list_$0_$0",
    group_list_1 = "group_list_1",
    group_list_2 = "group_list_2",
    group_list_3 = "group_list_3",
    addr_spec = "addr_spec",
    local_part_1 = "local_part_1",
    local_part_2 = "local_part_2",
    local_part_3 = "local_part_3",
    domain_1 = "domain_1",
    domain_2 = "domain_2",
    domain_3 = "domain_3",
    domain_literal = "domain_literal",
    domain_literal_$0 = "domain_literal_$0",
    dtext_1 = "dtext_1",
    dtext_2 = "dtext_2",
    dtext_3 = "dtext_3",
    message = "message",
    message_$0_1 = "message_$0_1",
    message_$0_2 = "message_$0_2",
    message_$1 = "message_$1",
    body_1 = "body_1",
    body_2 = "body_2",
    body_$0 = "body_$0",
    body_$0_$0 = "body_$0_$0",
    text_1 = "text_1",
    text_2 = "text_2",
    text_3 = "text_3",
    text_4 = "text_4",
    _998text = "_998text",
    fields = "fields",
    fields_$0_1 = "fields_$0_1",
    fields_$0_2 = "fields_$0_2",
    fields_$0_$0_1 = "fields_$0_$0_1",
    fields_$0_$0_2 = "fields_$0_$0_2",
    fields_$0_$0_3 = "fields_$0_$0_3",
    fields_$0_$0_4 = "fields_$0_$0_4",
    fields_$0_$0_5 = "fields_$0_$0_5",
    fields_$0_$0_6 = "fields_$0_$0_6",
    fields_$0_$0_7 = "fields_$0_$0_7",
    fields_$1_1 = "fields_$1_1",
    fields_$1_2 = "fields_$1_2",
    fields_$1_3 = "fields_$1_3",
    fields_$1_4 = "fields_$1_4",
    fields_$1_5 = "fields_$1_5",
    fields_$1_6 = "fields_$1_6",
    fields_$1_7 = "fields_$1_7",
    fields_$1_8 = "fields_$1_8",
    fields_$1_9 = "fields_$1_9",
    fields_$1_10 = "fields_$1_10",
    fields_$1_11 = "fields_$1_11",
    fields_$1_12 = "fields_$1_12",
    fields_$1_13 = "fields_$1_13",
    fields_$1_14 = "fields_$1_14",
    orig_date = "orig_date",
    from = "from",
    sender = "sender",
    reply_to = "reply_to",
    to = "to",
    cc = "cc",
    bcc = "bcc",
    bcc_$0_1 = "bcc_$0_1",
    bcc_$0_2 = "bcc_$0_2",
    message_id = "message_id",
    in_reply_to = "in_reply_to",
    references = "references",
    msg_id = "msg_id",
    id_left_1 = "id_left_1",
    id_left_2 = "id_left_2",
    id_right_1 = "id_right_1",
    id_right_2 = "id_right_2",
    id_right_3 = "id_right_3",
    no_fold_literal = "no_fold_literal",
    subject = "subject",
    comments = "comments",
    keywords = "keywords",
    keywords_$0 = "keywords_$0",
    resent_date = "resent_date",
    resent_from = "resent_from",
    resent_sender = "resent_sender",
    resent_to = "resent_to",
    resent_cc = "resent_cc",
    resent_bcc = "resent_bcc",
    resent_bcc_$0_1 = "resent_bcc_$0_1",
    resent_bcc_$0_2 = "resent_bcc_$0_2",
    resent_msg_id = "resent_msg_id",
    trace = "trace",
    return_path = "return_path",
    path_1 = "path_1",
    path_2 = "path_2",
    path_$0 = "path_$0",
    received = "received",
    received_token_1 = "received_token_1",
    received_token_2 = "received_token_2",
    received_token_3 = "received_token_3",
    received_token_4 = "received_token_4",
    optional_field = "optional_field",
    field_name = "field_name",
    ftext_1 = "ftext_1",
    ftext_2 = "ftext_2",
    obs_NO_WS_CTL_1 = "obs_NO_WS_CTL_1",
    obs_NO_WS_CTL_2 = "obs_NO_WS_CTL_2",
    obs_NO_WS_CTL_3 = "obs_NO_WS_CTL_3",
    obs_NO_WS_CTL_4 = "obs_NO_WS_CTL_4",
    obs_NO_WS_CTL_5 = "obs_NO_WS_CTL_5",
    obs_ctext = "obs_ctext",
    obs_qtext = "obs_qtext",
    obs_utext_1 = "obs_utext_1",
    obs_utext_2 = "obs_utext_2",
    obs_utext_3 = "obs_utext_3",
    obs_qp = "obs_qp",
    obs_qp_$0_1 = "obs_qp_$0_1",
    obs_qp_$0_2 = "obs_qp_$0_2",
    obs_qp_$0_3 = "obs_qp_$0_3",
    obs_qp_$0_4 = "obs_qp_$0_4",
    obs_body = "obs_body",
    obs_body_$0_1 = "obs_body_$0_1",
    obs_body_$0_2 = "obs_body_$0_2",
    obs_body_$0_$0 = "obs_body_$0_$0",
    obs_body_$0_$0_$0 = "obs_body_$0_$0_$0",
    obs_body_$0_$0_$0_$0_1 = "obs_body_$0_$0_$0_$0_1",
    obs_body_$0_$0_$0_$0_2 = "obs_body_$0_$0_$0_$0_2",
    obs_unstruct = "obs_unstruct",
    obs_unstruct_$0_1 = "obs_unstruct_$0_1",
    obs_unstruct_$0_2 = "obs_unstruct_$0_2",
    obs_unstruct_$0_$0 = "obs_unstruct_$0_$0",
    obs_unstruct_$0_$0_$0 = "obs_unstruct_$0_$0_$0",
    obs_phrase = "obs_phrase",
    obs_phrase_$0_1 = "obs_phrase_$0_1",
    obs_phrase_$0_2 = "obs_phrase_$0_2",
    obs_phrase_$0_3 = "obs_phrase_$0_3",
    obs_phrase_list = "obs_phrase_list",
    obs_phrase_list_$0_1 = "obs_phrase_list_$0_1",
    obs_phrase_list_$0_2 = "obs_phrase_list_$0_2",
    obs_phrase_list_$1 = "obs_phrase_list_$1",
    obs_phrase_list_$1_$0_1 = "obs_phrase_list_$1_$0_1",
    obs_phrase_list_$1_$0_2 = "obs_phrase_list_$1_$0_2",
    obs_FWS = "obs_FWS",
    obs_FWS_$0 = "obs_FWS_$0",
    obs_day_of_week = "obs_day_of_week",
    obs_day = "obs_day",
    obs_year = "obs_year",
    obs_hour = "obs_hour",
    obs_minute = "obs_minute",
    obs_second = "obs_second",
    obs_zone_1 = "obs_zone_1",
    obs_zone_2 = "obs_zone_2",
    obs_zone_3 = "obs_zone_3",
    obs_zone_4 = "obs_zone_4",
    obs_zone_5 = "obs_zone_5",
    obs_zone_6 = "obs_zone_6",
    obs_zone_7 = "obs_zone_7",
    obs_zone_8 = "obs_zone_8",
    obs_zone_9 = "obs_zone_9",
    obs_zone_10 = "obs_zone_10",
    obs_zone_11 = "obs_zone_11",
    obs_zone_12 = "obs_zone_12",
    obs_zone_13 = "obs_zone_13",
    obs_zone_14 = "obs_zone_14",
    obs_angle_addr = "obs_angle_addr",
    obs_route = "obs_route",
    obs_domain_list = "obs_domain_list",
    obs_domain_list_$0_1 = "obs_domain_list_$0_1",
    obs_domain_list_$0_2 = "obs_domain_list_$0_2",
    obs_domain_list_$1 = "obs_domain_list_$1",
    obs_domain_list_$1_$0 = "obs_domain_list_$1_$0",
    obs_mbox_list = "obs_mbox_list",
    obs_mbox_list_$0 = "obs_mbox_list_$0",
    obs_mbox_list_$1 = "obs_mbox_list_$1",
    obs_mbox_list_$1_$0_1 = "obs_mbox_list_$1_$0_1",
    obs_mbox_list_$1_$0_2 = "obs_mbox_list_$1_$0_2",
    obs_addr_list = "obs_addr_list",
    obs_addr_list_$0 = "obs_addr_list_$0",
    obs_addr_list_$1 = "obs_addr_list_$1",
    obs_addr_list_$1_$0_1 = "obs_addr_list_$1_$0_1",
    obs_addr_list_$1_$0_2 = "obs_addr_list_$1_$0_2",
    obs_group_list = "obs_group_list",
    obs_group_list_$0 = "obs_group_list_$0",
    obs_local_part = "obs_local_part",
    obs_local_part_$0 = "obs_local_part_$0",
    obs_domain = "obs_domain",
    obs_domain_$0 = "obs_domain_$0",
    obs_dtext_1 = "obs_dtext_1",
    obs_dtext_2 = "obs_dtext_2",
    obs_fields = "obs_fields",
    obs_fields_$0_1 = "obs_fields_$0_1",
    obs_fields_$0_2 = "obs_fields_$0_2",
    obs_fields_$0_3 = "obs_fields_$0_3",
    obs_fields_$0_4 = "obs_fields_$0_4",
    obs_fields_$0_5 = "obs_fields_$0_5",
    obs_fields_$0_6 = "obs_fields_$0_6",
    obs_fields_$0_7 = "obs_fields_$0_7",
    obs_fields_$0_8 = "obs_fields_$0_8",
    obs_fields_$0_9 = "obs_fields_$0_9",
    obs_fields_$0_10 = "obs_fields_$0_10",
    obs_fields_$0_11 = "obs_fields_$0_11",
    obs_fields_$0_12 = "obs_fields_$0_12",
    obs_fields_$0_13 = "obs_fields_$0_13",
    obs_fields_$0_14 = "obs_fields_$0_14",
    obs_fields_$0_15 = "obs_fields_$0_15",
    obs_fields_$0_16 = "obs_fields_$0_16",
    obs_fields_$0_17 = "obs_fields_$0_17",
    obs_fields_$0_18 = "obs_fields_$0_18",
    obs_fields_$0_19 = "obs_fields_$0_19",
    obs_fields_$0_20 = "obs_fields_$0_20",
    obs_fields_$0_21 = "obs_fields_$0_21",
    obs_fields_$0_22 = "obs_fields_$0_22",
    obs_fields_$0_23 = "obs_fields_$0_23",
    obs_fields_$0_24 = "obs_fields_$0_24",
    obs_orig_date = "obs_orig_date",
    obs_from = "obs_from",
    obs_sender = "obs_sender",
    obs_reply_to = "obs_reply_to",
    obs_to = "obs_to",
    obs_cc = "obs_cc",
    obs_bcc = "obs_bcc",
    obs_bcc_$0_1 = "obs_bcc_$0_1",
    obs_bcc_$0_2 = "obs_bcc_$0_2",
    obs_bcc_$0_$0 = "obs_bcc_$0_$0",
    obs_bcc_$0_$0_$0 = "obs_bcc_$0_$0_$0",
    obs_message_id = "obs_message_id",
    obs_in_reply_to = "obs_in_reply_to",
    obs_in_reply_to_$0_1 = "obs_in_reply_to_$0_1",
    obs_in_reply_to_$0_2 = "obs_in_reply_to_$0_2",
    obs_references = "obs_references",
    obs_references_$0_1 = "obs_references_$0_1",
    obs_references_$0_2 = "obs_references_$0_2",
    obs_id_left = "obs_id_left",
    obs_id_right = "obs_id_right",
    obs_subject = "obs_subject",
    obs_comments = "obs_comments",
    obs_keywords = "obs_keywords",
    obs_resent_from = "obs_resent_from",
    obs_resent_send = "obs_resent_send",
    obs_resent_date = "obs_resent_date",
    obs_resent_to = "obs_resent_to",
    obs_resent_cc = "obs_resent_cc",
    obs_resent_bcc = "obs_resent_bcc",
    obs_resent_bcc_$0_1 = "obs_resent_bcc_$0_1",
    obs_resent_bcc_$0_2 = "obs_resent_bcc_$0_2",
    obs_resent_bcc_$0_$0 = "obs_resent_bcc_$0_$0",
    obs_resent_bcc_$0_$0_$0 = "obs_resent_bcc_$0_$0_$0",
    obs_resent_mid = "obs_resent_mid",
    obs_resent_rply = "obs_resent_rply",
    obs_return = "obs_return",
    obs_received = "obs_received",
    obs_optional = "obs_optional",
}
export class start {
    public kind: ASTKinds.start = ASTKinds.start;
    public a: message;
    public literal: string;
    constructor(a: message){
        this.a = a;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class CR {
    public kind: ASTKinds.CR = ASTKinds.CR;
    public a: string;
    public literal: string;
    constructor(a: string){
        this.a = a;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class CRLF {
    public kind: ASTKinds.CRLF = ASTKinds.CRLF;
    public a: string;
    public literal: string;
    constructor(a: string){
        this.a = a;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class DIGIT {
    public kind: ASTKinds.DIGIT = ASTKinds.DIGIT;
    public a: string;
    public literal: string;
    constructor(a: string){
        this.a = a;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class TWO_DIGIT {
    public kind: ASTKinds.TWO_DIGIT = ASTKinds.TWO_DIGIT;
    public a: string;
    public literal: string;
    constructor(a: string){
        this.a = a;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class FOUR_DIGIT {
    public kind: ASTKinds.FOUR_DIGIT = ASTKinds.FOUR_DIGIT;
    public a: string;
    public literal: string;
    constructor(a: string){
        this.a = a;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class DQUOTE {
    public kind: ASTKinds.DQUOTE = ASTKinds.DQUOTE;
    public a: string;
    public literal: string;
    constructor(a: string){
        this.a = a;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class HTAB {
    public kind: ASTKinds.HTAB = ASTKinds.HTAB;
    public a: string;
    public literal: string;
    constructor(a: string){
        this.a = a;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class LF {
    public kind: ASTKinds.LF = ASTKinds.LF;
    public a: string;
    public literal: string;
    constructor(a: string){
        this.a = a;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class SP {
    public kind: ASTKinds.SP = ASTKinds.SP;
    public a: string;
    public literal: string;
    constructor(a: string){
        this.a = a;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class VCHAR {
    public kind: ASTKinds.VCHAR = ASTKinds.VCHAR;
    public a: string;
    public literal: string;
    constructor(a: string){
        this.a = a;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type WSP = WSP_1 | WSP_2;
export interface WSP_1 {
    kind: ASTKinds.WSP_1;
    a: SP;
}
export class WSP_2 {
    public kind: ASTKinds.WSP_2 = ASTKinds.WSP_2;
    public b: HTAB;
    public literal: string;
    constructor(b: HTAB){
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type quoted_pair = quoted_pair_1 | quoted_pair_2;
export interface quoted_pair_1 {
    kind: ASTKinds.quoted_pair_1;
    a: quoted_pair_$0;
}
export class quoted_pair_2 {
    public kind: ASTKinds.quoted_pair_2 = ASTKinds.quoted_pair_2;
    public b: obs_qp;
    public literal: string;
    constructor(b: obs_qp){
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export interface quoted_pair_$0 {
    kind: ASTKinds.quoted_pair_$0;
    a: string;
    b: quoted_pair_$0_$0;
}
export type quoted_pair_$0_$0 = quoted_pair_$0_$0_1 | quoted_pair_$0_$0_2;
export interface quoted_pair_$0_$0_1 {
    kind: ASTKinds.quoted_pair_$0_$0_1;
    a: VCHAR;
}
export interface quoted_pair_$0_$0_2 {
    kind: ASTKinds.quoted_pair_$0_$0_2;
    b: WSP;
}
export type FWS = FWS_1 | FWS_2;
export interface FWS_1 {
    kind: ASTKinds.FWS_1;
    a: FWS_$0;
}
export class FWS_2 {
    public kind: ASTKinds.FWS_2 = ASTKinds.FWS_2;
    public b: obs_FWS;
    public literal: string;
    constructor(b: obs_FWS){
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export interface FWS_$0 {
    kind: ASTKinds.FWS_$0;
    a: Nullable<FWS_$0_$0>;
    b: WSP[];
}
export interface FWS_$0_$0 {
    kind: ASTKinds.FWS_$0_$0;
    a: WSP[];
    b: CRLF;
}
export type ctext = ctext_1 | ctext_2 | ctext_3 | ctext_4;
export interface ctext_1 {
    kind: ASTKinds.ctext_1;
    a: string;
}
export interface ctext_2 {
    kind: ASTKinds.ctext_2;
    b: string;
}
export interface ctext_3 {
    kind: ASTKinds.ctext_3;
    c: string;
}
export class ctext_4 {
    public kind: ASTKinds.ctext_4 = ASTKinds.ctext_4;
    public d: obs_ctext;
    public literal: string;
    constructor(d: obs_ctext){
        this.d = d;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type ccontent = ccontent_1 | ccontent_2 | ccontent_3;
export interface ccontent_1 {
    kind: ASTKinds.ccontent_1;
    a: ctext;
}
export interface ccontent_2 {
    kind: ASTKinds.ccontent_2;
    b: quoted_pair;
}
export class ccontent_3 {
    public kind: ASTKinds.ccontent_3 = ASTKinds.ccontent_3;
    public c: comment;
    public literal: string;
    constructor(c: comment){
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class comment {
    public kind: ASTKinds.comment = ASTKinds.comment;
    public a: string;
    public b: comment_$0[];
    public c: Nullable<FWS>;
    public d: string;
    public literal: string;
    constructor(a: string, b: comment_$0[], c: Nullable<FWS>, d: string){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export interface comment_$0 {
    kind: ASTKinds.comment_$0;
    a: Nullable<FWS>;
    b: ccontent;
}
export type CFWS = CFWS_1 | CFWS_2;
export interface CFWS_1 {
    kind: ASTKinds.CFWS_1;
    a: CFWS_$0;
}
export class CFWS_2 {
    public kind: ASTKinds.CFWS_2 = ASTKinds.CFWS_2;
    public b: FWS;
    public literal: string;
    constructor(b: FWS){
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export interface CFWS_$0 {
    kind: ASTKinds.CFWS_$0;
    a: CFWS_$0_$0[];
    b: Nullable<FWS>;
}
export interface CFWS_$0_$0 {
    kind: ASTKinds.CFWS_$0_$0;
    a: Nullable<FWS>;
    b: comment;
}
export class atext {
    public kind: ASTKinds.atext = ASTKinds.atext;
    public a: string;
    public literal: string;
    constructor(a: string){
        this.a = a;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class atom {
    public kind: ASTKinds.atom = ASTKinds.atom;
    public a: Nullable<CFWS>;
    public b: atext[];
    public c: Nullable<CFWS>;
    public literal: string;
    constructor(a: Nullable<CFWS>, b: atext[], c: Nullable<CFWS>){
        this.a = a;
        this.b = b;
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class dot_atom_text {
    public kind: ASTKinds.dot_atom_text = ASTKinds.dot_atom_text;
    public a: atext[];
    public b: dot_atom_text_$0[];
    public literal: string;
    constructor(a: atext[], b: dot_atom_text_$0[]){
        this.a = a;
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export interface dot_atom_text_$0 {
    kind: ASTKinds.dot_atom_text_$0;
    a: string;
    b: atext[];
}
export class dot_atom {
    public kind: ASTKinds.dot_atom = ASTKinds.dot_atom;
    public a: Nullable<CFWS>;
    public b: dot_atom_text;
    public c: Nullable<CFWS>;
    public literal: string;
    constructor(a: Nullable<CFWS>, b: dot_atom_text, c: Nullable<CFWS>){
        this.a = a;
        this.b = b;
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type specials = specials_1 | specials_2 | specials_3 | specials_4 | specials_5 | specials_6 | specials_7 | specials_8 | specials_9 | specials_10;
export interface specials_1 {
    kind: ASTKinds.specials_1;
    a: string;
}
export interface specials_2 {
    kind: ASTKinds.specials_2;
    b: string;
}
export interface specials_3 {
    kind: ASTKinds.specials_3;
    c: string;
}
export interface specials_4 {
    kind: ASTKinds.specials_4;
    d: string;
}
export interface specials_5 {
    kind: ASTKinds.specials_5;
    e: string;
}
export interface specials_6 {
    kind: ASTKinds.specials_6;
    f: string;
}
export interface specials_7 {
    kind: ASTKinds.specials_7;
    g: string;
}
export interface specials_8 {
    kind: ASTKinds.specials_8;
    h: string;
}
export interface specials_9 {
    kind: ASTKinds.specials_9;
    i: string;
}
export class specials_10 {
    public kind: ASTKinds.specials_10 = ASTKinds.specials_10;
    public j: DQUOTE;
    public literal: string;
    constructor(j: DQUOTE){
        this.j = j;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type qtext = qtext_1 | qtext_2 | qtext_3 | qtext_4;
export interface qtext_1 {
    kind: ASTKinds.qtext_1;
    a: string;
}
export interface qtext_2 {
    kind: ASTKinds.qtext_2;
    b: string;
}
export interface qtext_3 {
    kind: ASTKinds.qtext_3;
    c: string;
}
export class qtext_4 {
    public kind: ASTKinds.qtext_4 = ASTKinds.qtext_4;
    public d: obs_qtext;
    public literal: string;
    constructor(d: obs_qtext){
        this.d = d;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type qcontent = qcontent_1 | qcontent_2;
export interface qcontent_1 {
    kind: ASTKinds.qcontent_1;
    a: qtext;
}
export class qcontent_2 {
    public kind: ASTKinds.qcontent_2 = ASTKinds.qcontent_2;
    public b: quoted_pair;
    public literal: string;
    constructor(b: quoted_pair){
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class quoted_string {
    public kind: ASTKinds.quoted_string = ASTKinds.quoted_string;
    public a: Nullable<CFWS>;
    public b: DQUOTE;
    public c: quoted_string_$0[];
    public d: Nullable<FWS>;
    public e: DQUOTE;
    public f: Nullable<CFWS>;
    public literal: string;
    constructor(a: Nullable<CFWS>, b: DQUOTE, c: quoted_string_$0[], d: Nullable<FWS>, e: DQUOTE, f: Nullable<CFWS>){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
        this.f = f;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export interface quoted_string_$0 {
    kind: ASTKinds.quoted_string_$0;
    a: Nullable<FWS>;
    b: qcontent;
}
export type word = word_1 | word_2;
export interface word_1 {
    kind: ASTKinds.word_1;
    a: atom;
}
export class word_2 {
    public kind: ASTKinds.word_2 = ASTKinds.word_2;
    public b: quoted_string;
    public literal: string;
    constructor(b: quoted_string){
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type phrase = phrase_1 | phrase_2;
export interface phrase_1 {
    kind: ASTKinds.phrase_1;
    a: word[];
}
export class phrase_2 {
    public kind: ASTKinds.phrase_2 = ASTKinds.phrase_2;
    public b: obs_phrase;
    public literal: string;
    constructor(b: obs_phrase){
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type unstructured = unstructured_1 | unstructured_2;
export interface unstructured_1 {
    kind: ASTKinds.unstructured_1;
    a: unstructured_$0;
}
export class unstructured_2 {
    public kind: ASTKinds.unstructured_2 = ASTKinds.unstructured_2;
    public b: obs_unstruct;
    public literal: string;
    constructor(b: obs_unstruct){
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export interface unstructured_$0 {
    kind: ASTKinds.unstructured_$0;
    a: unstructured_$0_$0[];
    b: WSP[];
}
export interface unstructured_$0_$0 {
    kind: ASTKinds.unstructured_$0_$0;
    a: Nullable<FWS>;
    b: VCHAR;
}
export class date_time {
    public kind: ASTKinds.date_time = ASTKinds.date_time;
    public a: Nullable<date_time_$0>;
    public b: date;
    public c: time;
    public d: Nullable<CFWS>;
    public literal: string;
    constructor(a: Nullable<date_time_$0>, b: date, c: time, d: Nullable<CFWS>){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export interface date_time_$0 {
    kind: ASTKinds.date_time_$0;
    a: day_of_week;
    b: string;
}
export type day_of_week = day_of_week_1 | day_of_week_2;
export interface day_of_week_1 {
    kind: ASTKinds.day_of_week_1;
    a: day_of_week_$0;
}
export class day_of_week_2 {
    public kind: ASTKinds.day_of_week_2 = ASTKinds.day_of_week_2;
    public b: obs_day_of_week;
    public literal: string;
    constructor(b: obs_day_of_week){
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export interface day_of_week_$0 {
    kind: ASTKinds.day_of_week_$0;
    a: Nullable<FWS>;
    b: day_name;
}
export type day_name = day_name_1 | day_name_2 | day_name_3 | day_name_4 | day_name_5 | day_name_6 | day_name_7;
export interface day_name_1 {
    kind: ASTKinds.day_name_1;
    a: string;
}
export interface day_name_2 {
    kind: ASTKinds.day_name_2;
    b: string;
}
export interface day_name_3 {
    kind: ASTKinds.day_name_3;
    c: string;
}
export interface day_name_4 {
    kind: ASTKinds.day_name_4;
    d: string;
}
export interface day_name_5 {
    kind: ASTKinds.day_name_5;
    e: string;
}
export interface day_name_6 {
    kind: ASTKinds.day_name_6;
    f: string;
}
export class day_name_7 {
    public kind: ASTKinds.day_name_7 = ASTKinds.day_name_7;
    public g: string;
    public literal: string;
    constructor(g: string){
        this.g = g;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class date {
    public kind: ASTKinds.date = ASTKinds.date;
    public a: day;
    public b: month;
    public c: year;
    public literal: string;
    constructor(a: day, b: month, c: year){
        this.a = a;
        this.b = b;
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type day = day_1 | day_2;
export interface day_1 {
    kind: ASTKinds.day_1;
    a: day_$0;
}
export class day_2 {
    public kind: ASTKinds.day_2 = ASTKinds.day_2;
    public b: obs_day;
    public literal: string;
    constructor(b: obs_day){
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export interface day_$0 {
    kind: ASTKinds.day_$0;
    a: Nullable<FWS>;
    b: DIGIT;
    c: Nullable<DIGIT>;
    d: FWS;
}
export type month = month_1 | month_2 | month_3 | month_4 | month_5 | month_6 | month_7 | month_8 | month_9 | month_10 | month_11 | month_12;
export interface month_1 {
    kind: ASTKinds.month_1;
    a: string;
}
export interface month_2 {
    kind: ASTKinds.month_2;
    b: string;
}
export interface month_3 {
    kind: ASTKinds.month_3;
    c: string;
}
export interface month_4 {
    kind: ASTKinds.month_4;
    d: string;
}
export interface month_5 {
    kind: ASTKinds.month_5;
    e: string;
}
export interface month_6 {
    kind: ASTKinds.month_6;
    f: string;
}
export interface month_7 {
    kind: ASTKinds.month_7;
    g: string;
}
export interface month_8 {
    kind: ASTKinds.month_8;
    h: string;
}
export interface month_9 {
    kind: ASTKinds.month_9;
    i: string;
}
export interface month_10 {
    kind: ASTKinds.month_10;
    j: string;
}
export interface month_11 {
    kind: ASTKinds.month_11;
    k: string;
}
export class month_12 {
    public kind: ASTKinds.month_12 = ASTKinds.month_12;
    public l: string;
    public literal: string;
    constructor(l: string){
        this.l = l;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type year = year_1 | year_2;
export interface year_1 {
    kind: ASTKinds.year_1;
    a: year_$0;
}
export class year_2 {
    public kind: ASTKinds.year_2 = ASTKinds.year_2;
    public b: obs_year;
    public literal: string;
    constructor(b: obs_year){
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export interface year_$0 {
    kind: ASTKinds.year_$0;
    a: FWS;
    b: FOUR_DIGIT;
    c: DIGIT[];
    d: FWS;
}
export class time {
    public kind: ASTKinds.time = ASTKinds.time;
    public a: time_of_day;
    public b: zone;
    public literal: string;
    constructor(a: time_of_day, b: zone){
        this.a = a;
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class time_of_day {
    public kind: ASTKinds.time_of_day = ASTKinds.time_of_day;
    public a: hour;
    public b: string;
    public c: minute;
    public d: Nullable<time_of_day_$0>;
    public literal: string;
    constructor(a: hour, b: string, c: minute, d: Nullable<time_of_day_$0>){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export interface time_of_day_$0 {
    kind: ASTKinds.time_of_day_$0;
    a: string;
    b: second;
}
export type hour = hour_1 | hour_2;
export interface hour_1 {
    kind: ASTKinds.hour_1;
    a: TWO_DIGIT;
}
export class hour_2 {
    public kind: ASTKinds.hour_2 = ASTKinds.hour_2;
    public b: obs_hour;
    public literal: string;
    constructor(b: obs_hour){
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type minute = minute_1 | minute_2;
export interface minute_1 {
    kind: ASTKinds.minute_1;
    a: TWO_DIGIT;
}
export class minute_2 {
    public kind: ASTKinds.minute_2 = ASTKinds.minute_2;
    public b: obs_minute;
    public literal: string;
    constructor(b: obs_minute){
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type second = second_1 | second_2;
export interface second_1 {
    kind: ASTKinds.second_1;
    a: TWO_DIGIT;
}
export class second_2 {
    public kind: ASTKinds.second_2 = ASTKinds.second_2;
    public b: obs_second;
    public literal: string;
    constructor(b: obs_second){
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type zone = zone_1 | zone_2;
export interface zone_1 {
    kind: ASTKinds.zone_1;
    a: zone_$0;
}
export class zone_2 {
    public kind: ASTKinds.zone_2 = ASTKinds.zone_2;
    public b: obs_zone;
    public literal: string;
    constructor(b: obs_zone){
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export interface zone_$0 {
    kind: ASTKinds.zone_$0;
    a: FWS;
    b: zone_$0_$0;
    c: FOUR_DIGIT;
}
export type zone_$0_$0 = zone_$0_$0_1 | zone_$0_$0_2;
export interface zone_$0_$0_1 {
    kind: ASTKinds.zone_$0_$0_1;
    a: string;
}
export interface zone_$0_$0_2 {
    kind: ASTKinds.zone_$0_$0_2;
    b: string;
}
export type address = address_1 | address_2;
export interface address_1 {
    kind: ASTKinds.address_1;
    a: mailbox;
}
export class address_2 {
    public kind: ASTKinds.address_2 = ASTKinds.address_2;
    public b: group;
    public literal: string;
    constructor(b: group){
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type mailbox = mailbox_1 | mailbox_2;
export interface mailbox_1 {
    kind: ASTKinds.mailbox_1;
    a: name_addr;
}
export class mailbox_2 {
    public kind: ASTKinds.mailbox_2 = ASTKinds.mailbox_2;
    public b: addr_spec;
    public literal: string;
    constructor(b: addr_spec){
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class name_addr {
    public kind: ASTKinds.name_addr = ASTKinds.name_addr;
    public a: Nullable<display_name>;
    public b: angle_addr;
    public literal: string;
    constructor(a: Nullable<display_name>, b: angle_addr){
        this.a = a;
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type angle_addr = angle_addr_1 | angle_addr_2;
export interface angle_addr_1 {
    kind: ASTKinds.angle_addr_1;
    a: Nullable<CFWS>;
    b: string;
    c: addr_spec;
    d: string;
    e: Nullable<CFWS>;
}
export class angle_addr_2 {
    public kind: ASTKinds.angle_addr_2 = ASTKinds.angle_addr_2;
    public f: obs_angle_addr;
    public literal: string;
    constructor(f: obs_angle_addr){
        this.f = f;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class group {
    public kind: ASTKinds.group = ASTKinds.group;
    public a: display_name;
    public b: string;
    public c: Nullable<group_list>;
    public d: string;
    public e: Nullable<CFWS>;
    public literal: string;
    constructor(a: display_name, b: string, c: Nullable<group_list>, d: string, e: Nullable<CFWS>){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class display_name {
    public kind: ASTKinds.display_name = ASTKinds.display_name;
    public a: phrase;
    public literal: string;
    constructor(a: phrase){
        this.a = a;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type mailbox_list = mailbox_list_1 | mailbox_list_2;
export interface mailbox_list_1 {
    kind: ASTKinds.mailbox_list_1;
    a: mailbox_list_$0;
}
export class mailbox_list_2 {
    public kind: ASTKinds.mailbox_list_2 = ASTKinds.mailbox_list_2;
    public b: obs_mbox_list;
    public literal: string;
    constructor(b: obs_mbox_list){
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export interface mailbox_list_$0 {
    kind: ASTKinds.mailbox_list_$0;
    a: mailbox;
    b: mailbox_list_$0_$0[];
}
export interface mailbox_list_$0_$0 {
    kind: ASTKinds.mailbox_list_$0_$0;
    a: string;
    b: mailbox;
}
export type address_list = address_list_1 | address_list_2;
export interface address_list_1 {
    kind: ASTKinds.address_list_1;
    a: address_list_$0;
}
export class address_list_2 {
    public kind: ASTKinds.address_list_2 = ASTKinds.address_list_2;
    public b: obs_addr_list;
    public literal: string;
    constructor(b: obs_addr_list){
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export interface address_list_$0 {
    kind: ASTKinds.address_list_$0;
    a: address;
    b: address_list_$0_$0[];
}
export interface address_list_$0_$0 {
    kind: ASTKinds.address_list_$0_$0;
    a: string;
    b: address;
}
export type group_list = group_list_1 | group_list_2 | group_list_3;
export interface group_list_1 {
    kind: ASTKinds.group_list_1;
    a: mailbox_list;
}
export interface group_list_2 {
    kind: ASTKinds.group_list_2;
    b: CFWS;
}
export class group_list_3 {
    public kind: ASTKinds.group_list_3 = ASTKinds.group_list_3;
    public c: obs_group_list;
    public literal: string;
    constructor(c: obs_group_list){
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class addr_spec {
    public kind: ASTKinds.addr_spec = ASTKinds.addr_spec;
    public a: local_part;
    public b: string;
    public c: domain;
    public literal: string;
    constructor(a: local_part, b: string, c: domain){
        this.a = a;
        this.b = b;
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type local_part = local_part_1 | local_part_2 | local_part_3;
export interface local_part_1 {
    kind: ASTKinds.local_part_1;
    a: dot_atom;
}
export interface local_part_2 {
    kind: ASTKinds.local_part_2;
    b: quoted_string;
}
export class local_part_3 {
    public kind: ASTKinds.local_part_3 = ASTKinds.local_part_3;
    public c: obs_local_part;
    public literal: string;
    constructor(c: obs_local_part){
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type domain = domain_1 | domain_2 | domain_3;
export interface domain_1 {
    kind: ASTKinds.domain_1;
    a: dot_atom;
}
export interface domain_2 {
    kind: ASTKinds.domain_2;
    b: domain_literal;
}
export class domain_3 {
    public kind: ASTKinds.domain_3 = ASTKinds.domain_3;
    public c: obs_domain;
    public literal: string;
    constructor(c: obs_domain){
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class domain_literal {
    public kind: ASTKinds.domain_literal = ASTKinds.domain_literal;
    public a: Nullable<CFWS>;
    public b: string;
    public c: domain_literal_$0[];
    public d: Nullable<FWS>;
    public e: string;
    public f: Nullable<CFWS>;
    public literal: string;
    constructor(a: Nullable<CFWS>, b: string, c: domain_literal_$0[], d: Nullable<FWS>, e: string, f: Nullable<CFWS>){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
        this.f = f;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export interface domain_literal_$0 {
    kind: ASTKinds.domain_literal_$0;
    a: Nullable<FWS>;
    b: dtext;
}
export type dtext = dtext_1 | dtext_2 | dtext_3;
export interface dtext_1 {
    kind: ASTKinds.dtext_1;
    a: string;
}
export interface dtext_2 {
    kind: ASTKinds.dtext_2;
    b: string;
}
export class dtext_3 {
    public kind: ASTKinds.dtext_3 = ASTKinds.dtext_3;
    public c: obs_dtext;
    public literal: string;
    constructor(c: obs_dtext){
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class message {
    public kind: ASTKinds.message = ASTKinds.message;
    public a: message_$0;
    public b: Nullable<message_$1>;
    public literal: string;
    constructor(a: message_$0, b: Nullable<message_$1>){
        this.a = a;
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type message_$0 = message_$0_1 | message_$0_2;
export interface message_$0_1 {
    kind: ASTKinds.message_$0_1;
    a: fields;
}
export interface message_$0_2 {
    kind: ASTKinds.message_$0_2;
    b: obs_fields;
}
export interface message_$1 {
    kind: ASTKinds.message_$1;
    a: CRLF;
    b: body;
}
export type body = body_1 | body_2;
export interface body_1 {
    kind: ASTKinds.body_1;
    a: body_$0;
}
export class body_2 {
    public kind: ASTKinds.body_2 = ASTKinds.body_2;
    public b: obs_body;
    public literal: string;
    constructor(b: obs_body){
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export interface body_$0 {
    kind: ASTKinds.body_$0;
    a: body_$0_$0[];
    b: _998text;
}
export interface body_$0_$0 {
    kind: ASTKinds.body_$0_$0;
    a: _998text;
    b: CRLF;
}
export type text = text_1 | text_2 | text_3 | text_4;
export interface text_1 {
    kind: ASTKinds.text_1;
    a: string;
}
export interface text_2 {
    kind: ASTKinds.text_2;
    b: string;
}
export interface text_3 {
    kind: ASTKinds.text_3;
    c: string;
}
export class text_4 {
    public kind: ASTKinds.text_4 = ASTKinds.text_4;
    public d: string;
    public literal: string;
    constructor(d: string){
        this.d = d;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class _998text {
    public kind: ASTKinds._998text = ASTKinds._998text;
    public a: string;
    public literal: string;
    constructor(a: string){
        this.a = a;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class fields {
    public kind: ASTKinds.fields = ASTKinds.fields;
    public a: fields_$0[];
    public b: fields_$1[];
    public literal: string;
    constructor(a: fields_$0[], b: fields_$1[]){
        this.a = a;
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type fields_$0 = fields_$0_1 | fields_$0_2;
export interface fields_$0_1 {
    kind: ASTKinds.fields_$0_1;
    a: trace;
    b: optional_field[];
}
export interface fields_$0_2 {
    kind: ASTKinds.fields_$0_2;
    c: fields_$0_$0[];
}
export type fields_$0_$0 = fields_$0_$0_1 | fields_$0_$0_2 | fields_$0_$0_3 | fields_$0_$0_4 | fields_$0_$0_5 | fields_$0_$0_6 | fields_$0_$0_7;
export interface fields_$0_$0_1 {
    kind: ASTKinds.fields_$0_$0_1;
    a: resent_date;
}
export interface fields_$0_$0_2 {
    kind: ASTKinds.fields_$0_$0_2;
    b: resent_from;
}
export interface fields_$0_$0_3 {
    kind: ASTKinds.fields_$0_$0_3;
    c: resent_sender;
}
export interface fields_$0_$0_4 {
    kind: ASTKinds.fields_$0_$0_4;
    d: resent_to;
}
export interface fields_$0_$0_5 {
    kind: ASTKinds.fields_$0_$0_5;
    e: resent_cc;
}
export interface fields_$0_$0_6 {
    kind: ASTKinds.fields_$0_$0_6;
    f: resent_bcc;
}
export interface fields_$0_$0_7 {
    kind: ASTKinds.fields_$0_$0_7;
    g: resent_msg_id;
}
export type fields_$1 = fields_$1_1 | fields_$1_2 | fields_$1_3 | fields_$1_4 | fields_$1_5 | fields_$1_6 | fields_$1_7 | fields_$1_8 | fields_$1_9 | fields_$1_10 | fields_$1_11 | fields_$1_12 | fields_$1_13 | fields_$1_14;
export interface fields_$1_1 {
    kind: ASTKinds.fields_$1_1;
    a: orig_date;
}
export interface fields_$1_2 {
    kind: ASTKinds.fields_$1_2;
    b: from;
}
export interface fields_$1_3 {
    kind: ASTKinds.fields_$1_3;
    c: sender;
}
export interface fields_$1_4 {
    kind: ASTKinds.fields_$1_4;
    d: reply_to;
}
export interface fields_$1_5 {
    kind: ASTKinds.fields_$1_5;
    e: to;
}
export interface fields_$1_6 {
    kind: ASTKinds.fields_$1_6;
    f: cc;
}
export interface fields_$1_7 {
    kind: ASTKinds.fields_$1_7;
    g: bcc;
}
export interface fields_$1_8 {
    kind: ASTKinds.fields_$1_8;
    h: message_id;
}
export interface fields_$1_9 {
    kind: ASTKinds.fields_$1_9;
    i: in_reply_to;
}
export interface fields_$1_10 {
    kind: ASTKinds.fields_$1_10;
    j: references;
}
export interface fields_$1_11 {
    kind: ASTKinds.fields_$1_11;
    k: subject;
}
export interface fields_$1_12 {
    kind: ASTKinds.fields_$1_12;
    l: comments;
}
export interface fields_$1_13 {
    kind: ASTKinds.fields_$1_13;
    m: keywords;
}
export interface fields_$1_14 {
    kind: ASTKinds.fields_$1_14;
    n: optional_field;
}
export class orig_date {
    public kind: ASTKinds.orig_date = ASTKinds.orig_date;
    public a: string;
    public b: date_time;
    public c: CRLF;
    public literal: string;
    constructor(a: string, b: date_time, c: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class from {
    public kind: ASTKinds.from = ASTKinds.from;
    public a: string;
    public b: mailbox_list;
    public c: CRLF;
    public literal: string;
    constructor(a: string, b: mailbox_list, c: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class sender {
    public kind: ASTKinds.sender = ASTKinds.sender;
    public a: string;
    public b: mailbox;
    public c: CRLF;
    public literal: string;
    constructor(a: string, b: mailbox, c: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class reply_to {
    public kind: ASTKinds.reply_to = ASTKinds.reply_to;
    public a: string;
    public b: address_list;
    public c: CRLF;
    public literal: string;
    constructor(a: string, b: address_list, c: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class to {
    public kind: ASTKinds.to = ASTKinds.to;
    public a: string;
    public b: address_list;
    public c: CRLF;
    public literal: string;
    constructor(a: string, b: address_list, c: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class cc {
    public kind: ASTKinds.cc = ASTKinds.cc;
    public a: string;
    public b: address_list;
    public c: CRLF;
    public literal: string;
    constructor(a: string, b: address_list, c: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class bcc {
    public kind: ASTKinds.bcc = ASTKinds.bcc;
    public a: string;
    public b: Nullable<bcc_$0>;
    public c: CRLF;
    public literal: string;
    constructor(a: string, b: Nullable<bcc_$0>, c: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type bcc_$0 = bcc_$0_1 | bcc_$0_2;
export interface bcc_$0_1 {
    kind: ASTKinds.bcc_$0_1;
    a: address_list;
}
export interface bcc_$0_2 {
    kind: ASTKinds.bcc_$0_2;
    b: CFWS;
}
export class message_id {
    public kind: ASTKinds.message_id = ASTKinds.message_id;
    public a: string;
    public b: msg_id;
    public c: CRLF;
    public literal: string;
    constructor(a: string, b: msg_id, c: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class in_reply_to {
    public kind: ASTKinds.in_reply_to = ASTKinds.in_reply_to;
    public a: string;
    public b: msg_id[];
    public c: CRLF;
    public literal: string;
    constructor(a: string, b: msg_id[], c: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class references {
    public kind: ASTKinds.references = ASTKinds.references;
    public a: string;
    public b: msg_id[];
    public c: CRLF;
    public literal: string;
    constructor(a: string, b: msg_id[], c: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class msg_id {
    public kind: ASTKinds.msg_id = ASTKinds.msg_id;
    public a: Nullable<CFWS>;
    public b: string;
    public c: id_left;
    public d: string;
    public e: id_right;
    public f: string;
    public g: Nullable<CFWS>;
    public literal: string;
    constructor(a: Nullable<CFWS>, b: string, c: id_left, d: string, e: id_right, f: string, g: Nullable<CFWS>){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
        this.f = f;
        this.g = g;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type id_left = id_left_1 | id_left_2;
export interface id_left_1 {
    kind: ASTKinds.id_left_1;
    a: dot_atom_text;
}
export class id_left_2 {
    public kind: ASTKinds.id_left_2 = ASTKinds.id_left_2;
    public b: obs_id_left;
    public literal: string;
    constructor(b: obs_id_left){
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type id_right = id_right_1 | id_right_2 | id_right_3;
export interface id_right_1 {
    kind: ASTKinds.id_right_1;
    a: dot_atom_text;
}
export interface id_right_2 {
    kind: ASTKinds.id_right_2;
    b: no_fold_literal;
}
export class id_right_3 {
    public kind: ASTKinds.id_right_3 = ASTKinds.id_right_3;
    public c: obs_id_right;
    public literal: string;
    constructor(c: obs_id_right){
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class no_fold_literal {
    public kind: ASTKinds.no_fold_literal = ASTKinds.no_fold_literal;
    public a: string;
    public b: dtext[];
    public c: string;
    public literal: string;
    constructor(a: string, b: dtext[], c: string){
        this.a = a;
        this.b = b;
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class subject {
    public kind: ASTKinds.subject = ASTKinds.subject;
    public a: string;
    public b: unstructured;
    public c: CRLF;
    public literal: string;
    constructor(a: string, b: unstructured, c: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class comments {
    public kind: ASTKinds.comments = ASTKinds.comments;
    public a: string;
    public b: unstructured;
    public c: CRLF;
    public literal: string;
    constructor(a: string, b: unstructured, c: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class keywords {
    public kind: ASTKinds.keywords = ASTKinds.keywords;
    public a: string;
    public b: phrase;
    public c: keywords_$0[];
    public d: CRLF;
    public literal: string;
    constructor(a: string, b: phrase, c: keywords_$0[], d: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export interface keywords_$0 {
    kind: ASTKinds.keywords_$0;
    a: string;
    b: phrase;
}
export class resent_date {
    public kind: ASTKinds.resent_date = ASTKinds.resent_date;
    public a: string;
    public b: date_time;
    public c: CRLF;
    public literal: string;
    constructor(a: string, b: date_time, c: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class resent_from {
    public kind: ASTKinds.resent_from = ASTKinds.resent_from;
    public a: string;
    public b: mailbox_list;
    public c: CRLF;
    public literal: string;
    constructor(a: string, b: mailbox_list, c: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class resent_sender {
    public kind: ASTKinds.resent_sender = ASTKinds.resent_sender;
    public a: string;
    public b: mailbox;
    public c: CRLF;
    public literal: string;
    constructor(a: string, b: mailbox, c: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class resent_to {
    public kind: ASTKinds.resent_to = ASTKinds.resent_to;
    public a: string;
    public b: address_list;
    public c: CRLF;
    public literal: string;
    constructor(a: string, b: address_list, c: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class resent_cc {
    public kind: ASTKinds.resent_cc = ASTKinds.resent_cc;
    public a: string;
    public b: address_list;
    public c: CRLF;
    public literal: string;
    constructor(a: string, b: address_list, c: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class resent_bcc {
    public kind: ASTKinds.resent_bcc = ASTKinds.resent_bcc;
    public a: string;
    public b: Nullable<resent_bcc_$0>;
    public c: CRLF;
    public literal: string;
    constructor(a: string, b: Nullable<resent_bcc_$0>, c: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type resent_bcc_$0 = resent_bcc_$0_1 | resent_bcc_$0_2;
export interface resent_bcc_$0_1 {
    kind: ASTKinds.resent_bcc_$0_1;
    a: address_list;
}
export interface resent_bcc_$0_2 {
    kind: ASTKinds.resent_bcc_$0_2;
    b: CFWS;
}
export class resent_msg_id {
    public kind: ASTKinds.resent_msg_id = ASTKinds.resent_msg_id;
    public a: string;
    public b: msg_id;
    public c: CRLF;
    public literal: string;
    constructor(a: string, b: msg_id, c: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class trace {
    public kind: ASTKinds.trace = ASTKinds.trace;
    public a: Nullable<return_path>;
    public b: received[];
    public literal: string;
    constructor(a: Nullable<return_path>, b: received[]){
        this.a = a;
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class return_path {
    public kind: ASTKinds.return_path = ASTKinds.return_path;
    public a: string;
    public b: path;
    public c: CRLF;
    public literal: string;
    constructor(a: string, b: path, c: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type path = path_1 | path_2;
export interface path_1 {
    kind: ASTKinds.path_1;
    a: angle_addr;
}
export class path_2 {
    public kind: ASTKinds.path_2 = ASTKinds.path_2;
    public b: path_$0;
    public literal: string;
    constructor(b: path_$0){
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export interface path_$0 {
    kind: ASTKinds.path_$0;
    a: Nullable<CFWS>;
    b: string;
    c: CFWS;
    d: string;
    e: Nullable<CFWS>;
}
export class received {
    public kind: ASTKinds.received = ASTKinds.received;
    public a: string;
    public b: received_token[];
    public c: string;
    public d: date_time;
    public e: CRLF;
    public literal: string;
    constructor(a: string, b: received_token[], c: string, d: date_time, e: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type received_token = received_token_1 | received_token_2 | received_token_3 | received_token_4;
export interface received_token_1 {
    kind: ASTKinds.received_token_1;
    a: word;
}
export interface received_token_2 {
    kind: ASTKinds.received_token_2;
    b: angle_addr;
}
export interface received_token_3 {
    kind: ASTKinds.received_token_3;
    c: addr_spec;
}
export class received_token_4 {
    public kind: ASTKinds.received_token_4 = ASTKinds.received_token_4;
    public d: domain;
    public literal: string;
    constructor(d: domain){
        this.d = d;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class optional_field {
    public kind: ASTKinds.optional_field = ASTKinds.optional_field;
    public a: field_name;
    public b: string;
    public c: unstructured;
    public d: CRLF;
    public literal: string;
    constructor(a: field_name, b: string, c: unstructured, d: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class field_name {
    public kind: ASTKinds.field_name = ASTKinds.field_name;
    public a: ftext[];
    public literal: string;
    constructor(a: ftext[]){
        this.a = a;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type ftext = ftext_1 | ftext_2;
export interface ftext_1 {
    kind: ASTKinds.ftext_1;
    a: string;
}
export class ftext_2 {
    public kind: ASTKinds.ftext_2 = ASTKinds.ftext_2;
    public b: string;
    public literal: string;
    constructor(b: string){
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type obs_NO_WS_CTL = obs_NO_WS_CTL_1 | obs_NO_WS_CTL_2 | obs_NO_WS_CTL_3 | obs_NO_WS_CTL_4 | obs_NO_WS_CTL_5;
export interface obs_NO_WS_CTL_1 {
    kind: ASTKinds.obs_NO_WS_CTL_1;
    a: string;
}
export interface obs_NO_WS_CTL_2 {
    kind: ASTKinds.obs_NO_WS_CTL_2;
    b: string;
}
export interface obs_NO_WS_CTL_3 {
    kind: ASTKinds.obs_NO_WS_CTL_3;
    c: string;
}
export interface obs_NO_WS_CTL_4 {
    kind: ASTKinds.obs_NO_WS_CTL_4;
    d: string;
}
export class obs_NO_WS_CTL_5 {
    public kind: ASTKinds.obs_NO_WS_CTL_5 = ASTKinds.obs_NO_WS_CTL_5;
    public e: string;
    public literal: string;
    constructor(e: string){
        this.e = e;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class obs_ctext {
    public kind: ASTKinds.obs_ctext = ASTKinds.obs_ctext;
    public a: obs_NO_WS_CTL;
    public literal: string;
    constructor(a: obs_NO_WS_CTL){
        this.a = a;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class obs_qtext {
    public kind: ASTKinds.obs_qtext = ASTKinds.obs_qtext;
    public a: obs_NO_WS_CTL;
    public literal: string;
    constructor(a: obs_NO_WS_CTL){
        this.a = a;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type obs_utext = obs_utext_1 | obs_utext_2 | obs_utext_3;
export interface obs_utext_1 {
    kind: ASTKinds.obs_utext_1;
    a: string;
}
export interface obs_utext_2 {
    kind: ASTKinds.obs_utext_2;
    b: obs_NO_WS_CTL;
}
export class obs_utext_3 {
    public kind: ASTKinds.obs_utext_3 = ASTKinds.obs_utext_3;
    public c: VCHAR;
    public literal: string;
    constructor(c: VCHAR){
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class obs_qp {
    public kind: ASTKinds.obs_qp = ASTKinds.obs_qp;
    public a: string;
    public b: obs_qp_$0;
    public literal: string;
    constructor(a: string, b: obs_qp_$0){
        this.a = a;
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type obs_qp_$0 = obs_qp_$0_1 | obs_qp_$0_2 | obs_qp_$0_3 | obs_qp_$0_4;
export interface obs_qp_$0_1 {
    kind: ASTKinds.obs_qp_$0_1;
    a: string;
}
export interface obs_qp_$0_2 {
    kind: ASTKinds.obs_qp_$0_2;
    b: obs_NO_WS_CTL;
}
export interface obs_qp_$0_3 {
    kind: ASTKinds.obs_qp_$0_3;
    c: LF;
}
export interface obs_qp_$0_4 {
    kind: ASTKinds.obs_qp_$0_4;
    d: CR;
}
export class obs_body {
    public kind: ASTKinds.obs_body = ASTKinds.obs_body;
    public a: obs_body_$0[];
    public literal: string;
    constructor(a: obs_body_$0[]){
        this.a = a;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type obs_body_$0 = obs_body_$0_1 | obs_body_$0_2;
export interface obs_body_$0_1 {
    kind: ASTKinds.obs_body_$0_1;
    a: obs_body_$0_$0;
}
export interface obs_body_$0_2 {
    kind: ASTKinds.obs_body_$0_2;
    b: CRLF;
}
export interface obs_body_$0_$0 {
    kind: ASTKinds.obs_body_$0_$0;
    a: LF[];
    b: CR[];
    c: obs_body_$0_$0_$0[];
}
export interface obs_body_$0_$0_$0 {
    kind: ASTKinds.obs_body_$0_$0_$0;
    a: obs_body_$0_$0_$0_$0;
    b: LF[];
    c: CR[];
}
export type obs_body_$0_$0_$0_$0 = obs_body_$0_$0_$0_$0_1 | obs_body_$0_$0_$0_$0_2;
export interface obs_body_$0_$0_$0_$0_1 {
    kind: ASTKinds.obs_body_$0_$0_$0_$0_1;
    a: string;
}
export interface obs_body_$0_$0_$0_$0_2 {
    kind: ASTKinds.obs_body_$0_$0_$0_$0_2;
    b: text;
}
export class obs_unstruct {
    public kind: ASTKinds.obs_unstruct = ASTKinds.obs_unstruct;
    public a: obs_unstruct_$0[];
    public literal: string;
    constructor(a: obs_unstruct_$0[]){
        this.a = a;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type obs_unstruct_$0 = obs_unstruct_$0_1 | obs_unstruct_$0_2;
export interface obs_unstruct_$0_1 {
    kind: ASTKinds.obs_unstruct_$0_1;
    a: obs_unstruct_$0_$0;
}
export interface obs_unstruct_$0_2 {
    kind: ASTKinds.obs_unstruct_$0_2;
    b: FWS;
}
export interface obs_unstruct_$0_$0 {
    kind: ASTKinds.obs_unstruct_$0_$0;
    a: LF[];
    b: CR[];
    c: obs_unstruct_$0_$0_$0[];
}
export interface obs_unstruct_$0_$0_$0 {
    kind: ASTKinds.obs_unstruct_$0_$0_$0;
    a: obs_utext;
    b: LF[];
    c: CR[];
}
export class obs_phrase {
    public kind: ASTKinds.obs_phrase = ASTKinds.obs_phrase;
    public a: word;
    public b: obs_phrase_$0;
    public literal: string;
    constructor(a: word, b: obs_phrase_$0){
        this.a = a;
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type obs_phrase_$0 = obs_phrase_$0_1 | obs_phrase_$0_2 | obs_phrase_$0_3;
export interface obs_phrase_$0_1 {
    kind: ASTKinds.obs_phrase_$0_1;
    a: word;
}
export interface obs_phrase_$0_2 {
    kind: ASTKinds.obs_phrase_$0_2;
    b: string;
}
export interface obs_phrase_$0_3 {
    kind: ASTKinds.obs_phrase_$0_3;
    c: CFWS;
}
export class obs_phrase_list {
    public kind: ASTKinds.obs_phrase_list = ASTKinds.obs_phrase_list;
    public a: obs_phrase_list_$0;
    public b: obs_phrase_list_$1[];
    public literal: string;
    constructor(a: obs_phrase_list_$0, b: obs_phrase_list_$1[]){
        this.a = a;
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type obs_phrase_list_$0 = obs_phrase_list_$0_1 | obs_phrase_list_$0_2;
export interface obs_phrase_list_$0_1 {
    kind: ASTKinds.obs_phrase_list_$0_1;
    a: phrase;
}
export interface obs_phrase_list_$0_2 {
    kind: ASTKinds.obs_phrase_list_$0_2;
    b: CFWS;
}
export interface obs_phrase_list_$1 {
    kind: ASTKinds.obs_phrase_list_$1;
    a: string;
    b: Nullable<obs_phrase_list_$1_$0>;
}
export type obs_phrase_list_$1_$0 = obs_phrase_list_$1_$0_1 | obs_phrase_list_$1_$0_2;
export interface obs_phrase_list_$1_$0_1 {
    kind: ASTKinds.obs_phrase_list_$1_$0_1;
    a: phrase;
}
export interface obs_phrase_list_$1_$0_2 {
    kind: ASTKinds.obs_phrase_list_$1_$0_2;
    b: CFWS;
}
export class obs_FWS {
    public kind: ASTKinds.obs_FWS = ASTKinds.obs_FWS;
    public a: WSP[];
    public b: obs_FWS_$0[];
    public literal: string;
    constructor(a: WSP[], b: obs_FWS_$0[]){
        this.a = a;
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export interface obs_FWS_$0 {
    kind: ASTKinds.obs_FWS_$0;
    a: CRLF;
    b: WSP[];
}
export class obs_day_of_week {
    public kind: ASTKinds.obs_day_of_week = ASTKinds.obs_day_of_week;
    public a: Nullable<CFWS>;
    public b: day_name;
    public c: Nullable<CFWS>;
    public literal: string;
    constructor(a: Nullable<CFWS>, b: day_name, c: Nullable<CFWS>){
        this.a = a;
        this.b = b;
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class obs_day {
    public kind: ASTKinds.obs_day = ASTKinds.obs_day;
    public a: Nullable<CFWS>;
    public b: DIGIT;
    public c: Nullable<DIGIT>;
    public d: Nullable<CFWS>;
    public literal: string;
    constructor(a: Nullable<CFWS>, b: DIGIT, c: Nullable<DIGIT>, d: Nullable<CFWS>){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class obs_year {
    public kind: ASTKinds.obs_year = ASTKinds.obs_year;
    public a: Nullable<CFWS>;
    public b: TWO_DIGIT;
    public c: DIGIT[];
    public d: Nullable<CFWS>;
    public literal: string;
    constructor(a: Nullable<CFWS>, b: TWO_DIGIT, c: DIGIT[], d: Nullable<CFWS>){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class obs_hour {
    public kind: ASTKinds.obs_hour = ASTKinds.obs_hour;
    public a: Nullable<CFWS>;
    public b: TWO_DIGIT;
    public c: Nullable<CFWS>;
    public literal: string;
    constructor(a: Nullable<CFWS>, b: TWO_DIGIT, c: Nullable<CFWS>){
        this.a = a;
        this.b = b;
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class obs_minute {
    public kind: ASTKinds.obs_minute = ASTKinds.obs_minute;
    public a: Nullable<CFWS>;
    public b: TWO_DIGIT;
    public c: Nullable<CFWS>;
    public literal: string;
    constructor(a: Nullable<CFWS>, b: TWO_DIGIT, c: Nullable<CFWS>){
        this.a = a;
        this.b = b;
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class obs_second {
    public kind: ASTKinds.obs_second = ASTKinds.obs_second;
    public a: Nullable<CFWS>;
    public b: TWO_DIGIT;
    public c: Nullable<CFWS>;
    public literal: string;
    constructor(a: Nullable<CFWS>, b: TWO_DIGIT, c: Nullable<CFWS>){
        this.a = a;
        this.b = b;
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type obs_zone = obs_zone_1 | obs_zone_2 | obs_zone_3 | obs_zone_4 | obs_zone_5 | obs_zone_6 | obs_zone_7 | obs_zone_8 | obs_zone_9 | obs_zone_10 | obs_zone_11 | obs_zone_12 | obs_zone_13 | obs_zone_14;
export interface obs_zone_1 {
    kind: ASTKinds.obs_zone_1;
    a: string;
}
export interface obs_zone_2 {
    kind: ASTKinds.obs_zone_2;
    b: string;
}
export interface obs_zone_3 {
    kind: ASTKinds.obs_zone_3;
    c: string;
}
export interface obs_zone_4 {
    kind: ASTKinds.obs_zone_4;
    d: string;
}
export interface obs_zone_5 {
    kind: ASTKinds.obs_zone_5;
    e: string;
}
export interface obs_zone_6 {
    kind: ASTKinds.obs_zone_6;
    f: string;
}
export interface obs_zone_7 {
    kind: ASTKinds.obs_zone_7;
    g: string;
}
export interface obs_zone_8 {
    kind: ASTKinds.obs_zone_8;
    h: string;
}
export interface obs_zone_9 {
    kind: ASTKinds.obs_zone_9;
    i: string;
}
export interface obs_zone_10 {
    kind: ASTKinds.obs_zone_10;
    j: string;
}
export interface obs_zone_11 {
    kind: ASTKinds.obs_zone_11;
    k: string;
}
export interface obs_zone_12 {
    kind: ASTKinds.obs_zone_12;
    l: string;
}
export interface obs_zone_13 {
    kind: ASTKinds.obs_zone_13;
    m: string;
}
export class obs_zone_14 {
    public kind: ASTKinds.obs_zone_14 = ASTKinds.obs_zone_14;
    public n: string;
    public literal: string;
    constructor(n: string){
        this.n = n;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class obs_angle_addr {
    public kind: ASTKinds.obs_angle_addr = ASTKinds.obs_angle_addr;
    public a: Nullable<CFWS>;
    public b: string;
    public c: obs_route;
    public d: addr_spec;
    public e: string;
    public f: Nullable<CFWS>;
    public literal: string;
    constructor(a: Nullable<CFWS>, b: string, c: obs_route, d: addr_spec, e: string, f: Nullable<CFWS>){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
        this.f = f;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class obs_route {
    public kind: ASTKinds.obs_route = ASTKinds.obs_route;
    public a: obs_domain_list;
    public b: string;
    public literal: string;
    constructor(a: obs_domain_list, b: string){
        this.a = a;
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class obs_domain_list {
    public kind: ASTKinds.obs_domain_list = ASTKinds.obs_domain_list;
    public a: obs_domain_list_$0[];
    public b: string;
    public c: domain;
    public d: obs_domain_list_$1[];
    public literal: string;
    constructor(a: obs_domain_list_$0[], b: string, c: domain, d: obs_domain_list_$1[]){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type obs_domain_list_$0 = obs_domain_list_$0_1 | obs_domain_list_$0_2;
export interface obs_domain_list_$0_1 {
    kind: ASTKinds.obs_domain_list_$0_1;
    a: CFWS;
}
export interface obs_domain_list_$0_2 {
    kind: ASTKinds.obs_domain_list_$0_2;
    b: string;
}
export interface obs_domain_list_$1 {
    kind: ASTKinds.obs_domain_list_$1;
    a: string;
    b: Nullable<CFWS>;
    c: Nullable<obs_domain_list_$1_$0>;
}
export interface obs_domain_list_$1_$0 {
    kind: ASTKinds.obs_domain_list_$1_$0;
    a: string;
    b: domain;
}
export class obs_mbox_list {
    public kind: ASTKinds.obs_mbox_list = ASTKinds.obs_mbox_list;
    public a: obs_mbox_list_$0[];
    public b: mailbox;
    public c: obs_mbox_list_$1[];
    public literal: string;
    constructor(a: obs_mbox_list_$0[], b: mailbox, c: obs_mbox_list_$1[]){
        this.a = a;
        this.b = b;
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export interface obs_mbox_list_$0 {
    kind: ASTKinds.obs_mbox_list_$0;
    a: Nullable<CFWS>;
    b: string;
}
export interface obs_mbox_list_$1 {
    kind: ASTKinds.obs_mbox_list_$1;
    a: string;
    b: Nullable<obs_mbox_list_$1_$0>;
}
export type obs_mbox_list_$1_$0 = obs_mbox_list_$1_$0_1 | obs_mbox_list_$1_$0_2;
export interface obs_mbox_list_$1_$0_1 {
    kind: ASTKinds.obs_mbox_list_$1_$0_1;
    a: mailbox;
}
export interface obs_mbox_list_$1_$0_2 {
    kind: ASTKinds.obs_mbox_list_$1_$0_2;
    b: CFWS;
}
export class obs_addr_list {
    public kind: ASTKinds.obs_addr_list = ASTKinds.obs_addr_list;
    public a: obs_addr_list_$0[];
    public b: address;
    public c: obs_addr_list_$1[];
    public literal: string;
    constructor(a: obs_addr_list_$0[], b: address, c: obs_addr_list_$1[]){
        this.a = a;
        this.b = b;
        this.c = c;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export interface obs_addr_list_$0 {
    kind: ASTKinds.obs_addr_list_$0;
    a: Nullable<CFWS>;
    b: string;
}
export interface obs_addr_list_$1 {
    kind: ASTKinds.obs_addr_list_$1;
    a: string;
    b: Nullable<obs_addr_list_$1_$0>;
}
export type obs_addr_list_$1_$0 = obs_addr_list_$1_$0_1 | obs_addr_list_$1_$0_2;
export interface obs_addr_list_$1_$0_1 {
    kind: ASTKinds.obs_addr_list_$1_$0_1;
    a: address;
}
export interface obs_addr_list_$1_$0_2 {
    kind: ASTKinds.obs_addr_list_$1_$0_2;
    b: CFWS;
}
export class obs_group_list {
    public kind: ASTKinds.obs_group_list = ASTKinds.obs_group_list;
    public a: obs_group_list_$0[];
    public b: Nullable<CFWS>;
    public literal: string;
    constructor(a: obs_group_list_$0[], b: Nullable<CFWS>){
        this.a = a;
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export interface obs_group_list_$0 {
    kind: ASTKinds.obs_group_list_$0;
    a: Nullable<CFWS>;
    b: string;
}
export class obs_local_part {
    public kind: ASTKinds.obs_local_part = ASTKinds.obs_local_part;
    public a: word;
    public b: obs_local_part_$0[];
    public literal: string;
    constructor(a: word, b: obs_local_part_$0[]){
        this.a = a;
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export interface obs_local_part_$0 {
    kind: ASTKinds.obs_local_part_$0;
    a: string;
    b: word;
}
export class obs_domain {
    public kind: ASTKinds.obs_domain = ASTKinds.obs_domain;
    public a: atom;
    public b: obs_domain_$0[];
    public literal: string;
    constructor(a: atom, b: obs_domain_$0[]){
        this.a = a;
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export interface obs_domain_$0 {
    kind: ASTKinds.obs_domain_$0;
    a: string;
    b: atom;
}
export type obs_dtext = obs_dtext_1 | obs_dtext_2;
export interface obs_dtext_1 {
    kind: ASTKinds.obs_dtext_1;
    a: obs_NO_WS_CTL;
}
export class obs_dtext_2 {
    public kind: ASTKinds.obs_dtext_2 = ASTKinds.obs_dtext_2;
    public b: quoted_pair;
    public literal: string;
    constructor(b: quoted_pair){
        this.b = b;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class obs_fields {
    public kind: ASTKinds.obs_fields = ASTKinds.obs_fields;
    public a: obs_fields_$0[];
    public literal: string;
    constructor(a: obs_fields_$0[]){
        this.a = a;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type obs_fields_$0 = obs_fields_$0_1 | obs_fields_$0_2 | obs_fields_$0_3 | obs_fields_$0_4 | obs_fields_$0_5 | obs_fields_$0_6 | obs_fields_$0_7 | obs_fields_$0_8 | obs_fields_$0_9 | obs_fields_$0_10 | obs_fields_$0_11 | obs_fields_$0_12 | obs_fields_$0_13 | obs_fields_$0_14 | obs_fields_$0_15 | obs_fields_$0_16 | obs_fields_$0_17 | obs_fields_$0_18 | obs_fields_$0_19 | obs_fields_$0_20 | obs_fields_$0_21 | obs_fields_$0_22 | obs_fields_$0_23 | obs_fields_$0_24;
export interface obs_fields_$0_1 {
    kind: ASTKinds.obs_fields_$0_1;
    a: obs_return;
}
export interface obs_fields_$0_2 {
    kind: ASTKinds.obs_fields_$0_2;
    b: obs_received;
}
export interface obs_fields_$0_3 {
    kind: ASTKinds.obs_fields_$0_3;
    c: obs_orig_date;
}
export interface obs_fields_$0_4 {
    kind: ASTKinds.obs_fields_$0_4;
    d: obs_from;
}
export interface obs_fields_$0_5 {
    kind: ASTKinds.obs_fields_$0_5;
    e: obs_sender;
}
export interface obs_fields_$0_6 {
    kind: ASTKinds.obs_fields_$0_6;
    f: obs_reply_to;
}
export interface obs_fields_$0_7 {
    kind: ASTKinds.obs_fields_$0_7;
    g: obs_to;
}
export interface obs_fields_$0_8 {
    kind: ASTKinds.obs_fields_$0_8;
    h: obs_cc;
}
export interface obs_fields_$0_9 {
    kind: ASTKinds.obs_fields_$0_9;
    i: obs_bcc;
}
export interface obs_fields_$0_10 {
    kind: ASTKinds.obs_fields_$0_10;
    j: obs_message_id;
}
export interface obs_fields_$0_11 {
    kind: ASTKinds.obs_fields_$0_11;
    k: obs_in_reply_to;
}
export interface obs_fields_$0_12 {
    kind: ASTKinds.obs_fields_$0_12;
    l: obs_references;
}
export interface obs_fields_$0_13 {
    kind: ASTKinds.obs_fields_$0_13;
    m: obs_subject;
}
export interface obs_fields_$0_14 {
    kind: ASTKinds.obs_fields_$0_14;
    n: obs_comments;
}
export interface obs_fields_$0_15 {
    kind: ASTKinds.obs_fields_$0_15;
    o: obs_keywords;
}
export interface obs_fields_$0_16 {
    kind: ASTKinds.obs_fields_$0_16;
    p: obs_resent_date;
}
export interface obs_fields_$0_17 {
    kind: ASTKinds.obs_fields_$0_17;
    q: obs_resent_from;
}
export interface obs_fields_$0_18 {
    kind: ASTKinds.obs_fields_$0_18;
    r: obs_resent_send;
}
export interface obs_fields_$0_19 {
    kind: ASTKinds.obs_fields_$0_19;
    s: obs_resent_rply;
}
export interface obs_fields_$0_20 {
    kind: ASTKinds.obs_fields_$0_20;
    t: obs_resent_to;
}
export interface obs_fields_$0_21 {
    kind: ASTKinds.obs_fields_$0_21;
    u: obs_resent_cc;
}
export interface obs_fields_$0_22 {
    kind: ASTKinds.obs_fields_$0_22;
    v: obs_resent_bcc;
}
export interface obs_fields_$0_23 {
    kind: ASTKinds.obs_fields_$0_23;
    w: obs_resent_mid;
}
export interface obs_fields_$0_24 {
    kind: ASTKinds.obs_fields_$0_24;
    x: obs_optional;
}
export class obs_orig_date {
    public kind: ASTKinds.obs_orig_date = ASTKinds.obs_orig_date;
    public a: string;
    public b: WSP[];
    public c: string;
    public d: date_time;
    public e: CRLF;
    public literal: string;
    constructor(a: string, b: WSP[], c: string, d: date_time, e: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class obs_from {
    public kind: ASTKinds.obs_from = ASTKinds.obs_from;
    public a: string;
    public b: WSP[];
    public c: string;
    public d: mailbox_list;
    public e: CRLF;
    public literal: string;
    constructor(a: string, b: WSP[], c: string, d: mailbox_list, e: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class obs_sender {
    public kind: ASTKinds.obs_sender = ASTKinds.obs_sender;
    public a: string;
    public b: WSP[];
    public c: string;
    public d: mailbox;
    public e: CRLF;
    public literal: string;
    constructor(a: string, b: WSP[], c: string, d: mailbox, e: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class obs_reply_to {
    public kind: ASTKinds.obs_reply_to = ASTKinds.obs_reply_to;
    public a: string;
    public b: WSP[];
    public c: string;
    public d: address_list;
    public e: CRLF;
    public literal: string;
    constructor(a: string, b: WSP[], c: string, d: address_list, e: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class obs_to {
    public kind: ASTKinds.obs_to = ASTKinds.obs_to;
    public a: string;
    public b: WSP[];
    public c: string;
    public d: address_list;
    public e: CRLF;
    public literal: string;
    constructor(a: string, b: WSP[], c: string, d: address_list, e: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class obs_cc {
    public kind: ASTKinds.obs_cc = ASTKinds.obs_cc;
    public a: string;
    public b: WSP[];
    public c: string;
    public d: address_list;
    public e: CRLF;
    public literal: string;
    constructor(a: string, b: WSP[], c: string, d: address_list, e: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class obs_bcc {
    public kind: ASTKinds.obs_bcc = ASTKinds.obs_bcc;
    public a: string;
    public b: WSP[];
    public c: string;
    public d: obs_bcc_$0;
    public e: CRLF;
    public literal: string;
    constructor(a: string, b: WSP[], c: string, d: obs_bcc_$0, e: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type obs_bcc_$0 = obs_bcc_$0_1 | obs_bcc_$0_2;
export interface obs_bcc_$0_1 {
    kind: ASTKinds.obs_bcc_$0_1;
    a: address_list;
}
export interface obs_bcc_$0_2 {
    kind: ASTKinds.obs_bcc_$0_2;
    b: obs_bcc_$0_$0;
}
export interface obs_bcc_$0_$0 {
    kind: ASTKinds.obs_bcc_$0_$0;
    a: obs_bcc_$0_$0_$0[];
    b: Nullable<CFWS>;
}
export interface obs_bcc_$0_$0_$0 {
    kind: ASTKinds.obs_bcc_$0_$0_$0;
    a: Nullable<CFWS>;
    b: string;
}
export class obs_message_id {
    public kind: ASTKinds.obs_message_id = ASTKinds.obs_message_id;
    public a: string;
    public b: WSP[];
    public c: string;
    public d: msg_id;
    public e: CRLF;
    public literal: string;
    constructor(a: string, b: WSP[], c: string, d: msg_id, e: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class obs_in_reply_to {
    public kind: ASTKinds.obs_in_reply_to = ASTKinds.obs_in_reply_to;
    public a: string;
    public b: WSP[];
    public c: string;
    public d: obs_in_reply_to_$0[];
    public e: CRLF;
    public literal: string;
    constructor(a: string, b: WSP[], c: string, d: obs_in_reply_to_$0[], e: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type obs_in_reply_to_$0 = obs_in_reply_to_$0_1 | obs_in_reply_to_$0_2;
export interface obs_in_reply_to_$0_1 {
    kind: ASTKinds.obs_in_reply_to_$0_1;
    a: phrase;
}
export interface obs_in_reply_to_$0_2 {
    kind: ASTKinds.obs_in_reply_to_$0_2;
    b: msg_id;
}
export class obs_references {
    public kind: ASTKinds.obs_references = ASTKinds.obs_references;
    public a: string;
    public b: WSP[];
    public c: string;
    public d: obs_references_$0[];
    public e: CRLF;
    public literal: string;
    constructor(a: string, b: WSP[], c: string, d: obs_references_$0[], e: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type obs_references_$0 = obs_references_$0_1 | obs_references_$0_2;
export interface obs_references_$0_1 {
    kind: ASTKinds.obs_references_$0_1;
    a: phrase;
}
export interface obs_references_$0_2 {
    kind: ASTKinds.obs_references_$0_2;
    b: msg_id;
}
export class obs_id_left {
    public kind: ASTKinds.obs_id_left = ASTKinds.obs_id_left;
    public a: local_part;
    public literal: string;
    constructor(a: local_part){
        this.a = a;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class obs_id_right {
    public kind: ASTKinds.obs_id_right = ASTKinds.obs_id_right;
    public a: domain;
    public literal: string;
    constructor(a: domain){
        this.a = a;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class obs_subject {
    public kind: ASTKinds.obs_subject = ASTKinds.obs_subject;
    public a: string;
    public b: WSP[];
    public c: string;
    public d: unstructured;
    public e: CRLF;
    public literal: string;
    constructor(a: string, b: WSP[], c: string, d: unstructured, e: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class obs_comments {
    public kind: ASTKinds.obs_comments = ASTKinds.obs_comments;
    public a: string;
    public b: WSP[];
    public c: string;
    public d: unstructured;
    public e: CRLF;
    public literal: string;
    constructor(a: string, b: WSP[], c: string, d: unstructured, e: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class obs_keywords {
    public kind: ASTKinds.obs_keywords = ASTKinds.obs_keywords;
    public a: string;
    public b: WSP[];
    public c: string;
    public d: obs_phrase_list;
    public e: CRLF;
    public literal: string;
    constructor(a: string, b: WSP[], c: string, d: obs_phrase_list, e: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class obs_resent_from {
    public kind: ASTKinds.obs_resent_from = ASTKinds.obs_resent_from;
    public a: string;
    public b: WSP[];
    public c: string;
    public d: mailbox_list;
    public e: CRLF;
    public literal: string;
    constructor(a: string, b: WSP[], c: string, d: mailbox_list, e: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class obs_resent_send {
    public kind: ASTKinds.obs_resent_send = ASTKinds.obs_resent_send;
    public a: string;
    public b: WSP[];
    public c: string;
    public d: mailbox;
    public e: CRLF;
    public literal: string;
    constructor(a: string, b: WSP[], c: string, d: mailbox, e: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class obs_resent_date {
    public kind: ASTKinds.obs_resent_date = ASTKinds.obs_resent_date;
    public a: string;
    public b: WSP[];
    public c: string;
    public d: date_time;
    public e: CRLF;
    public literal: string;
    constructor(a: string, b: WSP[], c: string, d: date_time, e: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class obs_resent_to {
    public kind: ASTKinds.obs_resent_to = ASTKinds.obs_resent_to;
    public a: string;
    public b: WSP[];
    public c: string;
    public d: address_list;
    public e: CRLF;
    public literal: string;
    constructor(a: string, b: WSP[], c: string, d: address_list, e: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class obs_resent_cc {
    public kind: ASTKinds.obs_resent_cc = ASTKinds.obs_resent_cc;
    public a: string;
    public b: WSP[];
    public c: string;
    public d: address_list;
    public e: CRLF;
    public literal: string;
    constructor(a: string, b: WSP[], c: string, d: address_list, e: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class obs_resent_bcc {
    public kind: ASTKinds.obs_resent_bcc = ASTKinds.obs_resent_bcc;
    public a: string;
    public b: WSP[];
    public c: string;
    public d: obs_resent_bcc_$0;
    public e: CRLF;
    public literal: string;
    constructor(a: string, b: WSP[], c: string, d: obs_resent_bcc_$0, e: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export type obs_resent_bcc_$0 = obs_resent_bcc_$0_1 | obs_resent_bcc_$0_2;
export interface obs_resent_bcc_$0_1 {
    kind: ASTKinds.obs_resent_bcc_$0_1;
    a: address_list;
}
export interface obs_resent_bcc_$0_2 {
    kind: ASTKinds.obs_resent_bcc_$0_2;
    b: obs_resent_bcc_$0_$0;
}
export interface obs_resent_bcc_$0_$0 {
    kind: ASTKinds.obs_resent_bcc_$0_$0;
    a: obs_resent_bcc_$0_$0_$0[];
    b: Nullable<CFWS>;
}
export interface obs_resent_bcc_$0_$0_$0 {
    kind: ASTKinds.obs_resent_bcc_$0_$0_$0;
    a: Nullable<CFWS>;
    b: string;
}
export class obs_resent_mid {
    public kind: ASTKinds.obs_resent_mid = ASTKinds.obs_resent_mid;
    public a: string;
    public b: WSP[];
    public c: string;
    public d: msg_id;
    public e: CRLF;
    public literal: string;
    constructor(a: string, b: WSP[], c: string, d: msg_id, e: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class obs_resent_rply {
    public kind: ASTKinds.obs_resent_rply = ASTKinds.obs_resent_rply;
    public a: string;
    public b: WSP[];
    public c: string;
    public d: address_list;
    public e: CRLF;
    public literal: string;
    constructor(a: string, b: WSP[], c: string, d: address_list, e: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class obs_return {
    public kind: ASTKinds.obs_return = ASTKinds.obs_return;
    public a: string;
    public b: WSP[];
    public c: string;
    public d: path;
    public e: CRLF;
    public literal: string;
    constructor(a: string, b: WSP[], c: string, d: path, e: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class obs_received {
    public kind: ASTKinds.obs_received = ASTKinds.obs_received;
    public a: string;
    public b: WSP[];
    public c: string;
    public d: received_token[];
    public e: CRLF;
    public literal: string;
    constructor(a: string, b: WSP[], c: string, d: received_token[], e: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class obs_optional {
    public kind: ASTKinds.obs_optional = ASTKinds.obs_optional;
    public a: field_name;
    public b: WSP[];
    public c: string;
    public d: unstructured;
    public e: CRLF;
    public literal: string;
    constructor(a: field_name, b: WSP[], c: string, d: unstructured, e: CRLF){
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
        this.literal = ((): string => {
        return makeLiteral(this)
        })();
    }
}
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
        this.$scope$start$memo.clear();
        this.$scope$CR$memo.clear();
        this.$scope$CRLF$memo.clear();
        this.$scope$DIGIT$memo.clear();
        this.$scope$TWO_DIGIT$memo.clear();
        this.$scope$FOUR_DIGIT$memo.clear();
        this.$scope$DQUOTE$memo.clear();
        this.$scope$HTAB$memo.clear();
        this.$scope$LF$memo.clear();
        this.$scope$SP$memo.clear();
        this.$scope$VCHAR$memo.clear();
        this.$scope$WSP$memo.clear();
        this.$scope$quoted_pair$memo.clear();
        this.$scope$quoted_pair_$0$memo.clear();
        this.$scope$quoted_pair_$0_$0$memo.clear();
        this.$scope$FWS$memo.clear();
        this.$scope$FWS_$0$memo.clear();
        this.$scope$FWS_$0_$0$memo.clear();
        this.$scope$ctext$memo.clear();
        this.$scope$ccontent$memo.clear();
        this.$scope$comment$memo.clear();
        this.$scope$comment_$0$memo.clear();
        this.$scope$CFWS$memo.clear();
        this.$scope$CFWS_$0$memo.clear();
        this.$scope$CFWS_$0_$0$memo.clear();
        this.$scope$atext$memo.clear();
        this.$scope$atom$memo.clear();
        this.$scope$dot_atom_text$memo.clear();
        this.$scope$dot_atom_text_$0$memo.clear();
        this.$scope$dot_atom$memo.clear();
        this.$scope$specials$memo.clear();
        this.$scope$qtext$memo.clear();
        this.$scope$qcontent$memo.clear();
        this.$scope$quoted_string$memo.clear();
        this.$scope$quoted_string_$0$memo.clear();
        this.$scope$word$memo.clear();
        this.$scope$phrase$memo.clear();
        this.$scope$unstructured$memo.clear();
        this.$scope$unstructured_$0$memo.clear();
        this.$scope$unstructured_$0_$0$memo.clear();
        this.$scope$date_time$memo.clear();
        this.$scope$date_time_$0$memo.clear();
        this.$scope$day_of_week$memo.clear();
        this.$scope$day_of_week_$0$memo.clear();
        this.$scope$day_name$memo.clear();
        this.$scope$date$memo.clear();
        this.$scope$day$memo.clear();
        this.$scope$day_$0$memo.clear();
        this.$scope$month$memo.clear();
        this.$scope$year$memo.clear();
        this.$scope$year_$0$memo.clear();
        this.$scope$time$memo.clear();
        this.$scope$time_of_day$memo.clear();
        this.$scope$time_of_day_$0$memo.clear();
        this.$scope$hour$memo.clear();
        this.$scope$minute$memo.clear();
        this.$scope$second$memo.clear();
        this.$scope$zone$memo.clear();
        this.$scope$zone_$0$memo.clear();
        this.$scope$zone_$0_$0$memo.clear();
        this.$scope$address$memo.clear();
        this.$scope$mailbox$memo.clear();
        this.$scope$name_addr$memo.clear();
        this.$scope$angle_addr$memo.clear();
        this.$scope$group$memo.clear();
        this.$scope$display_name$memo.clear();
        this.$scope$mailbox_list$memo.clear();
        this.$scope$mailbox_list_$0$memo.clear();
        this.$scope$mailbox_list_$0_$0$memo.clear();
        this.$scope$address_list$memo.clear();
        this.$scope$address_list_$0$memo.clear();
        this.$scope$address_list_$0_$0$memo.clear();
        this.$scope$group_list$memo.clear();
        this.$scope$addr_spec$memo.clear();
        this.$scope$local_part$memo.clear();
        this.$scope$domain$memo.clear();
        this.$scope$domain_literal$memo.clear();
        this.$scope$domain_literal_$0$memo.clear();
        this.$scope$dtext$memo.clear();
        this.$scope$message$memo.clear();
        this.$scope$message_$0$memo.clear();
        this.$scope$message_$1$memo.clear();
        this.$scope$body$memo.clear();
        this.$scope$body_$0$memo.clear();
        this.$scope$body_$0_$0$memo.clear();
        this.$scope$text$memo.clear();
        this.$scope$_998text$memo.clear();
        this.$scope$fields$memo.clear();
        this.$scope$fields_$0$memo.clear();
        this.$scope$fields_$0_$0$memo.clear();
        this.$scope$fields_$1$memo.clear();
        this.$scope$orig_date$memo.clear();
        this.$scope$from$memo.clear();
        this.$scope$sender$memo.clear();
        this.$scope$reply_to$memo.clear();
        this.$scope$to$memo.clear();
        this.$scope$cc$memo.clear();
        this.$scope$bcc$memo.clear();
        this.$scope$bcc_$0$memo.clear();
        this.$scope$message_id$memo.clear();
        this.$scope$in_reply_to$memo.clear();
        this.$scope$references$memo.clear();
        this.$scope$msg_id$memo.clear();
        this.$scope$id_left$memo.clear();
        this.$scope$id_right$memo.clear();
        this.$scope$no_fold_literal$memo.clear();
        this.$scope$subject$memo.clear();
        this.$scope$comments$memo.clear();
        this.$scope$keywords$memo.clear();
        this.$scope$keywords_$0$memo.clear();
        this.$scope$resent_date$memo.clear();
        this.$scope$resent_from$memo.clear();
        this.$scope$resent_sender$memo.clear();
        this.$scope$resent_to$memo.clear();
        this.$scope$resent_cc$memo.clear();
        this.$scope$resent_bcc$memo.clear();
        this.$scope$resent_bcc_$0$memo.clear();
        this.$scope$resent_msg_id$memo.clear();
        this.$scope$trace$memo.clear();
        this.$scope$return_path$memo.clear();
        this.$scope$path$memo.clear();
        this.$scope$path_$0$memo.clear();
        this.$scope$received$memo.clear();
        this.$scope$received_token$memo.clear();
        this.$scope$optional_field$memo.clear();
        this.$scope$field_name$memo.clear();
        this.$scope$ftext$memo.clear();
        this.$scope$obs_NO_WS_CTL$memo.clear();
        this.$scope$obs_ctext$memo.clear();
        this.$scope$obs_qtext$memo.clear();
        this.$scope$obs_utext$memo.clear();
        this.$scope$obs_qp$memo.clear();
        this.$scope$obs_qp_$0$memo.clear();
        this.$scope$obs_body$memo.clear();
        this.$scope$obs_body_$0$memo.clear();
        this.$scope$obs_body_$0_$0$memo.clear();
        this.$scope$obs_body_$0_$0_$0$memo.clear();
        this.$scope$obs_body_$0_$0_$0_$0$memo.clear();
        this.$scope$obs_unstruct$memo.clear();
        this.$scope$obs_unstruct_$0$memo.clear();
        this.$scope$obs_unstruct_$0_$0$memo.clear();
        this.$scope$obs_unstruct_$0_$0_$0$memo.clear();
        this.$scope$obs_phrase$memo.clear();
        this.$scope$obs_phrase_$0$memo.clear();
        this.$scope$obs_phrase_list$memo.clear();
        this.$scope$obs_phrase_list_$0$memo.clear();
        this.$scope$obs_phrase_list_$1$memo.clear();
        this.$scope$obs_phrase_list_$1_$0$memo.clear();
        this.$scope$obs_FWS$memo.clear();
        this.$scope$obs_FWS_$0$memo.clear();
        this.$scope$obs_day_of_week$memo.clear();
        this.$scope$obs_day$memo.clear();
        this.$scope$obs_year$memo.clear();
        this.$scope$obs_hour$memo.clear();
        this.$scope$obs_minute$memo.clear();
        this.$scope$obs_second$memo.clear();
        this.$scope$obs_zone$memo.clear();
        this.$scope$obs_angle_addr$memo.clear();
        this.$scope$obs_route$memo.clear();
        this.$scope$obs_domain_list$memo.clear();
        this.$scope$obs_domain_list_$0$memo.clear();
        this.$scope$obs_domain_list_$1$memo.clear();
        this.$scope$obs_domain_list_$1_$0$memo.clear();
        this.$scope$obs_mbox_list$memo.clear();
        this.$scope$obs_mbox_list_$0$memo.clear();
        this.$scope$obs_mbox_list_$1$memo.clear();
        this.$scope$obs_mbox_list_$1_$0$memo.clear();
        this.$scope$obs_addr_list$memo.clear();
        this.$scope$obs_addr_list_$0$memo.clear();
        this.$scope$obs_addr_list_$1$memo.clear();
        this.$scope$obs_addr_list_$1_$0$memo.clear();
        this.$scope$obs_group_list$memo.clear();
        this.$scope$obs_group_list_$0$memo.clear();
        this.$scope$obs_local_part$memo.clear();
        this.$scope$obs_local_part_$0$memo.clear();
        this.$scope$obs_domain$memo.clear();
        this.$scope$obs_domain_$0$memo.clear();
        this.$scope$obs_dtext$memo.clear();
        this.$scope$obs_fields$memo.clear();
        this.$scope$obs_fields_$0$memo.clear();
        this.$scope$obs_orig_date$memo.clear();
        this.$scope$obs_from$memo.clear();
        this.$scope$obs_sender$memo.clear();
        this.$scope$obs_reply_to$memo.clear();
        this.$scope$obs_to$memo.clear();
        this.$scope$obs_cc$memo.clear();
        this.$scope$obs_bcc$memo.clear();
        this.$scope$obs_bcc_$0$memo.clear();
        this.$scope$obs_bcc_$0_$0$memo.clear();
        this.$scope$obs_bcc_$0_$0_$0$memo.clear();
        this.$scope$obs_message_id$memo.clear();
        this.$scope$obs_in_reply_to$memo.clear();
        this.$scope$obs_in_reply_to_$0$memo.clear();
        this.$scope$obs_references$memo.clear();
        this.$scope$obs_references_$0$memo.clear();
        this.$scope$obs_id_left$memo.clear();
        this.$scope$obs_id_right$memo.clear();
        this.$scope$obs_subject$memo.clear();
        this.$scope$obs_comments$memo.clear();
        this.$scope$obs_keywords$memo.clear();
        this.$scope$obs_resent_from$memo.clear();
        this.$scope$obs_resent_send$memo.clear();
        this.$scope$obs_resent_date$memo.clear();
        this.$scope$obs_resent_to$memo.clear();
        this.$scope$obs_resent_cc$memo.clear();
        this.$scope$obs_resent_bcc$memo.clear();
        this.$scope$obs_resent_bcc_$0$memo.clear();
        this.$scope$obs_resent_bcc_$0_$0$memo.clear();
        this.$scope$obs_resent_bcc_$0_$0_$0$memo.clear();
        this.$scope$obs_resent_mid$memo.clear();
        this.$scope$obs_resent_rply$memo.clear();
        this.$scope$obs_return$memo.clear();
        this.$scope$obs_received$memo.clear();
        this.$scope$obs_optional$memo.clear();
    }
    protected $scope$start$memo: Map<number, [Nullable<start>, PosInfo]> = new Map();
    protected $scope$CR$memo: Map<number, [Nullable<CR>, PosInfo]> = new Map();
    protected $scope$CRLF$memo: Map<number, [Nullable<CRLF>, PosInfo]> = new Map();
    protected $scope$DIGIT$memo: Map<number, [Nullable<DIGIT>, PosInfo]> = new Map();
    protected $scope$TWO_DIGIT$memo: Map<number, [Nullable<TWO_DIGIT>, PosInfo]> = new Map();
    protected $scope$FOUR_DIGIT$memo: Map<number, [Nullable<FOUR_DIGIT>, PosInfo]> = new Map();
    protected $scope$DQUOTE$memo: Map<number, [Nullable<DQUOTE>, PosInfo]> = new Map();
    protected $scope$HTAB$memo: Map<number, [Nullable<HTAB>, PosInfo]> = new Map();
    protected $scope$LF$memo: Map<number, [Nullable<LF>, PosInfo]> = new Map();
    protected $scope$SP$memo: Map<number, [Nullable<SP>, PosInfo]> = new Map();
    protected $scope$VCHAR$memo: Map<number, [Nullable<VCHAR>, PosInfo]> = new Map();
    protected $scope$WSP$memo: Map<number, [Nullable<WSP>, PosInfo]> = new Map();
    protected $scope$quoted_pair$memo: Map<number, [Nullable<quoted_pair>, PosInfo]> = new Map();
    protected $scope$quoted_pair_$0$memo: Map<number, [Nullable<quoted_pair_$0>, PosInfo]> = new Map();
    protected $scope$quoted_pair_$0_$0$memo: Map<number, [Nullable<quoted_pair_$0_$0>, PosInfo]> = new Map();
    protected $scope$FWS$memo: Map<number, [Nullable<FWS>, PosInfo]> = new Map();
    protected $scope$FWS_$0$memo: Map<number, [Nullable<FWS_$0>, PosInfo]> = new Map();
    protected $scope$FWS_$0_$0$memo: Map<number, [Nullable<FWS_$0_$0>, PosInfo]> = new Map();
    protected $scope$ctext$memo: Map<number, [Nullable<ctext>, PosInfo]> = new Map();
    protected $scope$ccontent$memo: Map<number, [Nullable<ccontent>, PosInfo]> = new Map();
    protected $scope$comment$memo: Map<number, [Nullable<comment>, PosInfo]> = new Map();
    protected $scope$comment_$0$memo: Map<number, [Nullable<comment_$0>, PosInfo]> = new Map();
    protected $scope$CFWS$memo: Map<number, [Nullable<CFWS>, PosInfo]> = new Map();
    protected $scope$CFWS_$0$memo: Map<number, [Nullable<CFWS_$0>, PosInfo]> = new Map();
    protected $scope$CFWS_$0_$0$memo: Map<number, [Nullable<CFWS_$0_$0>, PosInfo]> = new Map();
    protected $scope$atext$memo: Map<number, [Nullable<atext>, PosInfo]> = new Map();
    protected $scope$atom$memo: Map<number, [Nullable<atom>, PosInfo]> = new Map();
    protected $scope$dot_atom_text$memo: Map<number, [Nullable<dot_atom_text>, PosInfo]> = new Map();
    protected $scope$dot_atom_text_$0$memo: Map<number, [Nullable<dot_atom_text_$0>, PosInfo]> = new Map();
    protected $scope$dot_atom$memo: Map<number, [Nullable<dot_atom>, PosInfo]> = new Map();
    protected $scope$specials$memo: Map<number, [Nullable<specials>, PosInfo]> = new Map();
    protected $scope$qtext$memo: Map<number, [Nullable<qtext>, PosInfo]> = new Map();
    protected $scope$qcontent$memo: Map<number, [Nullable<qcontent>, PosInfo]> = new Map();
    protected $scope$quoted_string$memo: Map<number, [Nullable<quoted_string>, PosInfo]> = new Map();
    protected $scope$quoted_string_$0$memo: Map<number, [Nullable<quoted_string_$0>, PosInfo]> = new Map();
    protected $scope$word$memo: Map<number, [Nullable<word>, PosInfo]> = new Map();
    protected $scope$phrase$memo: Map<number, [Nullable<phrase>, PosInfo]> = new Map();
    protected $scope$unstructured$memo: Map<number, [Nullable<unstructured>, PosInfo]> = new Map();
    protected $scope$unstructured_$0$memo: Map<number, [Nullable<unstructured_$0>, PosInfo]> = new Map();
    protected $scope$unstructured_$0_$0$memo: Map<number, [Nullable<unstructured_$0_$0>, PosInfo]> = new Map();
    protected $scope$date_time$memo: Map<number, [Nullable<date_time>, PosInfo]> = new Map();
    protected $scope$date_time_$0$memo: Map<number, [Nullable<date_time_$0>, PosInfo]> = new Map();
    protected $scope$day_of_week$memo: Map<number, [Nullable<day_of_week>, PosInfo]> = new Map();
    protected $scope$day_of_week_$0$memo: Map<number, [Nullable<day_of_week_$0>, PosInfo]> = new Map();
    protected $scope$day_name$memo: Map<number, [Nullable<day_name>, PosInfo]> = new Map();
    protected $scope$date$memo: Map<number, [Nullable<date>, PosInfo]> = new Map();
    protected $scope$day$memo: Map<number, [Nullable<day>, PosInfo]> = new Map();
    protected $scope$day_$0$memo: Map<number, [Nullable<day_$0>, PosInfo]> = new Map();
    protected $scope$month$memo: Map<number, [Nullable<month>, PosInfo]> = new Map();
    protected $scope$year$memo: Map<number, [Nullable<year>, PosInfo]> = new Map();
    protected $scope$year_$0$memo: Map<number, [Nullable<year_$0>, PosInfo]> = new Map();
    protected $scope$time$memo: Map<number, [Nullable<time>, PosInfo]> = new Map();
    protected $scope$time_of_day$memo: Map<number, [Nullable<time_of_day>, PosInfo]> = new Map();
    protected $scope$time_of_day_$0$memo: Map<number, [Nullable<time_of_day_$0>, PosInfo]> = new Map();
    protected $scope$hour$memo: Map<number, [Nullable<hour>, PosInfo]> = new Map();
    protected $scope$minute$memo: Map<number, [Nullable<minute>, PosInfo]> = new Map();
    protected $scope$second$memo: Map<number, [Nullable<second>, PosInfo]> = new Map();
    protected $scope$zone$memo: Map<number, [Nullable<zone>, PosInfo]> = new Map();
    protected $scope$zone_$0$memo: Map<number, [Nullable<zone_$0>, PosInfo]> = new Map();
    protected $scope$zone_$0_$0$memo: Map<number, [Nullable<zone_$0_$0>, PosInfo]> = new Map();
    protected $scope$address$memo: Map<number, [Nullable<address>, PosInfo]> = new Map();
    protected $scope$mailbox$memo: Map<number, [Nullable<mailbox>, PosInfo]> = new Map();
    protected $scope$name_addr$memo: Map<number, [Nullable<name_addr>, PosInfo]> = new Map();
    protected $scope$angle_addr$memo: Map<number, [Nullable<angle_addr>, PosInfo]> = new Map();
    protected $scope$group$memo: Map<number, [Nullable<group>, PosInfo]> = new Map();
    protected $scope$display_name$memo: Map<number, [Nullable<display_name>, PosInfo]> = new Map();
    protected $scope$mailbox_list$memo: Map<number, [Nullable<mailbox_list>, PosInfo]> = new Map();
    protected $scope$mailbox_list_$0$memo: Map<number, [Nullable<mailbox_list_$0>, PosInfo]> = new Map();
    protected $scope$mailbox_list_$0_$0$memo: Map<number, [Nullable<mailbox_list_$0_$0>, PosInfo]> = new Map();
    protected $scope$address_list$memo: Map<number, [Nullable<address_list>, PosInfo]> = new Map();
    protected $scope$address_list_$0$memo: Map<number, [Nullable<address_list_$0>, PosInfo]> = new Map();
    protected $scope$address_list_$0_$0$memo: Map<number, [Nullable<address_list_$0_$0>, PosInfo]> = new Map();
    protected $scope$group_list$memo: Map<number, [Nullable<group_list>, PosInfo]> = new Map();
    protected $scope$addr_spec$memo: Map<number, [Nullable<addr_spec>, PosInfo]> = new Map();
    protected $scope$local_part$memo: Map<number, [Nullable<local_part>, PosInfo]> = new Map();
    protected $scope$domain$memo: Map<number, [Nullable<domain>, PosInfo]> = new Map();
    protected $scope$domain_literal$memo: Map<number, [Nullable<domain_literal>, PosInfo]> = new Map();
    protected $scope$domain_literal_$0$memo: Map<number, [Nullable<domain_literal_$0>, PosInfo]> = new Map();
    protected $scope$dtext$memo: Map<number, [Nullable<dtext>, PosInfo]> = new Map();
    protected $scope$message$memo: Map<number, [Nullable<message>, PosInfo]> = new Map();
    protected $scope$message_$0$memo: Map<number, [Nullable<message_$0>, PosInfo]> = new Map();
    protected $scope$message_$1$memo: Map<number, [Nullable<message_$1>, PosInfo]> = new Map();
    protected $scope$body$memo: Map<number, [Nullable<body>, PosInfo]> = new Map();
    protected $scope$body_$0$memo: Map<number, [Nullable<body_$0>, PosInfo]> = new Map();
    protected $scope$body_$0_$0$memo: Map<number, [Nullable<body_$0_$0>, PosInfo]> = new Map();
    protected $scope$text$memo: Map<number, [Nullable<text>, PosInfo]> = new Map();
    protected $scope$_998text$memo: Map<number, [Nullable<_998text>, PosInfo]> = new Map();
    protected $scope$fields$memo: Map<number, [Nullable<fields>, PosInfo]> = new Map();
    protected $scope$fields_$0$memo: Map<number, [Nullable<fields_$0>, PosInfo]> = new Map();
    protected $scope$fields_$0_$0$memo: Map<number, [Nullable<fields_$0_$0>, PosInfo]> = new Map();
    protected $scope$fields_$1$memo: Map<number, [Nullable<fields_$1>, PosInfo]> = new Map();
    protected $scope$orig_date$memo: Map<number, [Nullable<orig_date>, PosInfo]> = new Map();
    protected $scope$from$memo: Map<number, [Nullable<from>, PosInfo]> = new Map();
    protected $scope$sender$memo: Map<number, [Nullable<sender>, PosInfo]> = new Map();
    protected $scope$reply_to$memo: Map<number, [Nullable<reply_to>, PosInfo]> = new Map();
    protected $scope$to$memo: Map<number, [Nullable<to>, PosInfo]> = new Map();
    protected $scope$cc$memo: Map<number, [Nullable<cc>, PosInfo]> = new Map();
    protected $scope$bcc$memo: Map<number, [Nullable<bcc>, PosInfo]> = new Map();
    protected $scope$bcc_$0$memo: Map<number, [Nullable<bcc_$0>, PosInfo]> = new Map();
    protected $scope$message_id$memo: Map<number, [Nullable<message_id>, PosInfo]> = new Map();
    protected $scope$in_reply_to$memo: Map<number, [Nullable<in_reply_to>, PosInfo]> = new Map();
    protected $scope$references$memo: Map<number, [Nullable<references>, PosInfo]> = new Map();
    protected $scope$msg_id$memo: Map<number, [Nullable<msg_id>, PosInfo]> = new Map();
    protected $scope$id_left$memo: Map<number, [Nullable<id_left>, PosInfo]> = new Map();
    protected $scope$id_right$memo: Map<number, [Nullable<id_right>, PosInfo]> = new Map();
    protected $scope$no_fold_literal$memo: Map<number, [Nullable<no_fold_literal>, PosInfo]> = new Map();
    protected $scope$subject$memo: Map<number, [Nullable<subject>, PosInfo]> = new Map();
    protected $scope$comments$memo: Map<number, [Nullable<comments>, PosInfo]> = new Map();
    protected $scope$keywords$memo: Map<number, [Nullable<keywords>, PosInfo]> = new Map();
    protected $scope$keywords_$0$memo: Map<number, [Nullable<keywords_$0>, PosInfo]> = new Map();
    protected $scope$resent_date$memo: Map<number, [Nullable<resent_date>, PosInfo]> = new Map();
    protected $scope$resent_from$memo: Map<number, [Nullable<resent_from>, PosInfo]> = new Map();
    protected $scope$resent_sender$memo: Map<number, [Nullable<resent_sender>, PosInfo]> = new Map();
    protected $scope$resent_to$memo: Map<number, [Nullable<resent_to>, PosInfo]> = new Map();
    protected $scope$resent_cc$memo: Map<number, [Nullable<resent_cc>, PosInfo]> = new Map();
    protected $scope$resent_bcc$memo: Map<number, [Nullable<resent_bcc>, PosInfo]> = new Map();
    protected $scope$resent_bcc_$0$memo: Map<number, [Nullable<resent_bcc_$0>, PosInfo]> = new Map();
    protected $scope$resent_msg_id$memo: Map<number, [Nullable<resent_msg_id>, PosInfo]> = new Map();
    protected $scope$trace$memo: Map<number, [Nullable<trace>, PosInfo]> = new Map();
    protected $scope$return_path$memo: Map<number, [Nullable<return_path>, PosInfo]> = new Map();
    protected $scope$path$memo: Map<number, [Nullable<path>, PosInfo]> = new Map();
    protected $scope$path_$0$memo: Map<number, [Nullable<path_$0>, PosInfo]> = new Map();
    protected $scope$received$memo: Map<number, [Nullable<received>, PosInfo]> = new Map();
    protected $scope$received_token$memo: Map<number, [Nullable<received_token>, PosInfo]> = new Map();
    protected $scope$optional_field$memo: Map<number, [Nullable<optional_field>, PosInfo]> = new Map();
    protected $scope$field_name$memo: Map<number, [Nullable<field_name>, PosInfo]> = new Map();
    protected $scope$ftext$memo: Map<number, [Nullable<ftext>, PosInfo]> = new Map();
    protected $scope$obs_NO_WS_CTL$memo: Map<number, [Nullable<obs_NO_WS_CTL>, PosInfo]> = new Map();
    protected $scope$obs_ctext$memo: Map<number, [Nullable<obs_ctext>, PosInfo]> = new Map();
    protected $scope$obs_qtext$memo: Map<number, [Nullable<obs_qtext>, PosInfo]> = new Map();
    protected $scope$obs_utext$memo: Map<number, [Nullable<obs_utext>, PosInfo]> = new Map();
    protected $scope$obs_qp$memo: Map<number, [Nullable<obs_qp>, PosInfo]> = new Map();
    protected $scope$obs_qp_$0$memo: Map<number, [Nullable<obs_qp_$0>, PosInfo]> = new Map();
    protected $scope$obs_body$memo: Map<number, [Nullable<obs_body>, PosInfo]> = new Map();
    protected $scope$obs_body_$0$memo: Map<number, [Nullable<obs_body_$0>, PosInfo]> = new Map();
    protected $scope$obs_body_$0_$0$memo: Map<number, [Nullable<obs_body_$0_$0>, PosInfo]> = new Map();
    protected $scope$obs_body_$0_$0_$0$memo: Map<number, [Nullable<obs_body_$0_$0_$0>, PosInfo]> = new Map();
    protected $scope$obs_body_$0_$0_$0_$0$memo: Map<number, [Nullable<obs_body_$0_$0_$0_$0>, PosInfo]> = new Map();
    protected $scope$obs_unstruct$memo: Map<number, [Nullable<obs_unstruct>, PosInfo]> = new Map();
    protected $scope$obs_unstruct_$0$memo: Map<number, [Nullable<obs_unstruct_$0>, PosInfo]> = new Map();
    protected $scope$obs_unstruct_$0_$0$memo: Map<number, [Nullable<obs_unstruct_$0_$0>, PosInfo]> = new Map();
    protected $scope$obs_unstruct_$0_$0_$0$memo: Map<number, [Nullable<obs_unstruct_$0_$0_$0>, PosInfo]> = new Map();
    protected $scope$obs_phrase$memo: Map<number, [Nullable<obs_phrase>, PosInfo]> = new Map();
    protected $scope$obs_phrase_$0$memo: Map<number, [Nullable<obs_phrase_$0>, PosInfo]> = new Map();
    protected $scope$obs_phrase_list$memo: Map<number, [Nullable<obs_phrase_list>, PosInfo]> = new Map();
    protected $scope$obs_phrase_list_$0$memo: Map<number, [Nullable<obs_phrase_list_$0>, PosInfo]> = new Map();
    protected $scope$obs_phrase_list_$1$memo: Map<number, [Nullable<obs_phrase_list_$1>, PosInfo]> = new Map();
    protected $scope$obs_phrase_list_$1_$0$memo: Map<number, [Nullable<obs_phrase_list_$1_$0>, PosInfo]> = new Map();
    protected $scope$obs_FWS$memo: Map<number, [Nullable<obs_FWS>, PosInfo]> = new Map();
    protected $scope$obs_FWS_$0$memo: Map<number, [Nullable<obs_FWS_$0>, PosInfo]> = new Map();
    protected $scope$obs_day_of_week$memo: Map<number, [Nullable<obs_day_of_week>, PosInfo]> = new Map();
    protected $scope$obs_day$memo: Map<number, [Nullable<obs_day>, PosInfo]> = new Map();
    protected $scope$obs_year$memo: Map<number, [Nullable<obs_year>, PosInfo]> = new Map();
    protected $scope$obs_hour$memo: Map<number, [Nullable<obs_hour>, PosInfo]> = new Map();
    protected $scope$obs_minute$memo: Map<number, [Nullable<obs_minute>, PosInfo]> = new Map();
    protected $scope$obs_second$memo: Map<number, [Nullable<obs_second>, PosInfo]> = new Map();
    protected $scope$obs_zone$memo: Map<number, [Nullable<obs_zone>, PosInfo]> = new Map();
    protected $scope$obs_angle_addr$memo: Map<number, [Nullable<obs_angle_addr>, PosInfo]> = new Map();
    protected $scope$obs_route$memo: Map<number, [Nullable<obs_route>, PosInfo]> = new Map();
    protected $scope$obs_domain_list$memo: Map<number, [Nullable<obs_domain_list>, PosInfo]> = new Map();
    protected $scope$obs_domain_list_$0$memo: Map<number, [Nullable<obs_domain_list_$0>, PosInfo]> = new Map();
    protected $scope$obs_domain_list_$1$memo: Map<number, [Nullable<obs_domain_list_$1>, PosInfo]> = new Map();
    protected $scope$obs_domain_list_$1_$0$memo: Map<number, [Nullable<obs_domain_list_$1_$0>, PosInfo]> = new Map();
    protected $scope$obs_mbox_list$memo: Map<number, [Nullable<obs_mbox_list>, PosInfo]> = new Map();
    protected $scope$obs_mbox_list_$0$memo: Map<number, [Nullable<obs_mbox_list_$0>, PosInfo]> = new Map();
    protected $scope$obs_mbox_list_$1$memo: Map<number, [Nullable<obs_mbox_list_$1>, PosInfo]> = new Map();
    protected $scope$obs_mbox_list_$1_$0$memo: Map<number, [Nullable<obs_mbox_list_$1_$0>, PosInfo]> = new Map();
    protected $scope$obs_addr_list$memo: Map<number, [Nullable<obs_addr_list>, PosInfo]> = new Map();
    protected $scope$obs_addr_list_$0$memo: Map<number, [Nullable<obs_addr_list_$0>, PosInfo]> = new Map();
    protected $scope$obs_addr_list_$1$memo: Map<number, [Nullable<obs_addr_list_$1>, PosInfo]> = new Map();
    protected $scope$obs_addr_list_$1_$0$memo: Map<number, [Nullable<obs_addr_list_$1_$0>, PosInfo]> = new Map();
    protected $scope$obs_group_list$memo: Map<number, [Nullable<obs_group_list>, PosInfo]> = new Map();
    protected $scope$obs_group_list_$0$memo: Map<number, [Nullable<obs_group_list_$0>, PosInfo]> = new Map();
    protected $scope$obs_local_part$memo: Map<number, [Nullable<obs_local_part>, PosInfo]> = new Map();
    protected $scope$obs_local_part_$0$memo: Map<number, [Nullable<obs_local_part_$0>, PosInfo]> = new Map();
    protected $scope$obs_domain$memo: Map<number, [Nullable<obs_domain>, PosInfo]> = new Map();
    protected $scope$obs_domain_$0$memo: Map<number, [Nullable<obs_domain_$0>, PosInfo]> = new Map();
    protected $scope$obs_dtext$memo: Map<number, [Nullable<obs_dtext>, PosInfo]> = new Map();
    protected $scope$obs_fields$memo: Map<number, [Nullable<obs_fields>, PosInfo]> = new Map();
    protected $scope$obs_fields_$0$memo: Map<number, [Nullable<obs_fields_$0>, PosInfo]> = new Map();
    protected $scope$obs_orig_date$memo: Map<number, [Nullable<obs_orig_date>, PosInfo]> = new Map();
    protected $scope$obs_from$memo: Map<number, [Nullable<obs_from>, PosInfo]> = new Map();
    protected $scope$obs_sender$memo: Map<number, [Nullable<obs_sender>, PosInfo]> = new Map();
    protected $scope$obs_reply_to$memo: Map<number, [Nullable<obs_reply_to>, PosInfo]> = new Map();
    protected $scope$obs_to$memo: Map<number, [Nullable<obs_to>, PosInfo]> = new Map();
    protected $scope$obs_cc$memo: Map<number, [Nullable<obs_cc>, PosInfo]> = new Map();
    protected $scope$obs_bcc$memo: Map<number, [Nullable<obs_bcc>, PosInfo]> = new Map();
    protected $scope$obs_bcc_$0$memo: Map<number, [Nullable<obs_bcc_$0>, PosInfo]> = new Map();
    protected $scope$obs_bcc_$0_$0$memo: Map<number, [Nullable<obs_bcc_$0_$0>, PosInfo]> = new Map();
    protected $scope$obs_bcc_$0_$0_$0$memo: Map<number, [Nullable<obs_bcc_$0_$0_$0>, PosInfo]> = new Map();
    protected $scope$obs_message_id$memo: Map<number, [Nullable<obs_message_id>, PosInfo]> = new Map();
    protected $scope$obs_in_reply_to$memo: Map<number, [Nullable<obs_in_reply_to>, PosInfo]> = new Map();
    protected $scope$obs_in_reply_to_$0$memo: Map<number, [Nullable<obs_in_reply_to_$0>, PosInfo]> = new Map();
    protected $scope$obs_references$memo: Map<number, [Nullable<obs_references>, PosInfo]> = new Map();
    protected $scope$obs_references_$0$memo: Map<number, [Nullable<obs_references_$0>, PosInfo]> = new Map();
    protected $scope$obs_id_left$memo: Map<number, [Nullable<obs_id_left>, PosInfo]> = new Map();
    protected $scope$obs_id_right$memo: Map<number, [Nullable<obs_id_right>, PosInfo]> = new Map();
    protected $scope$obs_subject$memo: Map<number, [Nullable<obs_subject>, PosInfo]> = new Map();
    protected $scope$obs_comments$memo: Map<number, [Nullable<obs_comments>, PosInfo]> = new Map();
    protected $scope$obs_keywords$memo: Map<number, [Nullable<obs_keywords>, PosInfo]> = new Map();
    protected $scope$obs_resent_from$memo: Map<number, [Nullable<obs_resent_from>, PosInfo]> = new Map();
    protected $scope$obs_resent_send$memo: Map<number, [Nullable<obs_resent_send>, PosInfo]> = new Map();
    protected $scope$obs_resent_date$memo: Map<number, [Nullable<obs_resent_date>, PosInfo]> = new Map();
    protected $scope$obs_resent_to$memo: Map<number, [Nullable<obs_resent_to>, PosInfo]> = new Map();
    protected $scope$obs_resent_cc$memo: Map<number, [Nullable<obs_resent_cc>, PosInfo]> = new Map();
    protected $scope$obs_resent_bcc$memo: Map<number, [Nullable<obs_resent_bcc>, PosInfo]> = new Map();
    protected $scope$obs_resent_bcc_$0$memo: Map<number, [Nullable<obs_resent_bcc_$0>, PosInfo]> = new Map();
    protected $scope$obs_resent_bcc_$0_$0$memo: Map<number, [Nullable<obs_resent_bcc_$0_$0>, PosInfo]> = new Map();
    protected $scope$obs_resent_bcc_$0_$0_$0$memo: Map<number, [Nullable<obs_resent_bcc_$0_$0_$0>, PosInfo]> = new Map();
    protected $scope$obs_resent_mid$memo: Map<number, [Nullable<obs_resent_mid>, PosInfo]> = new Map();
    protected $scope$obs_resent_rply$memo: Map<number, [Nullable<obs_resent_rply>, PosInfo]> = new Map();
    protected $scope$obs_return$memo: Map<number, [Nullable<obs_return>, PosInfo]> = new Map();
    protected $scope$obs_received$memo: Map<number, [Nullable<obs_received>, PosInfo]> = new Map();
    protected $scope$obs_optional$memo: Map<number, [Nullable<obs_optional>, PosInfo]> = new Map();
    public matchstart($$dpth: number, $$cr?: ErrorTracker): Nullable<start> {
        return this.memoise(
            () => {
                return this.run<start>($$dpth,
                    () => {
                        let $scope$a: Nullable<message>;
                        let $$res: Nullable<start> = null;
                        if (true
                            && ($scope$a = this.matchmessage($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new start($scope$a);
                        }
                        return $$res;
                    });
            },
            this.$scope$start$memo,
        );
    }
    public matchCR($$dpth: number, $$cr?: ErrorTracker): Nullable<CR> {
        return this.memoise(
            () => {
                return this.run<CR>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $$res: Nullable<CR> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:\x0D)`, $$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new CR($scope$a);
                        }
                        return $$res;
                    });
            },
            this.$scope$CR$memo,
        );
    }
    public matchCRLF($$dpth: number, $$cr?: ErrorTracker): Nullable<CRLF> {
        return this.memoise(
            () => {
                return this.run<CRLF>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $$res: Nullable<CRLF> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:\r\n)`, $$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new CRLF($scope$a);
                        }
                        return $$res;
                    });
            },
            this.$scope$CRLF$memo,
        );
    }
    public matchDIGIT($$dpth: number, $$cr?: ErrorTracker): Nullable<DIGIT> {
        return this.memoise(
            () => {
                return this.run<DIGIT>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $$res: Nullable<DIGIT> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:\d)`, $$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new DIGIT($scope$a);
                        }
                        return $$res;
                    });
            },
            this.$scope$DIGIT$memo,
        );
    }
    public matchTWO_DIGIT($$dpth: number, $$cr?: ErrorTracker): Nullable<TWO_DIGIT> {
        return this.memoise(
            () => {
                return this.run<TWO_DIGIT>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $$res: Nullable<TWO_DIGIT> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:\d\d)`, $$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new TWO_DIGIT($scope$a);
                        }
                        return $$res;
                    });
            },
            this.$scope$TWO_DIGIT$memo,
        );
    }
    public matchFOUR_DIGIT($$dpth: number, $$cr?: ErrorTracker): Nullable<FOUR_DIGIT> {
        return this.memoise(
            () => {
                return this.run<FOUR_DIGIT>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $$res: Nullable<FOUR_DIGIT> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:\d\d\d\d)`, $$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new FOUR_DIGIT($scope$a);
                        }
                        return $$res;
                    });
            },
            this.$scope$FOUR_DIGIT$memo,
        );
    }
    public matchDQUOTE($$dpth: number, $$cr?: ErrorTracker): Nullable<DQUOTE> {
        return this.memoise(
            () => {
                return this.run<DQUOTE>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $$res: Nullable<DQUOTE> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:\x22)`, $$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new DQUOTE($scope$a);
                        }
                        return $$res;
                    });
            },
            this.$scope$DQUOTE$memo,
        );
    }
    public matchHTAB($$dpth: number, $$cr?: ErrorTracker): Nullable<HTAB> {
        return this.memoise(
            () => {
                return this.run<HTAB>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $$res: Nullable<HTAB> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:\x09)`, $$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new HTAB($scope$a);
                        }
                        return $$res;
                    });
            },
            this.$scope$HTAB$memo,
        );
    }
    public matchLF($$dpth: number, $$cr?: ErrorTracker): Nullable<LF> {
        return this.memoise(
            () => {
                return this.run<LF>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $$res: Nullable<LF> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:\x0A)`, $$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new LF($scope$a);
                        }
                        return $$res;
                    });
            },
            this.$scope$LF$memo,
        );
    }
    public matchSP($$dpth: number, $$cr?: ErrorTracker): Nullable<SP> {
        return this.memoise(
            () => {
                return this.run<SP>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $$res: Nullable<SP> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:\x20)`, $$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new SP($scope$a);
                        }
                        return $$res;
                    });
            },
            this.$scope$SP$memo,
        );
    }
    public matchVCHAR($$dpth: number, $$cr?: ErrorTracker): Nullable<VCHAR> {
        return this.memoise(
            () => {
                return this.run<VCHAR>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $$res: Nullable<VCHAR> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:[\x21-\x7E])`, $$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new VCHAR($scope$a);
                        }
                        return $$res;
                    });
            },
            this.$scope$VCHAR$memo,
        );
    }
    public matchWSP($$dpth: number, $$cr?: ErrorTracker): Nullable<WSP> {
        return this.memoise(
            () => {
                return this.choice<WSP>([
                    () => this.matchWSP_1($$dpth + 1, $$cr),
                    () => this.matchWSP_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$WSP$memo,
        );
    }
    public matchWSP_1($$dpth: number, $$cr?: ErrorTracker): Nullable<WSP_1> {
        return this.run<WSP_1>($$dpth,
            () => {
                let $scope$a: Nullable<SP>;
                let $$res: Nullable<WSP_1> = null;
                if (true
                    && ($scope$a = this.matchSP($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.WSP_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchWSP_2($$dpth: number, $$cr?: ErrorTracker): Nullable<WSP_2> {
        return this.run<WSP_2>($$dpth,
            () => {
                let $scope$b: Nullable<HTAB>;
                let $$res: Nullable<WSP_2> = null;
                if (true
                    && ($scope$b = this.matchHTAB($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new WSP_2($scope$b);
                }
                return $$res;
            });
    }
    public matchquoted_pair($$dpth: number, $$cr?: ErrorTracker): Nullable<quoted_pair> {
        return this.memoise(
            () => {
                return this.choice<quoted_pair>([
                    () => this.matchquoted_pair_1($$dpth + 1, $$cr),
                    () => this.matchquoted_pair_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$quoted_pair$memo,
        );
    }
    public matchquoted_pair_1($$dpth: number, $$cr?: ErrorTracker): Nullable<quoted_pair_1> {
        return this.run<quoted_pair_1>($$dpth,
            () => {
                let $scope$a: Nullable<quoted_pair_$0>;
                let $$res: Nullable<quoted_pair_1> = null;
                if (true
                    && ($scope$a = this.matchquoted_pair_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.quoted_pair_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchquoted_pair_2($$dpth: number, $$cr?: ErrorTracker): Nullable<quoted_pair_2> {
        return this.run<quoted_pair_2>($$dpth,
            () => {
                let $scope$b: Nullable<obs_qp>;
                let $$res: Nullable<quoted_pair_2> = null;
                if (true
                    && ($scope$b = this.matchobs_qp($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new quoted_pair_2($scope$b);
                }
                return $$res;
            });
    }
    public matchquoted_pair_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<quoted_pair_$0> {
        return this.memoise(
            () => {
                return this.run<quoted_pair_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<quoted_pair_$0_$0>;
                        let $$res: Nullable<quoted_pair_$0> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:\\)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.matchquoted_pair_$0_$0($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.quoted_pair_$0, a: $scope$a, b: $scope$b};
                        }
                        return $$res;
                    });
            },
            this.$scope$quoted_pair_$0$memo,
        );
    }
    public matchquoted_pair_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<quoted_pair_$0_$0> {
        return this.memoise(
            () => {
                return this.choice<quoted_pair_$0_$0>([
                    () => this.matchquoted_pair_$0_$0_1($$dpth + 1, $$cr),
                    () => this.matchquoted_pair_$0_$0_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$quoted_pair_$0_$0$memo,
        );
    }
    public matchquoted_pair_$0_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<quoted_pair_$0_$0_1> {
        return this.run<quoted_pair_$0_$0_1>($$dpth,
            () => {
                let $scope$a: Nullable<VCHAR>;
                let $$res: Nullable<quoted_pair_$0_$0_1> = null;
                if (true
                    && ($scope$a = this.matchVCHAR($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.quoted_pair_$0_$0_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchquoted_pair_$0_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<quoted_pair_$0_$0_2> {
        return this.run<quoted_pair_$0_$0_2>($$dpth,
            () => {
                let $scope$b: Nullable<WSP>;
                let $$res: Nullable<quoted_pair_$0_$0_2> = null;
                if (true
                    && ($scope$b = this.matchWSP($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.quoted_pair_$0_$0_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchFWS($$dpth: number, $$cr?: ErrorTracker): Nullable<FWS> {
        return this.memoise(
            () => {
                return this.choice<FWS>([
                    () => this.matchFWS_1($$dpth + 1, $$cr),
                    () => this.matchFWS_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$FWS$memo,
        );
    }
    public matchFWS_1($$dpth: number, $$cr?: ErrorTracker): Nullable<FWS_1> {
        return this.run<FWS_1>($$dpth,
            () => {
                let $scope$a: Nullable<FWS_$0>;
                let $$res: Nullable<FWS_1> = null;
                if (true
                    && ($scope$a = this.matchFWS_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.FWS_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchFWS_2($$dpth: number, $$cr?: ErrorTracker): Nullable<FWS_2> {
        return this.run<FWS_2>($$dpth,
            () => {
                let $scope$b: Nullable<obs_FWS>;
                let $$res: Nullable<FWS_2> = null;
                if (true
                    && ($scope$b = this.matchobs_FWS($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new FWS_2($scope$b);
                }
                return $$res;
            });
    }
    public matchFWS_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<FWS_$0> {
        return this.memoise(
            () => {
                return this.run<FWS_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<Nullable<FWS_$0_$0>>;
                        let $scope$b: Nullable<WSP[]>;
                        let $$res: Nullable<FWS_$0> = null;
                        if (true
                            && (($scope$a = this.matchFWS_$0_$0($$dpth + 1, $$cr)) || true)
                            && ($scope$b = this.loop<WSP>(() => this.matchWSP($$dpth + 1, $$cr), false)) !== null
                        ) {
                            $$res = {kind: ASTKinds.FWS_$0, a: $scope$a, b: $scope$b};
                        }
                        return $$res;
                    });
            },
            this.$scope$FWS_$0$memo,
        );
    }
    public matchFWS_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<FWS_$0_$0> {
        return this.memoise(
            () => {
                return this.run<FWS_$0_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<WSP[]>;
                        let $scope$b: Nullable<CRLF>;
                        let $$res: Nullable<FWS_$0_$0> = null;
                        if (true
                            && ($scope$a = this.loop<WSP>(() => this.matchWSP($$dpth + 1, $$cr), true)) !== null
                            && ($scope$b = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.FWS_$0_$0, a: $scope$a, b: $scope$b};
                        }
                        return $$res;
                    });
            },
            this.$scope$FWS_$0_$0$memo,
        );
    }
    public matchctext($$dpth: number, $$cr?: ErrorTracker): Nullable<ctext> {
        return this.memoise(
            () => {
                return this.choice<ctext>([
                    () => this.matchctext_1($$dpth + 1, $$cr),
                    () => this.matchctext_2($$dpth + 1, $$cr),
                    () => this.matchctext_3($$dpth + 1, $$cr),
                    () => this.matchctext_4($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$ctext$memo,
        );
    }
    public matchctext_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ctext_1> {
        return this.run<ctext_1>($$dpth,
            () => {
                let $scope$a: Nullable<string>;
                let $$res: Nullable<ctext_1> = null;
                if (true
                    && ($scope$a = this.regexAccept(String.raw`(?:[\x21-\x27])`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ctext_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchctext_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ctext_2> {
        return this.run<ctext_2>($$dpth,
            () => {
                let $scope$b: Nullable<string>;
                let $$res: Nullable<ctext_2> = null;
                if (true
                    && ($scope$b = this.regexAccept(String.raw`(?:[\x2a-\x5b])`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ctext_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchctext_3($$dpth: number, $$cr?: ErrorTracker): Nullable<ctext_3> {
        return this.run<ctext_3>($$dpth,
            () => {
                let $scope$c: Nullable<string>;
                let $$res: Nullable<ctext_3> = null;
                if (true
                    && ($scope$c = this.regexAccept(String.raw`(?:[\x5d-\x7e])`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ctext_3, c: $scope$c};
                }
                return $$res;
            });
    }
    public matchctext_4($$dpth: number, $$cr?: ErrorTracker): Nullable<ctext_4> {
        return this.run<ctext_4>($$dpth,
            () => {
                let $scope$d: Nullable<obs_ctext>;
                let $$res: Nullable<ctext_4> = null;
                if (true
                    && ($scope$d = this.matchobs_ctext($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new ctext_4($scope$d);
                }
                return $$res;
            });
    }
    public matchccontent($$dpth: number, $$cr?: ErrorTracker): Nullable<ccontent> {
        return this.memoise(
            () => {
                return this.choice<ccontent>([
                    () => this.matchccontent_1($$dpth + 1, $$cr),
                    () => this.matchccontent_2($$dpth + 1, $$cr),
                    () => this.matchccontent_3($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$ccontent$memo,
        );
    }
    public matchccontent_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ccontent_1> {
        return this.run<ccontent_1>($$dpth,
            () => {
                let $scope$a: Nullable<ctext>;
                let $$res: Nullable<ccontent_1> = null;
                if (true
                    && ($scope$a = this.matchctext($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ccontent_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchccontent_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ccontent_2> {
        return this.run<ccontent_2>($$dpth,
            () => {
                let $scope$b: Nullable<quoted_pair>;
                let $$res: Nullable<ccontent_2> = null;
                if (true
                    && ($scope$b = this.matchquoted_pair($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ccontent_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchccontent_3($$dpth: number, $$cr?: ErrorTracker): Nullable<ccontent_3> {
        return this.run<ccontent_3>($$dpth,
            () => {
                let $scope$c: Nullable<comment>;
                let $$res: Nullable<ccontent_3> = null;
                if (true
                    && ($scope$c = this.matchcomment($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new ccontent_3($scope$c);
                }
                return $$res;
            });
    }
    public matchcomment($$dpth: number, $$cr?: ErrorTracker): Nullable<comment> {
        return this.memoise(
            () => {
                return this.run<comment>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<comment_$0[]>;
                        let $scope$c: Nullable<Nullable<FWS>>;
                        let $scope$d: Nullable<string>;
                        let $$res: Nullable<comment> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<comment_$0>(() => this.matchcomment_$0($$dpth + 1, $$cr), true)) !== null
                            && (($scope$c = this.matchFWS($$dpth + 1, $$cr)) || true)
                            && ($scope$d = this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new comment($scope$a, $scope$b, $scope$c, $scope$d);
                        }
                        return $$res;
                    });
            },
            this.$scope$comment$memo,
        );
    }
    public matchcomment_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<comment_$0> {
        return this.memoise(
            () => {
                return this.run<comment_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<Nullable<FWS>>;
                        let $scope$b: Nullable<ccontent>;
                        let $$res: Nullable<comment_$0> = null;
                        if (true
                            && (($scope$a = this.matchFWS($$dpth + 1, $$cr)) || true)
                            && ($scope$b = this.matchccontent($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.comment_$0, a: $scope$a, b: $scope$b};
                        }
                        return $$res;
                    });
            },
            this.$scope$comment_$0$memo,
        );
    }
    public matchCFWS($$dpth: number, $$cr?: ErrorTracker): Nullable<CFWS> {
        return this.memoise(
            () => {
                return this.choice<CFWS>([
                    () => this.matchCFWS_1($$dpth + 1, $$cr),
                    () => this.matchCFWS_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$CFWS$memo,
        );
    }
    public matchCFWS_1($$dpth: number, $$cr?: ErrorTracker): Nullable<CFWS_1> {
        return this.run<CFWS_1>($$dpth,
            () => {
                let $scope$a: Nullable<CFWS_$0>;
                let $$res: Nullable<CFWS_1> = null;
                if (true
                    && ($scope$a = this.matchCFWS_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.CFWS_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchCFWS_2($$dpth: number, $$cr?: ErrorTracker): Nullable<CFWS_2> {
        return this.run<CFWS_2>($$dpth,
            () => {
                let $scope$b: Nullable<FWS>;
                let $$res: Nullable<CFWS_2> = null;
                if (true
                    && ($scope$b = this.matchFWS($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new CFWS_2($scope$b);
                }
                return $$res;
            });
    }
    public matchCFWS_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<CFWS_$0> {
        return this.memoise(
            () => {
                return this.run<CFWS_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<CFWS_$0_$0[]>;
                        let $scope$b: Nullable<Nullable<FWS>>;
                        let $$res: Nullable<CFWS_$0> = null;
                        if (true
                            && ($scope$a = this.loop<CFWS_$0_$0>(() => this.matchCFWS_$0_$0($$dpth + 1, $$cr), false)) !== null
                            && (($scope$b = this.matchFWS($$dpth + 1, $$cr)) || true)
                        ) {
                            $$res = {kind: ASTKinds.CFWS_$0, a: $scope$a, b: $scope$b};
                        }
                        return $$res;
                    });
            },
            this.$scope$CFWS_$0$memo,
        );
    }
    public matchCFWS_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<CFWS_$0_$0> {
        return this.memoise(
            () => {
                return this.run<CFWS_$0_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<Nullable<FWS>>;
                        let $scope$b: Nullable<comment>;
                        let $$res: Nullable<CFWS_$0_$0> = null;
                        if (true
                            && (($scope$a = this.matchFWS($$dpth + 1, $$cr)) || true)
                            && ($scope$b = this.matchcomment($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.CFWS_$0_$0, a: $scope$a, b: $scope$b};
                        }
                        return $$res;
                    });
            },
            this.$scope$CFWS_$0_$0$memo,
        );
    }
    public matchatext($$dpth: number, $$cr?: ErrorTracker): Nullable<atext> {
        return this.memoise(
            () => {
                return this.run<atext>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $$res: Nullable<atext> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:[A-Za-z0-9!#$%&\x27\*\+\-\/=?^_\`{|}~])`, $$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new atext($scope$a);
                        }
                        return $$res;
                    });
            },
            this.$scope$atext$memo,
        );
    }
    public matchatom($$dpth: number, $$cr?: ErrorTracker): Nullable<atom> {
        return this.memoise(
            () => {
                return this.run<atom>($$dpth,
                    () => {
                        let $scope$a: Nullable<Nullable<CFWS>>;
                        let $scope$b: Nullable<atext[]>;
                        let $scope$c: Nullable<Nullable<CFWS>>;
                        let $$res: Nullable<atom> = null;
                        if (true
                            && (($scope$a = this.matchCFWS($$dpth + 1, $$cr)) || true)
                            && ($scope$b = this.loop<atext>(() => this.matchatext($$dpth + 1, $$cr), false)) !== null
                            && (($scope$c = this.matchCFWS($$dpth + 1, $$cr)) || true)
                        ) {
                            $$res = new atom($scope$a, $scope$b, $scope$c);
                        }
                        return $$res;
                    });
            },
            this.$scope$atom$memo,
        );
    }
    public matchdot_atom_text($$dpth: number, $$cr?: ErrorTracker): Nullable<dot_atom_text> {
        return this.memoise(
            () => {
                return this.run<dot_atom_text>($$dpth,
                    () => {
                        let $scope$a: Nullable<atext[]>;
                        let $scope$b: Nullable<dot_atom_text_$0[]>;
                        let $$res: Nullable<dot_atom_text> = null;
                        if (true
                            && ($scope$a = this.loop<atext>(() => this.matchatext($$dpth + 1, $$cr), false)) !== null
                            && ($scope$b = this.loop<dot_atom_text_$0>(() => this.matchdot_atom_text_$0($$dpth + 1, $$cr), true)) !== null
                        ) {
                            $$res = new dot_atom_text($scope$a, $scope$b);
                        }
                        return $$res;
                    });
            },
            this.$scope$dot_atom_text$memo,
        );
    }
    public matchdot_atom_text_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<dot_atom_text_$0> {
        return this.memoise(
            () => {
                return this.run<dot_atom_text_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<atext[]>;
                        let $$res: Nullable<dot_atom_text_$0> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:\.)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<atext>(() => this.matchatext($$dpth + 1, $$cr), false)) !== null
                        ) {
                            $$res = {kind: ASTKinds.dot_atom_text_$0, a: $scope$a, b: $scope$b};
                        }
                        return $$res;
                    });
            },
            this.$scope$dot_atom_text_$0$memo,
        );
    }
    public matchdot_atom($$dpth: number, $$cr?: ErrorTracker): Nullable<dot_atom> {
        return this.memoise(
            () => {
                return this.run<dot_atom>($$dpth,
                    () => {
                        let $scope$a: Nullable<Nullable<CFWS>>;
                        let $scope$b: Nullable<dot_atom_text>;
                        let $scope$c: Nullable<Nullable<CFWS>>;
                        let $$res: Nullable<dot_atom> = null;
                        if (true
                            && (($scope$a = this.matchCFWS($$dpth + 1, $$cr)) || true)
                            && ($scope$b = this.matchdot_atom_text($$dpth + 1, $$cr)) !== null
                            && (($scope$c = this.matchCFWS($$dpth + 1, $$cr)) || true)
                        ) {
                            $$res = new dot_atom($scope$a, $scope$b, $scope$c);
                        }
                        return $$res;
                    });
            },
            this.$scope$dot_atom$memo,
        );
    }
    public matchspecials($$dpth: number, $$cr?: ErrorTracker): Nullable<specials> {
        return this.memoise(
            () => {
                return this.choice<specials>([
                    () => this.matchspecials_1($$dpth + 1, $$cr),
                    () => this.matchspecials_2($$dpth + 1, $$cr),
                    () => this.matchspecials_3($$dpth + 1, $$cr),
                    () => this.matchspecials_4($$dpth + 1, $$cr),
                    () => this.matchspecials_5($$dpth + 1, $$cr),
                    () => this.matchspecials_6($$dpth + 1, $$cr),
                    () => this.matchspecials_7($$dpth + 1, $$cr),
                    () => this.matchspecials_8($$dpth + 1, $$cr),
                    () => this.matchspecials_9($$dpth + 1, $$cr),
                    () => this.matchspecials_10($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$specials$memo,
        );
    }
    public matchspecials_1($$dpth: number, $$cr?: ErrorTracker): Nullable<specials_1> {
        return this.run<specials_1>($$dpth,
            () => {
                let $scope$a: Nullable<string>;
                let $$res: Nullable<specials_1> = null;
                if (true
                    && ($scope$a = this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.specials_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchspecials_2($$dpth: number, $$cr?: ErrorTracker): Nullable<specials_2> {
        return this.run<specials_2>($$dpth,
            () => {
                let $scope$b: Nullable<string>;
                let $$res: Nullable<specials_2> = null;
                if (true
                    && ($scope$b = this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.specials_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchspecials_3($$dpth: number, $$cr?: ErrorTracker): Nullable<specials_3> {
        return this.run<specials_3>($$dpth,
            () => {
                let $scope$c: Nullable<string>;
                let $$res: Nullable<specials_3> = null;
                if (true
                    && ($scope$c = this.regexAccept(String.raw`(?:[<>])`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.specials_3, c: $scope$c};
                }
                return $$res;
            });
    }
    public matchspecials_4($$dpth: number, $$cr?: ErrorTracker): Nullable<specials_4> {
        return this.run<specials_4>($$dpth,
            () => {
                let $scope$d: Nullable<string>;
                let $$res: Nullable<specials_4> = null;
                if (true
                    && ($scope$d = this.regexAccept(String.raw`(?:\[)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.specials_4, d: $scope$d};
                }
                return $$res;
            });
    }
    public matchspecials_5($$dpth: number, $$cr?: ErrorTracker): Nullable<specials_5> {
        return this.run<specials_5>($$dpth,
            () => {
                let $scope$e: Nullable<string>;
                let $$res: Nullable<specials_5> = null;
                if (true
                    && ($scope$e = this.regexAccept(String.raw`(?:\])`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.specials_5, e: $scope$e};
                }
                return $$res;
            });
    }
    public matchspecials_6($$dpth: number, $$cr?: ErrorTracker): Nullable<specials_6> {
        return this.run<specials_6>($$dpth,
            () => {
                let $scope$f: Nullable<string>;
                let $$res: Nullable<specials_6> = null;
                if (true
                    && ($scope$f = this.regexAccept(String.raw`(?:[:;@])`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.specials_6, f: $scope$f};
                }
                return $$res;
            });
    }
    public matchspecials_7($$dpth: number, $$cr?: ErrorTracker): Nullable<specials_7> {
        return this.run<specials_7>($$dpth,
            () => {
                let $scope$g: Nullable<string>;
                let $$res: Nullable<specials_7> = null;
                if (true
                    && ($scope$g = this.regexAccept(String.raw`(?:\\)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.specials_7, g: $scope$g};
                }
                return $$res;
            });
    }
    public matchspecials_8($$dpth: number, $$cr?: ErrorTracker): Nullable<specials_8> {
        return this.run<specials_8>($$dpth,
            () => {
                let $scope$h: Nullable<string>;
                let $$res: Nullable<specials_8> = null;
                if (true
                    && ($scope$h = this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.specials_8, h: $scope$h};
                }
                return $$res;
            });
    }
    public matchspecials_9($$dpth: number, $$cr?: ErrorTracker): Nullable<specials_9> {
        return this.run<specials_9>($$dpth,
            () => {
                let $scope$i: Nullable<string>;
                let $$res: Nullable<specials_9> = null;
                if (true
                    && ($scope$i = this.regexAccept(String.raw`(?:\.)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.specials_9, i: $scope$i};
                }
                return $$res;
            });
    }
    public matchspecials_10($$dpth: number, $$cr?: ErrorTracker): Nullable<specials_10> {
        return this.run<specials_10>($$dpth,
            () => {
                let $scope$j: Nullable<DQUOTE>;
                let $$res: Nullable<specials_10> = null;
                if (true
                    && ($scope$j = this.matchDQUOTE($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new specials_10($scope$j);
                }
                return $$res;
            });
    }
    public matchqtext($$dpth: number, $$cr?: ErrorTracker): Nullable<qtext> {
        return this.memoise(
            () => {
                return this.choice<qtext>([
                    () => this.matchqtext_1($$dpth + 1, $$cr),
                    () => this.matchqtext_2($$dpth + 1, $$cr),
                    () => this.matchqtext_3($$dpth + 1, $$cr),
                    () => this.matchqtext_4($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$qtext$memo,
        );
    }
    public matchqtext_1($$dpth: number, $$cr?: ErrorTracker): Nullable<qtext_1> {
        return this.run<qtext_1>($$dpth,
            () => {
                let $scope$a: Nullable<string>;
                let $$res: Nullable<qtext_1> = null;
                if (true
                    && ($scope$a = this.regexAccept(String.raw`(?:\x21)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.qtext_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchqtext_2($$dpth: number, $$cr?: ErrorTracker): Nullable<qtext_2> {
        return this.run<qtext_2>($$dpth,
            () => {
                let $scope$b: Nullable<string>;
                let $$res: Nullable<qtext_2> = null;
                if (true
                    && ($scope$b = this.regexAccept(String.raw`(?:[\x23-\x5b])`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.qtext_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchqtext_3($$dpth: number, $$cr?: ErrorTracker): Nullable<qtext_3> {
        return this.run<qtext_3>($$dpth,
            () => {
                let $scope$c: Nullable<string>;
                let $$res: Nullable<qtext_3> = null;
                if (true
                    && ($scope$c = this.regexAccept(String.raw`(?:[\x5d-\x7e])`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.qtext_3, c: $scope$c};
                }
                return $$res;
            });
    }
    public matchqtext_4($$dpth: number, $$cr?: ErrorTracker): Nullable<qtext_4> {
        return this.run<qtext_4>($$dpth,
            () => {
                let $scope$d: Nullable<obs_qtext>;
                let $$res: Nullable<qtext_4> = null;
                if (true
                    && ($scope$d = this.matchobs_qtext($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new qtext_4($scope$d);
                }
                return $$res;
            });
    }
    public matchqcontent($$dpth: number, $$cr?: ErrorTracker): Nullable<qcontent> {
        return this.memoise(
            () => {
                return this.choice<qcontent>([
                    () => this.matchqcontent_1($$dpth + 1, $$cr),
                    () => this.matchqcontent_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$qcontent$memo,
        );
    }
    public matchqcontent_1($$dpth: number, $$cr?: ErrorTracker): Nullable<qcontent_1> {
        return this.run<qcontent_1>($$dpth,
            () => {
                let $scope$a: Nullable<qtext>;
                let $$res: Nullable<qcontent_1> = null;
                if (true
                    && ($scope$a = this.matchqtext($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.qcontent_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchqcontent_2($$dpth: number, $$cr?: ErrorTracker): Nullable<qcontent_2> {
        return this.run<qcontent_2>($$dpth,
            () => {
                let $scope$b: Nullable<quoted_pair>;
                let $$res: Nullable<qcontent_2> = null;
                if (true
                    && ($scope$b = this.matchquoted_pair($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new qcontent_2($scope$b);
                }
                return $$res;
            });
    }
    public matchquoted_string($$dpth: number, $$cr?: ErrorTracker): Nullable<quoted_string> {
        return this.memoise(
            () => {
                return this.run<quoted_string>($$dpth,
                    () => {
                        let $scope$a: Nullable<Nullable<CFWS>>;
                        let $scope$b: Nullable<DQUOTE>;
                        let $scope$c: Nullable<quoted_string_$0[]>;
                        let $scope$d: Nullable<Nullable<FWS>>;
                        let $scope$e: Nullable<DQUOTE>;
                        let $scope$f: Nullable<Nullable<CFWS>>;
                        let $$res: Nullable<quoted_string> = null;
                        if (true
                            && (($scope$a = this.matchCFWS($$dpth + 1, $$cr)) || true)
                            && ($scope$b = this.matchDQUOTE($$dpth + 1, $$cr)) !== null
                            && ($scope$c = this.loop<quoted_string_$0>(() => this.matchquoted_string_$0($$dpth + 1, $$cr), true)) !== null
                            && (($scope$d = this.matchFWS($$dpth + 1, $$cr)) || true)
                            && ($scope$e = this.matchDQUOTE($$dpth + 1, $$cr)) !== null
                            && (($scope$f = this.matchCFWS($$dpth + 1, $$cr)) || true)
                        ) {
                            $$res = new quoted_string($scope$a, $scope$b, $scope$c, $scope$d, $scope$e, $scope$f);
                        }
                        return $$res;
                    });
            },
            this.$scope$quoted_string$memo,
        );
    }
    public matchquoted_string_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<quoted_string_$0> {
        return this.memoise(
            () => {
                return this.run<quoted_string_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<Nullable<FWS>>;
                        let $scope$b: Nullable<qcontent>;
                        let $$res: Nullable<quoted_string_$0> = null;
                        if (true
                            && (($scope$a = this.matchFWS($$dpth + 1, $$cr)) || true)
                            && ($scope$b = this.matchqcontent($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.quoted_string_$0, a: $scope$a, b: $scope$b};
                        }
                        return $$res;
                    });
            },
            this.$scope$quoted_string_$0$memo,
        );
    }
    public matchword($$dpth: number, $$cr?: ErrorTracker): Nullable<word> {
        return this.memoise(
            () => {
                return this.choice<word>([
                    () => this.matchword_1($$dpth + 1, $$cr),
                    () => this.matchword_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$word$memo,
        );
    }
    public matchword_1($$dpth: number, $$cr?: ErrorTracker): Nullable<word_1> {
        return this.run<word_1>($$dpth,
            () => {
                let $scope$a: Nullable<atom>;
                let $$res: Nullable<word_1> = null;
                if (true
                    && ($scope$a = this.matchatom($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.word_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchword_2($$dpth: number, $$cr?: ErrorTracker): Nullable<word_2> {
        return this.run<word_2>($$dpth,
            () => {
                let $scope$b: Nullable<quoted_string>;
                let $$res: Nullable<word_2> = null;
                if (true
                    && ($scope$b = this.matchquoted_string($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new word_2($scope$b);
                }
                return $$res;
            });
    }
    public matchphrase($$dpth: number, $$cr?: ErrorTracker): Nullable<phrase> {
        return this.memoise(
            () => {
                return this.choice<phrase>([
                    () => this.matchphrase_1($$dpth + 1, $$cr),
                    () => this.matchphrase_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$phrase$memo,
        );
    }
    public matchphrase_1($$dpth: number, $$cr?: ErrorTracker): Nullable<phrase_1> {
        return this.run<phrase_1>($$dpth,
            () => {
                let $scope$a: Nullable<word[]>;
                let $$res: Nullable<phrase_1> = null;
                if (true
                    && ($scope$a = this.loop<word>(() => this.matchword($$dpth + 1, $$cr), false)) !== null
                ) {
                    $$res = {kind: ASTKinds.phrase_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchphrase_2($$dpth: number, $$cr?: ErrorTracker): Nullable<phrase_2> {
        return this.run<phrase_2>($$dpth,
            () => {
                let $scope$b: Nullable<obs_phrase>;
                let $$res: Nullable<phrase_2> = null;
                if (true
                    && ($scope$b = this.matchobs_phrase($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new phrase_2($scope$b);
                }
                return $$res;
            });
    }
    public matchunstructured($$dpth: number, $$cr?: ErrorTracker): Nullable<unstructured> {
        return this.memoise(
            () => {
                return this.choice<unstructured>([
                    () => this.matchunstructured_1($$dpth + 1, $$cr),
                    () => this.matchunstructured_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$unstructured$memo,
        );
    }
    public matchunstructured_1($$dpth: number, $$cr?: ErrorTracker): Nullable<unstructured_1> {
        return this.run<unstructured_1>($$dpth,
            () => {
                let $scope$a: Nullable<unstructured_$0>;
                let $$res: Nullable<unstructured_1> = null;
                if (true
                    && ($scope$a = this.matchunstructured_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.unstructured_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchunstructured_2($$dpth: number, $$cr?: ErrorTracker): Nullable<unstructured_2> {
        return this.run<unstructured_2>($$dpth,
            () => {
                let $scope$b: Nullable<obs_unstruct>;
                let $$res: Nullable<unstructured_2> = null;
                if (true
                    && ($scope$b = this.matchobs_unstruct($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new unstructured_2($scope$b);
                }
                return $$res;
            });
    }
    public matchunstructured_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<unstructured_$0> {
        return this.memoise(
            () => {
                return this.run<unstructured_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<unstructured_$0_$0[]>;
                        let $scope$b: Nullable<WSP[]>;
                        let $$res: Nullable<unstructured_$0> = null;
                        if (true
                            && ($scope$a = this.loop<unstructured_$0_$0>(() => this.matchunstructured_$0_$0($$dpth + 1, $$cr), true)) !== null
                            && ($scope$b = this.loop<WSP>(() => this.matchWSP($$dpth + 1, $$cr), true)) !== null
                        ) {
                            $$res = {kind: ASTKinds.unstructured_$0, a: $scope$a, b: $scope$b};
                        }
                        return $$res;
                    });
            },
            this.$scope$unstructured_$0$memo,
        );
    }
    public matchunstructured_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<unstructured_$0_$0> {
        return this.memoise(
            () => {
                return this.run<unstructured_$0_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<Nullable<FWS>>;
                        let $scope$b: Nullable<VCHAR>;
                        let $$res: Nullable<unstructured_$0_$0> = null;
                        if (true
                            && (($scope$a = this.matchFWS($$dpth + 1, $$cr)) || true)
                            && ($scope$b = this.matchVCHAR($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.unstructured_$0_$0, a: $scope$a, b: $scope$b};
                        }
                        return $$res;
                    });
            },
            this.$scope$unstructured_$0_$0$memo,
        );
    }
    public matchdate_time($$dpth: number, $$cr?: ErrorTracker): Nullable<date_time> {
        return this.memoise(
            () => {
                return this.run<date_time>($$dpth,
                    () => {
                        let $scope$a: Nullable<Nullable<date_time_$0>>;
                        let $scope$b: Nullable<date>;
                        let $scope$c: Nullable<time>;
                        let $scope$d: Nullable<Nullable<CFWS>>;
                        let $$res: Nullable<date_time> = null;
                        if (true
                            && (($scope$a = this.matchdate_time_$0($$dpth + 1, $$cr)) || true)
                            && ($scope$b = this.matchdate($$dpth + 1, $$cr)) !== null
                            && ($scope$c = this.matchtime($$dpth + 1, $$cr)) !== null
                            && (($scope$d = this.matchCFWS($$dpth + 1, $$cr)) || true)
                        ) {
                            $$res = new date_time($scope$a, $scope$b, $scope$c, $scope$d);
                        }
                        return $$res;
                    });
            },
            this.$scope$date_time$memo,
        );
    }
    public matchdate_time_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<date_time_$0> {
        return this.memoise(
            () => {
                return this.run<date_time_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<day_of_week>;
                        let $scope$b: Nullable<string>;
                        let $$res: Nullable<date_time_$0> = null;
                        if (true
                            && ($scope$a = this.matchday_of_week($$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.date_time_$0, a: $scope$a, b: $scope$b};
                        }
                        return $$res;
                    });
            },
            this.$scope$date_time_$0$memo,
        );
    }
    public matchday_of_week($$dpth: number, $$cr?: ErrorTracker): Nullable<day_of_week> {
        return this.memoise(
            () => {
                return this.choice<day_of_week>([
                    () => this.matchday_of_week_1($$dpth + 1, $$cr),
                    () => this.matchday_of_week_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$day_of_week$memo,
        );
    }
    public matchday_of_week_1($$dpth: number, $$cr?: ErrorTracker): Nullable<day_of_week_1> {
        return this.run<day_of_week_1>($$dpth,
            () => {
                let $scope$a: Nullable<day_of_week_$0>;
                let $$res: Nullable<day_of_week_1> = null;
                if (true
                    && ($scope$a = this.matchday_of_week_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.day_of_week_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchday_of_week_2($$dpth: number, $$cr?: ErrorTracker): Nullable<day_of_week_2> {
        return this.run<day_of_week_2>($$dpth,
            () => {
                let $scope$b: Nullable<obs_day_of_week>;
                let $$res: Nullable<day_of_week_2> = null;
                if (true
                    && ($scope$b = this.matchobs_day_of_week($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new day_of_week_2($scope$b);
                }
                return $$res;
            });
    }
    public matchday_of_week_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<day_of_week_$0> {
        return this.memoise(
            () => {
                return this.run<day_of_week_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<Nullable<FWS>>;
                        let $scope$b: Nullable<day_name>;
                        let $$res: Nullable<day_of_week_$0> = null;
                        if (true
                            && (($scope$a = this.matchFWS($$dpth + 1, $$cr)) || true)
                            && ($scope$b = this.matchday_name($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.day_of_week_$0, a: $scope$a, b: $scope$b};
                        }
                        return $$res;
                    });
            },
            this.$scope$day_of_week_$0$memo,
        );
    }
    public matchday_name($$dpth: number, $$cr?: ErrorTracker): Nullable<day_name> {
        return this.memoise(
            () => {
                return this.choice<day_name>([
                    () => this.matchday_name_1($$dpth + 1, $$cr),
                    () => this.matchday_name_2($$dpth + 1, $$cr),
                    () => this.matchday_name_3($$dpth + 1, $$cr),
                    () => this.matchday_name_4($$dpth + 1, $$cr),
                    () => this.matchday_name_5($$dpth + 1, $$cr),
                    () => this.matchday_name_6($$dpth + 1, $$cr),
                    () => this.matchday_name_7($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$day_name$memo,
        );
    }
    public matchday_name_1($$dpth: number, $$cr?: ErrorTracker): Nullable<day_name_1> {
        return this.run<day_name_1>($$dpth,
            () => {
                let $scope$a: Nullable<string>;
                let $$res: Nullable<day_name_1> = null;
                if (true
                    && ($scope$a = this.regexAccept(String.raw`(?:Mon)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.day_name_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchday_name_2($$dpth: number, $$cr?: ErrorTracker): Nullable<day_name_2> {
        return this.run<day_name_2>($$dpth,
            () => {
                let $scope$b: Nullable<string>;
                let $$res: Nullable<day_name_2> = null;
                if (true
                    && ($scope$b = this.regexAccept(String.raw`(?:Tue)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.day_name_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchday_name_3($$dpth: number, $$cr?: ErrorTracker): Nullable<day_name_3> {
        return this.run<day_name_3>($$dpth,
            () => {
                let $scope$c: Nullable<string>;
                let $$res: Nullable<day_name_3> = null;
                if (true
                    && ($scope$c = this.regexAccept(String.raw`(?:Wed)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.day_name_3, c: $scope$c};
                }
                return $$res;
            });
    }
    public matchday_name_4($$dpth: number, $$cr?: ErrorTracker): Nullable<day_name_4> {
        return this.run<day_name_4>($$dpth,
            () => {
                let $scope$d: Nullable<string>;
                let $$res: Nullable<day_name_4> = null;
                if (true
                    && ($scope$d = this.regexAccept(String.raw`(?:Thu)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.day_name_4, d: $scope$d};
                }
                return $$res;
            });
    }
    public matchday_name_5($$dpth: number, $$cr?: ErrorTracker): Nullable<day_name_5> {
        return this.run<day_name_5>($$dpth,
            () => {
                let $scope$e: Nullable<string>;
                let $$res: Nullable<day_name_5> = null;
                if (true
                    && ($scope$e = this.regexAccept(String.raw`(?:Fri)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.day_name_5, e: $scope$e};
                }
                return $$res;
            });
    }
    public matchday_name_6($$dpth: number, $$cr?: ErrorTracker): Nullable<day_name_6> {
        return this.run<day_name_6>($$dpth,
            () => {
                let $scope$f: Nullable<string>;
                let $$res: Nullable<day_name_6> = null;
                if (true
                    && ($scope$f = this.regexAccept(String.raw`(?:Sat)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.day_name_6, f: $scope$f};
                }
                return $$res;
            });
    }
    public matchday_name_7($$dpth: number, $$cr?: ErrorTracker): Nullable<day_name_7> {
        return this.run<day_name_7>($$dpth,
            () => {
                let $scope$g: Nullable<string>;
                let $$res: Nullable<day_name_7> = null;
                if (true
                    && ($scope$g = this.regexAccept(String.raw`(?:Sun)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new day_name_7($scope$g);
                }
                return $$res;
            });
    }
    public matchdate($$dpth: number, $$cr?: ErrorTracker): Nullable<date> {
        return this.memoise(
            () => {
                return this.run<date>($$dpth,
                    () => {
                        let $scope$a: Nullable<day>;
                        let $scope$b: Nullable<month>;
                        let $scope$c: Nullable<year>;
                        let $$res: Nullable<date> = null;
                        if (true
                            && ($scope$a = this.matchday($$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.matchmonth($$dpth + 1, $$cr)) !== null
                            && ($scope$c = this.matchyear($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new date($scope$a, $scope$b, $scope$c);
                        }
                        return $$res;
                    });
            },
            this.$scope$date$memo,
        );
    }
    public matchday($$dpth: number, $$cr?: ErrorTracker): Nullable<day> {
        return this.memoise(
            () => {
                return this.choice<day>([
                    () => this.matchday_1($$dpth + 1, $$cr),
                    () => this.matchday_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$day$memo,
        );
    }
    public matchday_1($$dpth: number, $$cr?: ErrorTracker): Nullable<day_1> {
        return this.run<day_1>($$dpth,
            () => {
                let $scope$a: Nullable<day_$0>;
                let $$res: Nullable<day_1> = null;
                if (true
                    && ($scope$a = this.matchday_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.day_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchday_2($$dpth: number, $$cr?: ErrorTracker): Nullable<day_2> {
        return this.run<day_2>($$dpth,
            () => {
                let $scope$b: Nullable<obs_day>;
                let $$res: Nullable<day_2> = null;
                if (true
                    && ($scope$b = this.matchobs_day($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new day_2($scope$b);
                }
                return $$res;
            });
    }
    public matchday_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<day_$0> {
        return this.memoise(
            () => {
                return this.run<day_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<Nullable<FWS>>;
                        let $scope$b: Nullable<DIGIT>;
                        let $scope$c: Nullable<Nullable<DIGIT>>;
                        let $scope$d: Nullable<FWS>;
                        let $$res: Nullable<day_$0> = null;
                        if (true
                            && (($scope$a = this.matchFWS($$dpth + 1, $$cr)) || true)
                            && ($scope$b = this.matchDIGIT($$dpth + 1, $$cr)) !== null
                            && (($scope$c = this.matchDIGIT($$dpth + 1, $$cr)) || true)
                            && ($scope$d = this.matchFWS($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.day_$0, a: $scope$a, b: $scope$b, c: $scope$c, d: $scope$d};
                        }
                        return $$res;
                    });
            },
            this.$scope$day_$0$memo,
        );
    }
    public matchmonth($$dpth: number, $$cr?: ErrorTracker): Nullable<month> {
        return this.memoise(
            () => {
                return this.choice<month>([
                    () => this.matchmonth_1($$dpth + 1, $$cr),
                    () => this.matchmonth_2($$dpth + 1, $$cr),
                    () => this.matchmonth_3($$dpth + 1, $$cr),
                    () => this.matchmonth_4($$dpth + 1, $$cr),
                    () => this.matchmonth_5($$dpth + 1, $$cr),
                    () => this.matchmonth_6($$dpth + 1, $$cr),
                    () => this.matchmonth_7($$dpth + 1, $$cr),
                    () => this.matchmonth_8($$dpth + 1, $$cr),
                    () => this.matchmonth_9($$dpth + 1, $$cr),
                    () => this.matchmonth_10($$dpth + 1, $$cr),
                    () => this.matchmonth_11($$dpth + 1, $$cr),
                    () => this.matchmonth_12($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$month$memo,
        );
    }
    public matchmonth_1($$dpth: number, $$cr?: ErrorTracker): Nullable<month_1> {
        return this.run<month_1>($$dpth,
            () => {
                let $scope$a: Nullable<string>;
                let $$res: Nullable<month_1> = null;
                if (true
                    && ($scope$a = this.regexAccept(String.raw`(?:Jan)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.month_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchmonth_2($$dpth: number, $$cr?: ErrorTracker): Nullable<month_2> {
        return this.run<month_2>($$dpth,
            () => {
                let $scope$b: Nullable<string>;
                let $$res: Nullable<month_2> = null;
                if (true
                    && ($scope$b = this.regexAccept(String.raw`(?:Feb)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.month_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchmonth_3($$dpth: number, $$cr?: ErrorTracker): Nullable<month_3> {
        return this.run<month_3>($$dpth,
            () => {
                let $scope$c: Nullable<string>;
                let $$res: Nullable<month_3> = null;
                if (true
                    && ($scope$c = this.regexAccept(String.raw`(?:Mar)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.month_3, c: $scope$c};
                }
                return $$res;
            });
    }
    public matchmonth_4($$dpth: number, $$cr?: ErrorTracker): Nullable<month_4> {
        return this.run<month_4>($$dpth,
            () => {
                let $scope$d: Nullable<string>;
                let $$res: Nullable<month_4> = null;
                if (true
                    && ($scope$d = this.regexAccept(String.raw`(?:Apr)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.month_4, d: $scope$d};
                }
                return $$res;
            });
    }
    public matchmonth_5($$dpth: number, $$cr?: ErrorTracker): Nullable<month_5> {
        return this.run<month_5>($$dpth,
            () => {
                let $scope$e: Nullable<string>;
                let $$res: Nullable<month_5> = null;
                if (true
                    && ($scope$e = this.regexAccept(String.raw`(?:May)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.month_5, e: $scope$e};
                }
                return $$res;
            });
    }
    public matchmonth_6($$dpth: number, $$cr?: ErrorTracker): Nullable<month_6> {
        return this.run<month_6>($$dpth,
            () => {
                let $scope$f: Nullable<string>;
                let $$res: Nullable<month_6> = null;
                if (true
                    && ($scope$f = this.regexAccept(String.raw`(?:Jun)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.month_6, f: $scope$f};
                }
                return $$res;
            });
    }
    public matchmonth_7($$dpth: number, $$cr?: ErrorTracker): Nullable<month_7> {
        return this.run<month_7>($$dpth,
            () => {
                let $scope$g: Nullable<string>;
                let $$res: Nullable<month_7> = null;
                if (true
                    && ($scope$g = this.regexAccept(String.raw`(?:Jul)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.month_7, g: $scope$g};
                }
                return $$res;
            });
    }
    public matchmonth_8($$dpth: number, $$cr?: ErrorTracker): Nullable<month_8> {
        return this.run<month_8>($$dpth,
            () => {
                let $scope$h: Nullable<string>;
                let $$res: Nullable<month_8> = null;
                if (true
                    && ($scope$h = this.regexAccept(String.raw`(?:Aug)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.month_8, h: $scope$h};
                }
                return $$res;
            });
    }
    public matchmonth_9($$dpth: number, $$cr?: ErrorTracker): Nullable<month_9> {
        return this.run<month_9>($$dpth,
            () => {
                let $scope$i: Nullable<string>;
                let $$res: Nullable<month_9> = null;
                if (true
                    && ($scope$i = this.regexAccept(String.raw`(?:Sep)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.month_9, i: $scope$i};
                }
                return $$res;
            });
    }
    public matchmonth_10($$dpth: number, $$cr?: ErrorTracker): Nullable<month_10> {
        return this.run<month_10>($$dpth,
            () => {
                let $scope$j: Nullable<string>;
                let $$res: Nullable<month_10> = null;
                if (true
                    && ($scope$j = this.regexAccept(String.raw`(?:Oct)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.month_10, j: $scope$j};
                }
                return $$res;
            });
    }
    public matchmonth_11($$dpth: number, $$cr?: ErrorTracker): Nullable<month_11> {
        return this.run<month_11>($$dpth,
            () => {
                let $scope$k: Nullable<string>;
                let $$res: Nullable<month_11> = null;
                if (true
                    && ($scope$k = this.regexAccept(String.raw`(?:Nov)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.month_11, k: $scope$k};
                }
                return $$res;
            });
    }
    public matchmonth_12($$dpth: number, $$cr?: ErrorTracker): Nullable<month_12> {
        return this.run<month_12>($$dpth,
            () => {
                let $scope$l: Nullable<string>;
                let $$res: Nullable<month_12> = null;
                if (true
                    && ($scope$l = this.regexAccept(String.raw`(?:Dec)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new month_12($scope$l);
                }
                return $$res;
            });
    }
    public matchyear($$dpth: number, $$cr?: ErrorTracker): Nullable<year> {
        return this.memoise(
            () => {
                return this.choice<year>([
                    () => this.matchyear_1($$dpth + 1, $$cr),
                    () => this.matchyear_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$year$memo,
        );
    }
    public matchyear_1($$dpth: number, $$cr?: ErrorTracker): Nullable<year_1> {
        return this.run<year_1>($$dpth,
            () => {
                let $scope$a: Nullable<year_$0>;
                let $$res: Nullable<year_1> = null;
                if (true
                    && ($scope$a = this.matchyear_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.year_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchyear_2($$dpth: number, $$cr?: ErrorTracker): Nullable<year_2> {
        return this.run<year_2>($$dpth,
            () => {
                let $scope$b: Nullable<obs_year>;
                let $$res: Nullable<year_2> = null;
                if (true
                    && ($scope$b = this.matchobs_year($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new year_2($scope$b);
                }
                return $$res;
            });
    }
    public matchyear_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<year_$0> {
        return this.memoise(
            () => {
                return this.run<year_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<FWS>;
                        let $scope$b: Nullable<FOUR_DIGIT>;
                        let $scope$c: Nullable<DIGIT[]>;
                        let $scope$d: Nullable<FWS>;
                        let $$res: Nullable<year_$0> = null;
                        if (true
                            && ($scope$a = this.matchFWS($$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.matchFOUR_DIGIT($$dpth + 1, $$cr)) !== null
                            && ($scope$c = this.loop<DIGIT>(() => this.matchDIGIT($$dpth + 1, $$cr), true)) !== null
                            && ($scope$d = this.matchFWS($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.year_$0, a: $scope$a, b: $scope$b, c: $scope$c, d: $scope$d};
                        }
                        return $$res;
                    });
            },
            this.$scope$year_$0$memo,
        );
    }
    public matchtime($$dpth: number, $$cr?: ErrorTracker): Nullable<time> {
        return this.memoise(
            () => {
                return this.run<time>($$dpth,
                    () => {
                        let $scope$a: Nullable<time_of_day>;
                        let $scope$b: Nullable<zone>;
                        let $$res: Nullable<time> = null;
                        if (true
                            && ($scope$a = this.matchtime_of_day($$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.matchzone($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new time($scope$a, $scope$b);
                        }
                        return $$res;
                    });
            },
            this.$scope$time$memo,
        );
    }
    public matchtime_of_day($$dpth: number, $$cr?: ErrorTracker): Nullable<time_of_day> {
        return this.memoise(
            () => {
                return this.run<time_of_day>($$dpth,
                    () => {
                        let $scope$a: Nullable<hour>;
                        let $scope$b: Nullable<string>;
                        let $scope$c: Nullable<minute>;
                        let $scope$d: Nullable<Nullable<time_of_day_$0>>;
                        let $$res: Nullable<time_of_day> = null;
                        if (true
                            && ($scope$a = this.matchhour($$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$c = this.matchminute($$dpth + 1, $$cr)) !== null
                            && (($scope$d = this.matchtime_of_day_$0($$dpth + 1, $$cr)) || true)
                        ) {
                            $$res = new time_of_day($scope$a, $scope$b, $scope$c, $scope$d);
                        }
                        return $$res;
                    });
            },
            this.$scope$time_of_day$memo,
        );
    }
    public matchtime_of_day_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<time_of_day_$0> {
        return this.memoise(
            () => {
                return this.run<time_of_day_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<second>;
                        let $$res: Nullable<time_of_day_$0> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.matchsecond($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.time_of_day_$0, a: $scope$a, b: $scope$b};
                        }
                        return $$res;
                    });
            },
            this.$scope$time_of_day_$0$memo,
        );
    }
    public matchhour($$dpth: number, $$cr?: ErrorTracker): Nullable<hour> {
        return this.memoise(
            () => {
                return this.choice<hour>([
                    () => this.matchhour_1($$dpth + 1, $$cr),
                    () => this.matchhour_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$hour$memo,
        );
    }
    public matchhour_1($$dpth: number, $$cr?: ErrorTracker): Nullable<hour_1> {
        return this.run<hour_1>($$dpth,
            () => {
                let $scope$a: Nullable<TWO_DIGIT>;
                let $$res: Nullable<hour_1> = null;
                if (true
                    && ($scope$a = this.matchTWO_DIGIT($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.hour_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchhour_2($$dpth: number, $$cr?: ErrorTracker): Nullable<hour_2> {
        return this.run<hour_2>($$dpth,
            () => {
                let $scope$b: Nullable<obs_hour>;
                let $$res: Nullable<hour_2> = null;
                if (true
                    && ($scope$b = this.matchobs_hour($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new hour_2($scope$b);
                }
                return $$res;
            });
    }
    public matchminute($$dpth: number, $$cr?: ErrorTracker): Nullable<minute> {
        return this.memoise(
            () => {
                return this.choice<minute>([
                    () => this.matchminute_1($$dpth + 1, $$cr),
                    () => this.matchminute_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$minute$memo,
        );
    }
    public matchminute_1($$dpth: number, $$cr?: ErrorTracker): Nullable<minute_1> {
        return this.run<minute_1>($$dpth,
            () => {
                let $scope$a: Nullable<TWO_DIGIT>;
                let $$res: Nullable<minute_1> = null;
                if (true
                    && ($scope$a = this.matchTWO_DIGIT($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.minute_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchminute_2($$dpth: number, $$cr?: ErrorTracker): Nullable<minute_2> {
        return this.run<minute_2>($$dpth,
            () => {
                let $scope$b: Nullable<obs_minute>;
                let $$res: Nullable<minute_2> = null;
                if (true
                    && ($scope$b = this.matchobs_minute($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new minute_2($scope$b);
                }
                return $$res;
            });
    }
    public matchsecond($$dpth: number, $$cr?: ErrorTracker): Nullable<second> {
        return this.memoise(
            () => {
                return this.choice<second>([
                    () => this.matchsecond_1($$dpth + 1, $$cr),
                    () => this.matchsecond_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$second$memo,
        );
    }
    public matchsecond_1($$dpth: number, $$cr?: ErrorTracker): Nullable<second_1> {
        return this.run<second_1>($$dpth,
            () => {
                let $scope$a: Nullable<TWO_DIGIT>;
                let $$res: Nullable<second_1> = null;
                if (true
                    && ($scope$a = this.matchTWO_DIGIT($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.second_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchsecond_2($$dpth: number, $$cr?: ErrorTracker): Nullable<second_2> {
        return this.run<second_2>($$dpth,
            () => {
                let $scope$b: Nullable<obs_second>;
                let $$res: Nullable<second_2> = null;
                if (true
                    && ($scope$b = this.matchobs_second($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new second_2($scope$b);
                }
                return $$res;
            });
    }
    public matchzone($$dpth: number, $$cr?: ErrorTracker): Nullable<zone> {
        return this.memoise(
            () => {
                return this.choice<zone>([
                    () => this.matchzone_1($$dpth + 1, $$cr),
                    () => this.matchzone_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$zone$memo,
        );
    }
    public matchzone_1($$dpth: number, $$cr?: ErrorTracker): Nullable<zone_1> {
        return this.run<zone_1>($$dpth,
            () => {
                let $scope$a: Nullable<zone_$0>;
                let $$res: Nullable<zone_1> = null;
                if (true
                    && ($scope$a = this.matchzone_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.zone_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchzone_2($$dpth: number, $$cr?: ErrorTracker): Nullable<zone_2> {
        return this.run<zone_2>($$dpth,
            () => {
                let $scope$b: Nullable<obs_zone>;
                let $$res: Nullable<zone_2> = null;
                if (true
                    && ($scope$b = this.matchobs_zone($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new zone_2($scope$b);
                }
                return $$res;
            });
    }
    public matchzone_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<zone_$0> {
        return this.memoise(
            () => {
                return this.run<zone_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<FWS>;
                        let $scope$b: Nullable<zone_$0_$0>;
                        let $scope$c: Nullable<FOUR_DIGIT>;
                        let $$res: Nullable<zone_$0> = null;
                        if (true
                            && ($scope$a = this.matchFWS($$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.matchzone_$0_$0($$dpth + 1, $$cr)) !== null
                            && ($scope$c = this.matchFOUR_DIGIT($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.zone_$0, a: $scope$a, b: $scope$b, c: $scope$c};
                        }
                        return $$res;
                    });
            },
            this.$scope$zone_$0$memo,
        );
    }
    public matchzone_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<zone_$0_$0> {
        return this.memoise(
            () => {
                return this.choice<zone_$0_$0>([
                    () => this.matchzone_$0_$0_1($$dpth + 1, $$cr),
                    () => this.matchzone_$0_$0_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$zone_$0_$0$memo,
        );
    }
    public matchzone_$0_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<zone_$0_$0_1> {
        return this.run<zone_$0_$0_1>($$dpth,
            () => {
                let $scope$a: Nullable<string>;
                let $$res: Nullable<zone_$0_$0_1> = null;
                if (true
                    && ($scope$a = this.regexAccept(String.raw`(?:\+)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.zone_$0_$0_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchzone_$0_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<zone_$0_$0_2> {
        return this.run<zone_$0_$0_2>($$dpth,
            () => {
                let $scope$b: Nullable<string>;
                let $$res: Nullable<zone_$0_$0_2> = null;
                if (true
                    && ($scope$b = this.regexAccept(String.raw`(?:\-)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.zone_$0_$0_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchaddress($$dpth: number, $$cr?: ErrorTracker): Nullable<address> {
        return this.memoise(
            () => {
                return this.choice<address>([
                    () => this.matchaddress_1($$dpth + 1, $$cr),
                    () => this.matchaddress_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$address$memo,
        );
    }
    public matchaddress_1($$dpth: number, $$cr?: ErrorTracker): Nullable<address_1> {
        return this.run<address_1>($$dpth,
            () => {
                let $scope$a: Nullable<mailbox>;
                let $$res: Nullable<address_1> = null;
                if (true
                    && ($scope$a = this.matchmailbox($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.address_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchaddress_2($$dpth: number, $$cr?: ErrorTracker): Nullable<address_2> {
        return this.run<address_2>($$dpth,
            () => {
                let $scope$b: Nullable<group>;
                let $$res: Nullable<address_2> = null;
                if (true
                    && ($scope$b = this.matchgroup($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new address_2($scope$b);
                }
                return $$res;
            });
    }
    public matchmailbox($$dpth: number, $$cr?: ErrorTracker): Nullable<mailbox> {
        return this.memoise(
            () => {
                return this.choice<mailbox>([
                    () => this.matchmailbox_1($$dpth + 1, $$cr),
                    () => this.matchmailbox_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$mailbox$memo,
        );
    }
    public matchmailbox_1($$dpth: number, $$cr?: ErrorTracker): Nullable<mailbox_1> {
        return this.run<mailbox_1>($$dpth,
            () => {
                let $scope$a: Nullable<name_addr>;
                let $$res: Nullable<mailbox_1> = null;
                if (true
                    && ($scope$a = this.matchname_addr($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.mailbox_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchmailbox_2($$dpth: number, $$cr?: ErrorTracker): Nullable<mailbox_2> {
        return this.run<mailbox_2>($$dpth,
            () => {
                let $scope$b: Nullable<addr_spec>;
                let $$res: Nullable<mailbox_2> = null;
                if (true
                    && ($scope$b = this.matchaddr_spec($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new mailbox_2($scope$b);
                }
                return $$res;
            });
    }
    public matchname_addr($$dpth: number, $$cr?: ErrorTracker): Nullable<name_addr> {
        return this.memoise(
            () => {
                return this.run<name_addr>($$dpth,
                    () => {
                        let $scope$a: Nullable<Nullable<display_name>>;
                        let $scope$b: Nullable<angle_addr>;
                        let $$res: Nullable<name_addr> = null;
                        if (true
                            && (($scope$a = this.matchdisplay_name($$dpth + 1, $$cr)) || true)
                            && ($scope$b = this.matchangle_addr($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new name_addr($scope$a, $scope$b);
                        }
                        return $$res;
                    });
            },
            this.$scope$name_addr$memo,
        );
    }
    public matchangle_addr($$dpth: number, $$cr?: ErrorTracker): Nullable<angle_addr> {
        return this.memoise(
            () => {
                return this.choice<angle_addr>([
                    () => this.matchangle_addr_1($$dpth + 1, $$cr),
                    () => this.matchangle_addr_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$angle_addr$memo,
        );
    }
    public matchangle_addr_1($$dpth: number, $$cr?: ErrorTracker): Nullable<angle_addr_1> {
        return this.run<angle_addr_1>($$dpth,
            () => {
                let $scope$a: Nullable<Nullable<CFWS>>;
                let $scope$b: Nullable<string>;
                let $scope$c: Nullable<addr_spec>;
                let $scope$d: Nullable<string>;
                let $scope$e: Nullable<Nullable<CFWS>>;
                let $$res: Nullable<angle_addr_1> = null;
                if (true
                    && (($scope$a = this.matchCFWS($$dpth + 1, $$cr)) || true)
                    && ($scope$b = this.regexAccept(String.raw`(?:<)`, $$dpth + 1, $$cr)) !== null
                    && ($scope$c = this.matchaddr_spec($$dpth + 1, $$cr)) !== null
                    && ($scope$d = this.regexAccept(String.raw`(?:>)`, $$dpth + 1, $$cr)) !== null
                    && (($scope$e = this.matchCFWS($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.angle_addr_1, a: $scope$a, b: $scope$b, c: $scope$c, d: $scope$d, e: $scope$e};
                }
                return $$res;
            });
    }
    public matchangle_addr_2($$dpth: number, $$cr?: ErrorTracker): Nullable<angle_addr_2> {
        return this.run<angle_addr_2>($$dpth,
            () => {
                let $scope$f: Nullable<obs_angle_addr>;
                let $$res: Nullable<angle_addr_2> = null;
                if (true
                    && ($scope$f = this.matchobs_angle_addr($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new angle_addr_2($scope$f);
                }
                return $$res;
            });
    }
    public matchgroup($$dpth: number, $$cr?: ErrorTracker): Nullable<group> {
        return this.memoise(
            () => {
                return this.run<group>($$dpth,
                    () => {
                        let $scope$a: Nullable<display_name>;
                        let $scope$b: Nullable<string>;
                        let $scope$c: Nullable<Nullable<group_list>>;
                        let $scope$d: Nullable<string>;
                        let $scope$e: Nullable<Nullable<CFWS>>;
                        let $$res: Nullable<group> = null;
                        if (true
                            && ($scope$a = this.matchdisplay_name($$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr)) !== null
                            && (($scope$c = this.matchgroup_list($$dpth + 1, $$cr)) || true)
                            && ($scope$d = this.regexAccept(String.raw`(?:;)`, $$dpth + 1, $$cr)) !== null
                            && (($scope$e = this.matchCFWS($$dpth + 1, $$cr)) || true)
                        ) {
                            $$res = new group($scope$a, $scope$b, $scope$c, $scope$d, $scope$e);
                        }
                        return $$res;
                    });
            },
            this.$scope$group$memo,
        );
    }
    public matchdisplay_name($$dpth: number, $$cr?: ErrorTracker): Nullable<display_name> {
        return this.memoise(
            () => {
                return this.run<display_name>($$dpth,
                    () => {
                        let $scope$a: Nullable<phrase>;
                        let $$res: Nullable<display_name> = null;
                        if (true
                            && ($scope$a = this.matchphrase($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new display_name($scope$a);
                        }
                        return $$res;
                    });
            },
            this.$scope$display_name$memo,
        );
    }
    public matchmailbox_list($$dpth: number, $$cr?: ErrorTracker): Nullable<mailbox_list> {
        return this.memoise(
            () => {
                return this.choice<mailbox_list>([
                    () => this.matchmailbox_list_1($$dpth + 1, $$cr),
                    () => this.matchmailbox_list_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$mailbox_list$memo,
        );
    }
    public matchmailbox_list_1($$dpth: number, $$cr?: ErrorTracker): Nullable<mailbox_list_1> {
        return this.run<mailbox_list_1>($$dpth,
            () => {
                let $scope$a: Nullable<mailbox_list_$0>;
                let $$res: Nullable<mailbox_list_1> = null;
                if (true
                    && ($scope$a = this.matchmailbox_list_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.mailbox_list_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchmailbox_list_2($$dpth: number, $$cr?: ErrorTracker): Nullable<mailbox_list_2> {
        return this.run<mailbox_list_2>($$dpth,
            () => {
                let $scope$b: Nullable<obs_mbox_list>;
                let $$res: Nullable<mailbox_list_2> = null;
                if (true
                    && ($scope$b = this.matchobs_mbox_list($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new mailbox_list_2($scope$b);
                }
                return $$res;
            });
    }
    public matchmailbox_list_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<mailbox_list_$0> {
        return this.memoise(
            () => {
                return this.run<mailbox_list_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<mailbox>;
                        let $scope$b: Nullable<mailbox_list_$0_$0[]>;
                        let $$res: Nullable<mailbox_list_$0> = null;
                        if (true
                            && ($scope$a = this.matchmailbox($$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<mailbox_list_$0_$0>(() => this.matchmailbox_list_$0_$0($$dpth + 1, $$cr), true)) !== null
                        ) {
                            $$res = {kind: ASTKinds.mailbox_list_$0, a: $scope$a, b: $scope$b};
                        }
                        return $$res;
                    });
            },
            this.$scope$mailbox_list_$0$memo,
        );
    }
    public matchmailbox_list_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<mailbox_list_$0_$0> {
        return this.memoise(
            () => {
                return this.run<mailbox_list_$0_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<mailbox>;
                        let $$res: Nullable<mailbox_list_$0_$0> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.matchmailbox($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.mailbox_list_$0_$0, a: $scope$a, b: $scope$b};
                        }
                        return $$res;
                    });
            },
            this.$scope$mailbox_list_$0_$0$memo,
        );
    }
    public matchaddress_list($$dpth: number, $$cr?: ErrorTracker): Nullable<address_list> {
        return this.memoise(
            () => {
                return this.choice<address_list>([
                    () => this.matchaddress_list_1($$dpth + 1, $$cr),
                    () => this.matchaddress_list_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$address_list$memo,
        );
    }
    public matchaddress_list_1($$dpth: number, $$cr?: ErrorTracker): Nullable<address_list_1> {
        return this.run<address_list_1>($$dpth,
            () => {
                let $scope$a: Nullable<address_list_$0>;
                let $$res: Nullable<address_list_1> = null;
                if (true
                    && ($scope$a = this.matchaddress_list_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.address_list_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchaddress_list_2($$dpth: number, $$cr?: ErrorTracker): Nullable<address_list_2> {
        return this.run<address_list_2>($$dpth,
            () => {
                let $scope$b: Nullable<obs_addr_list>;
                let $$res: Nullable<address_list_2> = null;
                if (true
                    && ($scope$b = this.matchobs_addr_list($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new address_list_2($scope$b);
                }
                return $$res;
            });
    }
    public matchaddress_list_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<address_list_$0> {
        return this.memoise(
            () => {
                return this.run<address_list_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<address>;
                        let $scope$b: Nullable<address_list_$0_$0[]>;
                        let $$res: Nullable<address_list_$0> = null;
                        if (true
                            && ($scope$a = this.matchaddress($$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<address_list_$0_$0>(() => this.matchaddress_list_$0_$0($$dpth + 1, $$cr), true)) !== null
                        ) {
                            $$res = {kind: ASTKinds.address_list_$0, a: $scope$a, b: $scope$b};
                        }
                        return $$res;
                    });
            },
            this.$scope$address_list_$0$memo,
        );
    }
    public matchaddress_list_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<address_list_$0_$0> {
        return this.memoise(
            () => {
                return this.run<address_list_$0_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<address>;
                        let $$res: Nullable<address_list_$0_$0> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.matchaddress($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.address_list_$0_$0, a: $scope$a, b: $scope$b};
                        }
                        return $$res;
                    });
            },
            this.$scope$address_list_$0_$0$memo,
        );
    }
    public matchgroup_list($$dpth: number, $$cr?: ErrorTracker): Nullable<group_list> {
        return this.memoise(
            () => {
                return this.choice<group_list>([
                    () => this.matchgroup_list_1($$dpth + 1, $$cr),
                    () => this.matchgroup_list_2($$dpth + 1, $$cr),
                    () => this.matchgroup_list_3($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$group_list$memo,
        );
    }
    public matchgroup_list_1($$dpth: number, $$cr?: ErrorTracker): Nullable<group_list_1> {
        return this.run<group_list_1>($$dpth,
            () => {
                let $scope$a: Nullable<mailbox_list>;
                let $$res: Nullable<group_list_1> = null;
                if (true
                    && ($scope$a = this.matchmailbox_list($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.group_list_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchgroup_list_2($$dpth: number, $$cr?: ErrorTracker): Nullable<group_list_2> {
        return this.run<group_list_2>($$dpth,
            () => {
                let $scope$b: Nullable<CFWS>;
                let $$res: Nullable<group_list_2> = null;
                if (true
                    && ($scope$b = this.matchCFWS($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.group_list_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchgroup_list_3($$dpth: number, $$cr?: ErrorTracker): Nullable<group_list_3> {
        return this.run<group_list_3>($$dpth,
            () => {
                let $scope$c: Nullable<obs_group_list>;
                let $$res: Nullable<group_list_3> = null;
                if (true
                    && ($scope$c = this.matchobs_group_list($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new group_list_3($scope$c);
                }
                return $$res;
            });
    }
    public matchaddr_spec($$dpth: number, $$cr?: ErrorTracker): Nullable<addr_spec> {
        return this.memoise(
            () => {
                return this.run<addr_spec>($$dpth,
                    () => {
                        let $scope$a: Nullable<local_part>;
                        let $scope$b: Nullable<string>;
                        let $scope$c: Nullable<domain>;
                        let $$res: Nullable<addr_spec> = null;
                        if (true
                            && ($scope$a = this.matchlocal_part($$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.regexAccept(String.raw`(?:@)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$c = this.matchdomain($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new addr_spec($scope$a, $scope$b, $scope$c);
                        }
                        return $$res;
                    });
            },
            this.$scope$addr_spec$memo,
        );
    }
    public matchlocal_part($$dpth: number, $$cr?: ErrorTracker): Nullable<local_part> {
        return this.memoise(
            () => {
                return this.choice<local_part>([
                    () => this.matchlocal_part_1($$dpth + 1, $$cr),
                    () => this.matchlocal_part_2($$dpth + 1, $$cr),
                    () => this.matchlocal_part_3($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$local_part$memo,
        );
    }
    public matchlocal_part_1($$dpth: number, $$cr?: ErrorTracker): Nullable<local_part_1> {
        return this.run<local_part_1>($$dpth,
            () => {
                let $scope$a: Nullable<dot_atom>;
                let $$res: Nullable<local_part_1> = null;
                if (true
                    && ($scope$a = this.matchdot_atom($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.local_part_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchlocal_part_2($$dpth: number, $$cr?: ErrorTracker): Nullable<local_part_2> {
        return this.run<local_part_2>($$dpth,
            () => {
                let $scope$b: Nullable<quoted_string>;
                let $$res: Nullable<local_part_2> = null;
                if (true
                    && ($scope$b = this.matchquoted_string($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.local_part_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchlocal_part_3($$dpth: number, $$cr?: ErrorTracker): Nullable<local_part_3> {
        return this.run<local_part_3>($$dpth,
            () => {
                let $scope$c: Nullable<obs_local_part>;
                let $$res: Nullable<local_part_3> = null;
                if (true
                    && ($scope$c = this.matchobs_local_part($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new local_part_3($scope$c);
                }
                return $$res;
            });
    }
    public matchdomain($$dpth: number, $$cr?: ErrorTracker): Nullable<domain> {
        return this.memoise(
            () => {
                return this.choice<domain>([
                    () => this.matchdomain_1($$dpth + 1, $$cr),
                    () => this.matchdomain_2($$dpth + 1, $$cr),
                    () => this.matchdomain_3($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$domain$memo,
        );
    }
    public matchdomain_1($$dpth: number, $$cr?: ErrorTracker): Nullable<domain_1> {
        return this.run<domain_1>($$dpth,
            () => {
                let $scope$a: Nullable<dot_atom>;
                let $$res: Nullable<domain_1> = null;
                if (true
                    && ($scope$a = this.matchdot_atom($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.domain_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchdomain_2($$dpth: number, $$cr?: ErrorTracker): Nullable<domain_2> {
        return this.run<domain_2>($$dpth,
            () => {
                let $scope$b: Nullable<domain_literal>;
                let $$res: Nullable<domain_2> = null;
                if (true
                    && ($scope$b = this.matchdomain_literal($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.domain_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchdomain_3($$dpth: number, $$cr?: ErrorTracker): Nullable<domain_3> {
        return this.run<domain_3>($$dpth,
            () => {
                let $scope$c: Nullable<obs_domain>;
                let $$res: Nullable<domain_3> = null;
                if (true
                    && ($scope$c = this.matchobs_domain($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new domain_3($scope$c);
                }
                return $$res;
            });
    }
    public matchdomain_literal($$dpth: number, $$cr?: ErrorTracker): Nullable<domain_literal> {
        return this.memoise(
            () => {
                return this.run<domain_literal>($$dpth,
                    () => {
                        let $scope$a: Nullable<Nullable<CFWS>>;
                        let $scope$b: Nullable<string>;
                        let $scope$c: Nullable<domain_literal_$0[]>;
                        let $scope$d: Nullable<Nullable<FWS>>;
                        let $scope$e: Nullable<string>;
                        let $scope$f: Nullable<Nullable<CFWS>>;
                        let $$res: Nullable<domain_literal> = null;
                        if (true
                            && (($scope$a = this.matchCFWS($$dpth + 1, $$cr)) || true)
                            && ($scope$b = this.regexAccept(String.raw`(?:\[)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$c = this.loop<domain_literal_$0>(() => this.matchdomain_literal_$0($$dpth + 1, $$cr), true)) !== null
                            && (($scope$d = this.matchFWS($$dpth + 1, $$cr)) || true)
                            && ($scope$e = this.regexAccept(String.raw`(?:\])`, $$dpth + 1, $$cr)) !== null
                            && (($scope$f = this.matchCFWS($$dpth + 1, $$cr)) || true)
                        ) {
                            $$res = new domain_literal($scope$a, $scope$b, $scope$c, $scope$d, $scope$e, $scope$f);
                        }
                        return $$res;
                    });
            },
            this.$scope$domain_literal$memo,
        );
    }
    public matchdomain_literal_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<domain_literal_$0> {
        return this.memoise(
            () => {
                return this.run<domain_literal_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<Nullable<FWS>>;
                        let $scope$b: Nullable<dtext>;
                        let $$res: Nullable<domain_literal_$0> = null;
                        if (true
                            && (($scope$a = this.matchFWS($$dpth + 1, $$cr)) || true)
                            && ($scope$b = this.matchdtext($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.domain_literal_$0, a: $scope$a, b: $scope$b};
                        }
                        return $$res;
                    });
            },
            this.$scope$domain_literal_$0$memo,
        );
    }
    public matchdtext($$dpth: number, $$cr?: ErrorTracker): Nullable<dtext> {
        return this.memoise(
            () => {
                return this.choice<dtext>([
                    () => this.matchdtext_1($$dpth + 1, $$cr),
                    () => this.matchdtext_2($$dpth + 1, $$cr),
                    () => this.matchdtext_3($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$dtext$memo,
        );
    }
    public matchdtext_1($$dpth: number, $$cr?: ErrorTracker): Nullable<dtext_1> {
        return this.run<dtext_1>($$dpth,
            () => {
                let $scope$a: Nullable<string>;
                let $$res: Nullable<dtext_1> = null;
                if (true
                    && ($scope$a = this.regexAccept(String.raw`(?:[\x21-\x5a])`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.dtext_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchdtext_2($$dpth: number, $$cr?: ErrorTracker): Nullable<dtext_2> {
        return this.run<dtext_2>($$dpth,
            () => {
                let $scope$b: Nullable<string>;
                let $$res: Nullable<dtext_2> = null;
                if (true
                    && ($scope$b = this.regexAccept(String.raw`(?:[\x5e-\x7e])`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.dtext_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchdtext_3($$dpth: number, $$cr?: ErrorTracker): Nullable<dtext_3> {
        return this.run<dtext_3>($$dpth,
            () => {
                let $scope$c: Nullable<obs_dtext>;
                let $$res: Nullable<dtext_3> = null;
                if (true
                    && ($scope$c = this.matchobs_dtext($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new dtext_3($scope$c);
                }
                return $$res;
            });
    }
    public matchmessage($$dpth: number, $$cr?: ErrorTracker): Nullable<message> {
        return this.memoise(
            () => {
                return this.run<message>($$dpth,
                    () => {
                        let $scope$a: Nullable<message_$0>;
                        let $scope$b: Nullable<Nullable<message_$1>>;
                        let $$res: Nullable<message> = null;
                        if (true
                            && ($scope$a = this.matchmessage_$0($$dpth + 1, $$cr)) !== null
                            && (($scope$b = this.matchmessage_$1($$dpth + 1, $$cr)) || true)
                        ) {
                            $$res = new message($scope$a, $scope$b);
                        }
                        return $$res;
                    });
            },
            this.$scope$message$memo,
        );
    }
    public matchmessage_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<message_$0> {
        return this.memoise(
            () => {
                return this.choice<message_$0>([
                    () => this.matchmessage_$0_1($$dpth + 1, $$cr),
                    () => this.matchmessage_$0_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$message_$0$memo,
        );
    }
    public matchmessage_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<message_$0_1> {
        return this.run<message_$0_1>($$dpth,
            () => {
                let $scope$a: Nullable<fields>;
                let $$res: Nullable<message_$0_1> = null;
                if (true
                    && ($scope$a = this.matchfields($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.message_$0_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchmessage_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<message_$0_2> {
        return this.run<message_$0_2>($$dpth,
            () => {
                let $scope$b: Nullable<obs_fields>;
                let $$res: Nullable<message_$0_2> = null;
                if (true
                    && ($scope$b = this.matchobs_fields($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.message_$0_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchmessage_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<message_$1> {
        return this.memoise(
            () => {
                return this.run<message_$1>($$dpth,
                    () => {
                        let $scope$a: Nullable<CRLF>;
                        let $scope$b: Nullable<body>;
                        let $$res: Nullable<message_$1> = null;
                        if (true
                            && ($scope$a = this.matchCRLF($$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.matchbody($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.message_$1, a: $scope$a, b: $scope$b};
                        }
                        return $$res;
                    });
            },
            this.$scope$message_$1$memo,
        );
    }
    public matchbody($$dpth: number, $$cr?: ErrorTracker): Nullable<body> {
        return this.memoise(
            () => {
                return this.choice<body>([
                    () => this.matchbody_1($$dpth + 1, $$cr),
                    () => this.matchbody_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$body$memo,
        );
    }
    public matchbody_1($$dpth: number, $$cr?: ErrorTracker): Nullable<body_1> {
        return this.run<body_1>($$dpth,
            () => {
                let $scope$a: Nullable<body_$0>;
                let $$res: Nullable<body_1> = null;
                if (true
                    && ($scope$a = this.matchbody_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.body_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchbody_2($$dpth: number, $$cr?: ErrorTracker): Nullable<body_2> {
        return this.run<body_2>($$dpth,
            () => {
                let $scope$b: Nullable<obs_body>;
                let $$res: Nullable<body_2> = null;
                if (true
                    && ($scope$b = this.matchobs_body($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new body_2($scope$b);
                }
                return $$res;
            });
    }
    public matchbody_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<body_$0> {
        return this.memoise(
            () => {
                return this.run<body_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<body_$0_$0[]>;
                        let $scope$b: Nullable<_998text>;
                        let $$res: Nullable<body_$0> = null;
                        if (true
                            && ($scope$a = this.loop<body_$0_$0>(() => this.matchbody_$0_$0($$dpth + 1, $$cr), true)) !== null
                            && ($scope$b = this.match_998text($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.body_$0, a: $scope$a, b: $scope$b};
                        }
                        return $$res;
                    });
            },
            this.$scope$body_$0$memo,
        );
    }
    public matchbody_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<body_$0_$0> {
        return this.memoise(
            () => {
                return this.run<body_$0_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<_998text>;
                        let $scope$b: Nullable<CRLF>;
                        let $$res: Nullable<body_$0_$0> = null;
                        if (true
                            && ($scope$a = this.match_998text($$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.body_$0_$0, a: $scope$a, b: $scope$b};
                        }
                        return $$res;
                    });
            },
            this.$scope$body_$0_$0$memo,
        );
    }
    public matchtext($$dpth: number, $$cr?: ErrorTracker): Nullable<text> {
        return this.memoise(
            () => {
                return this.choice<text>([
                    () => this.matchtext_1($$dpth + 1, $$cr),
                    () => this.matchtext_2($$dpth + 1, $$cr),
                    () => this.matchtext_3($$dpth + 1, $$cr),
                    () => this.matchtext_4($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$text$memo,
        );
    }
    public matchtext_1($$dpth: number, $$cr?: ErrorTracker): Nullable<text_1> {
        return this.run<text_1>($$dpth,
            () => {
                let $scope$a: Nullable<string>;
                let $$res: Nullable<text_1> = null;
                if (true
                    && ($scope$a = this.regexAccept(String.raw`(?:[\x01-\x09])`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.text_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchtext_2($$dpth: number, $$cr?: ErrorTracker): Nullable<text_2> {
        return this.run<text_2>($$dpth,
            () => {
                let $scope$b: Nullable<string>;
                let $$res: Nullable<text_2> = null;
                if (true
                    && ($scope$b = this.regexAccept(String.raw`(?:\x0B)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.text_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchtext_3($$dpth: number, $$cr?: ErrorTracker): Nullable<text_3> {
        return this.run<text_3>($$dpth,
            () => {
                let $scope$c: Nullable<string>;
                let $$res: Nullable<text_3> = null;
                if (true
                    && ($scope$c = this.regexAccept(String.raw`(?:\x0C)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.text_3, c: $scope$c};
                }
                return $$res;
            });
    }
    public matchtext_4($$dpth: number, $$cr?: ErrorTracker): Nullable<text_4> {
        return this.run<text_4>($$dpth,
            () => {
                let $scope$d: Nullable<string>;
                let $$res: Nullable<text_4> = null;
                if (true
                    && ($scope$d = this.regexAccept(String.raw`(?:[\x0E-\x7f])`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new text_4($scope$d);
                }
                return $$res;
            });
    }
    public match_998text($$dpth: number, $$cr?: ErrorTracker): Nullable<_998text> {
        return this.memoise(
            () => {
                return this.run<_998text>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $$res: Nullable<_998text> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:[\x01-\x09\x0B\x0C\x0E-\x7F]{998,})`, $$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new _998text($scope$a);
                        }
                        return $$res;
                    });
            },
            this.$scope$_998text$memo,
        );
    }
    public matchfields($$dpth: number, $$cr?: ErrorTracker): Nullable<fields> {
        return this.memoise(
            () => {
                return this.run<fields>($$dpth,
                    () => {
                        let $scope$a: Nullable<fields_$0[]>;
                        let $scope$b: Nullable<fields_$1[]>;
                        let $$res: Nullable<fields> = null;
                        if (true
                            && ($scope$a = this.loop<fields_$0>(() => this.matchfields_$0($$dpth + 1, $$cr), true)) !== null
                            && ($scope$b = this.loop<fields_$1>(() => this.matchfields_$1($$dpth + 1, $$cr), true)) !== null
                        ) {
                            $$res = new fields($scope$a, $scope$b);
                        }
                        return $$res;
                    });
            },
            this.$scope$fields$memo,
        );
    }
    public matchfields_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<fields_$0> {
        return this.memoise(
            () => {
                return this.choice<fields_$0>([
                    () => this.matchfields_$0_1($$dpth + 1, $$cr),
                    () => this.matchfields_$0_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$fields_$0$memo,
        );
    }
    public matchfields_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<fields_$0_1> {
        return this.run<fields_$0_1>($$dpth,
            () => {
                let $scope$a: Nullable<trace>;
                let $scope$b: Nullable<optional_field[]>;
                let $$res: Nullable<fields_$0_1> = null;
                if (true
                    && ($scope$a = this.matchtrace($$dpth + 1, $$cr)) !== null
                    && ($scope$b = this.loop<optional_field>(() => this.matchoptional_field($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.fields_$0_1, a: $scope$a, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchfields_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<fields_$0_2> {
        return this.run<fields_$0_2>($$dpth,
            () => {
                let $scope$c: Nullable<fields_$0_$0[]>;
                let $$res: Nullable<fields_$0_2> = null;
                if (true
                    && ($scope$c = this.loop<fields_$0_$0>(() => this.matchfields_$0_$0($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.fields_$0_2, c: $scope$c};
                }
                return $$res;
            });
    }
    public matchfields_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<fields_$0_$0> {
        return this.memoise(
            () => {
                return this.choice<fields_$0_$0>([
                    () => this.matchfields_$0_$0_1($$dpth + 1, $$cr),
                    () => this.matchfields_$0_$0_2($$dpth + 1, $$cr),
                    () => this.matchfields_$0_$0_3($$dpth + 1, $$cr),
                    () => this.matchfields_$0_$0_4($$dpth + 1, $$cr),
                    () => this.matchfields_$0_$0_5($$dpth + 1, $$cr),
                    () => this.matchfields_$0_$0_6($$dpth + 1, $$cr),
                    () => this.matchfields_$0_$0_7($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$fields_$0_$0$memo,
        );
    }
    public matchfields_$0_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<fields_$0_$0_1> {
        return this.run<fields_$0_$0_1>($$dpth,
            () => {
                let $scope$a: Nullable<resent_date>;
                let $$res: Nullable<fields_$0_$0_1> = null;
                if (true
                    && ($scope$a = this.matchresent_date($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fields_$0_$0_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchfields_$0_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<fields_$0_$0_2> {
        return this.run<fields_$0_$0_2>($$dpth,
            () => {
                let $scope$b: Nullable<resent_from>;
                let $$res: Nullable<fields_$0_$0_2> = null;
                if (true
                    && ($scope$b = this.matchresent_from($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fields_$0_$0_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchfields_$0_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<fields_$0_$0_3> {
        return this.run<fields_$0_$0_3>($$dpth,
            () => {
                let $scope$c: Nullable<resent_sender>;
                let $$res: Nullable<fields_$0_$0_3> = null;
                if (true
                    && ($scope$c = this.matchresent_sender($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fields_$0_$0_3, c: $scope$c};
                }
                return $$res;
            });
    }
    public matchfields_$0_$0_4($$dpth: number, $$cr?: ErrorTracker): Nullable<fields_$0_$0_4> {
        return this.run<fields_$0_$0_4>($$dpth,
            () => {
                let $scope$d: Nullable<resent_to>;
                let $$res: Nullable<fields_$0_$0_4> = null;
                if (true
                    && ($scope$d = this.matchresent_to($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fields_$0_$0_4, d: $scope$d};
                }
                return $$res;
            });
    }
    public matchfields_$0_$0_5($$dpth: number, $$cr?: ErrorTracker): Nullable<fields_$0_$0_5> {
        return this.run<fields_$0_$0_5>($$dpth,
            () => {
                let $scope$e: Nullable<resent_cc>;
                let $$res: Nullable<fields_$0_$0_5> = null;
                if (true
                    && ($scope$e = this.matchresent_cc($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fields_$0_$0_5, e: $scope$e};
                }
                return $$res;
            });
    }
    public matchfields_$0_$0_6($$dpth: number, $$cr?: ErrorTracker): Nullable<fields_$0_$0_6> {
        return this.run<fields_$0_$0_6>($$dpth,
            () => {
                let $scope$f: Nullable<resent_bcc>;
                let $$res: Nullable<fields_$0_$0_6> = null;
                if (true
                    && ($scope$f = this.matchresent_bcc($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fields_$0_$0_6, f: $scope$f};
                }
                return $$res;
            });
    }
    public matchfields_$0_$0_7($$dpth: number, $$cr?: ErrorTracker): Nullable<fields_$0_$0_7> {
        return this.run<fields_$0_$0_7>($$dpth,
            () => {
                let $scope$g: Nullable<resent_msg_id>;
                let $$res: Nullable<fields_$0_$0_7> = null;
                if (true
                    && ($scope$g = this.matchresent_msg_id($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fields_$0_$0_7, g: $scope$g};
                }
                return $$res;
            });
    }
    public matchfields_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<fields_$1> {
        return this.memoise(
            () => {
                return this.choice<fields_$1>([
                    () => this.matchfields_$1_1($$dpth + 1, $$cr),
                    () => this.matchfields_$1_2($$dpth + 1, $$cr),
                    () => this.matchfields_$1_3($$dpth + 1, $$cr),
                    () => this.matchfields_$1_4($$dpth + 1, $$cr),
                    () => this.matchfields_$1_5($$dpth + 1, $$cr),
                    () => this.matchfields_$1_6($$dpth + 1, $$cr),
                    () => this.matchfields_$1_7($$dpth + 1, $$cr),
                    () => this.matchfields_$1_8($$dpth + 1, $$cr),
                    () => this.matchfields_$1_9($$dpth + 1, $$cr),
                    () => this.matchfields_$1_10($$dpth + 1, $$cr),
                    () => this.matchfields_$1_11($$dpth + 1, $$cr),
                    () => this.matchfields_$1_12($$dpth + 1, $$cr),
                    () => this.matchfields_$1_13($$dpth + 1, $$cr),
                    () => this.matchfields_$1_14($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$fields_$1$memo,
        );
    }
    public matchfields_$1_1($$dpth: number, $$cr?: ErrorTracker): Nullable<fields_$1_1> {
        return this.run<fields_$1_1>($$dpth,
            () => {
                let $scope$a: Nullable<orig_date>;
                let $$res: Nullable<fields_$1_1> = null;
                if (true
                    && ($scope$a = this.matchorig_date($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fields_$1_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchfields_$1_2($$dpth: number, $$cr?: ErrorTracker): Nullable<fields_$1_2> {
        return this.run<fields_$1_2>($$dpth,
            () => {
                let $scope$b: Nullable<from>;
                let $$res: Nullable<fields_$1_2> = null;
                if (true
                    && ($scope$b = this.matchfrom($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fields_$1_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchfields_$1_3($$dpth: number, $$cr?: ErrorTracker): Nullable<fields_$1_3> {
        return this.run<fields_$1_3>($$dpth,
            () => {
                let $scope$c: Nullable<sender>;
                let $$res: Nullable<fields_$1_3> = null;
                if (true
                    && ($scope$c = this.matchsender($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fields_$1_3, c: $scope$c};
                }
                return $$res;
            });
    }
    public matchfields_$1_4($$dpth: number, $$cr?: ErrorTracker): Nullable<fields_$1_4> {
        return this.run<fields_$1_4>($$dpth,
            () => {
                let $scope$d: Nullable<reply_to>;
                let $$res: Nullable<fields_$1_4> = null;
                if (true
                    && ($scope$d = this.matchreply_to($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fields_$1_4, d: $scope$d};
                }
                return $$res;
            });
    }
    public matchfields_$1_5($$dpth: number, $$cr?: ErrorTracker): Nullable<fields_$1_5> {
        return this.run<fields_$1_5>($$dpth,
            () => {
                let $scope$e: Nullable<to>;
                let $$res: Nullable<fields_$1_5> = null;
                if (true
                    && ($scope$e = this.matchto($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fields_$1_5, e: $scope$e};
                }
                return $$res;
            });
    }
    public matchfields_$1_6($$dpth: number, $$cr?: ErrorTracker): Nullable<fields_$1_6> {
        return this.run<fields_$1_6>($$dpth,
            () => {
                let $scope$f: Nullable<cc>;
                let $$res: Nullable<fields_$1_6> = null;
                if (true
                    && ($scope$f = this.matchcc($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fields_$1_6, f: $scope$f};
                }
                return $$res;
            });
    }
    public matchfields_$1_7($$dpth: number, $$cr?: ErrorTracker): Nullable<fields_$1_7> {
        return this.run<fields_$1_7>($$dpth,
            () => {
                let $scope$g: Nullable<bcc>;
                let $$res: Nullable<fields_$1_7> = null;
                if (true
                    && ($scope$g = this.matchbcc($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fields_$1_7, g: $scope$g};
                }
                return $$res;
            });
    }
    public matchfields_$1_8($$dpth: number, $$cr?: ErrorTracker): Nullable<fields_$1_8> {
        return this.run<fields_$1_8>($$dpth,
            () => {
                let $scope$h: Nullable<message_id>;
                let $$res: Nullable<fields_$1_8> = null;
                if (true
                    && ($scope$h = this.matchmessage_id($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fields_$1_8, h: $scope$h};
                }
                return $$res;
            });
    }
    public matchfields_$1_9($$dpth: number, $$cr?: ErrorTracker): Nullable<fields_$1_9> {
        return this.run<fields_$1_9>($$dpth,
            () => {
                let $scope$i: Nullable<in_reply_to>;
                let $$res: Nullable<fields_$1_9> = null;
                if (true
                    && ($scope$i = this.matchin_reply_to($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fields_$1_9, i: $scope$i};
                }
                return $$res;
            });
    }
    public matchfields_$1_10($$dpth: number, $$cr?: ErrorTracker): Nullable<fields_$1_10> {
        return this.run<fields_$1_10>($$dpth,
            () => {
                let $scope$j: Nullable<references>;
                let $$res: Nullable<fields_$1_10> = null;
                if (true
                    && ($scope$j = this.matchreferences($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fields_$1_10, j: $scope$j};
                }
                return $$res;
            });
    }
    public matchfields_$1_11($$dpth: number, $$cr?: ErrorTracker): Nullable<fields_$1_11> {
        return this.run<fields_$1_11>($$dpth,
            () => {
                let $scope$k: Nullable<subject>;
                let $$res: Nullable<fields_$1_11> = null;
                if (true
                    && ($scope$k = this.matchsubject($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fields_$1_11, k: $scope$k};
                }
                return $$res;
            });
    }
    public matchfields_$1_12($$dpth: number, $$cr?: ErrorTracker): Nullable<fields_$1_12> {
        return this.run<fields_$1_12>($$dpth,
            () => {
                let $scope$l: Nullable<comments>;
                let $$res: Nullable<fields_$1_12> = null;
                if (true
                    && ($scope$l = this.matchcomments($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fields_$1_12, l: $scope$l};
                }
                return $$res;
            });
    }
    public matchfields_$1_13($$dpth: number, $$cr?: ErrorTracker): Nullable<fields_$1_13> {
        return this.run<fields_$1_13>($$dpth,
            () => {
                let $scope$m: Nullable<keywords>;
                let $$res: Nullable<fields_$1_13> = null;
                if (true
                    && ($scope$m = this.matchkeywords($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fields_$1_13, m: $scope$m};
                }
                return $$res;
            });
    }
    public matchfields_$1_14($$dpth: number, $$cr?: ErrorTracker): Nullable<fields_$1_14> {
        return this.run<fields_$1_14>($$dpth,
            () => {
                let $scope$n: Nullable<optional_field>;
                let $$res: Nullable<fields_$1_14> = null;
                if (true
                    && ($scope$n = this.matchoptional_field($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.fields_$1_14, n: $scope$n};
                }
                return $$res;
            });
    }
    public matchorig_date($$dpth: number, $$cr?: ErrorTracker): Nullable<orig_date> {
        return this.memoise(
            () => {
                return this.run<orig_date>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<date_time>;
                        let $scope$c: Nullable<CRLF>;
                        let $$res: Nullable<orig_date> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:Date:)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.matchdate_time($$dpth + 1, $$cr)) !== null
                            && ($scope$c = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new orig_date($scope$a, $scope$b, $scope$c);
                        }
                        return $$res;
                    });
            },
            this.$scope$orig_date$memo,
        );
    }
    public matchfrom($$dpth: number, $$cr?: ErrorTracker): Nullable<from> {
        return this.memoise(
            () => {
                return this.run<from>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<mailbox_list>;
                        let $scope$c: Nullable<CRLF>;
                        let $$res: Nullable<from> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:From:)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.matchmailbox_list($$dpth + 1, $$cr)) !== null
                            && ($scope$c = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new from($scope$a, $scope$b, $scope$c);
                        }
                        return $$res;
                    });
            },
            this.$scope$from$memo,
        );
    }
    public matchsender($$dpth: number, $$cr?: ErrorTracker): Nullable<sender> {
        return this.memoise(
            () => {
                return this.run<sender>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<mailbox>;
                        let $scope$c: Nullable<CRLF>;
                        let $$res: Nullable<sender> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:Sender:)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.matchmailbox($$dpth + 1, $$cr)) !== null
                            && ($scope$c = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new sender($scope$a, $scope$b, $scope$c);
                        }
                        return $$res;
                    });
            },
            this.$scope$sender$memo,
        );
    }
    public matchreply_to($$dpth: number, $$cr?: ErrorTracker): Nullable<reply_to> {
        return this.memoise(
            () => {
                return this.run<reply_to>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<address_list>;
                        let $scope$c: Nullable<CRLF>;
                        let $$res: Nullable<reply_to> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:Reply_To:)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.matchaddress_list($$dpth + 1, $$cr)) !== null
                            && ($scope$c = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new reply_to($scope$a, $scope$b, $scope$c);
                        }
                        return $$res;
                    });
            },
            this.$scope$reply_to$memo,
        );
    }
    public matchto($$dpth: number, $$cr?: ErrorTracker): Nullable<to> {
        return this.memoise(
            () => {
                return this.run<to>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<address_list>;
                        let $scope$c: Nullable<CRLF>;
                        let $$res: Nullable<to> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:To:)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.matchaddress_list($$dpth + 1, $$cr)) !== null
                            && ($scope$c = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new to($scope$a, $scope$b, $scope$c);
                        }
                        return $$res;
                    });
            },
            this.$scope$to$memo,
        );
    }
    public matchcc($$dpth: number, $$cr?: ErrorTracker): Nullable<cc> {
        return this.memoise(
            () => {
                return this.run<cc>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<address_list>;
                        let $scope$c: Nullable<CRLF>;
                        let $$res: Nullable<cc> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:Cc:)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.matchaddress_list($$dpth + 1, $$cr)) !== null
                            && ($scope$c = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new cc($scope$a, $scope$b, $scope$c);
                        }
                        return $$res;
                    });
            },
            this.$scope$cc$memo,
        );
    }
    public matchbcc($$dpth: number, $$cr?: ErrorTracker): Nullable<bcc> {
        return this.memoise(
            () => {
                return this.run<bcc>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<Nullable<bcc_$0>>;
                        let $scope$c: Nullable<CRLF>;
                        let $$res: Nullable<bcc> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:Bcc:)`, $$dpth + 1, $$cr)) !== null
                            && (($scope$b = this.matchbcc_$0($$dpth + 1, $$cr)) || true)
                            && ($scope$c = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new bcc($scope$a, $scope$b, $scope$c);
                        }
                        return $$res;
                    });
            },
            this.$scope$bcc$memo,
        );
    }
    public matchbcc_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<bcc_$0> {
        return this.memoise(
            () => {
                return this.choice<bcc_$0>([
                    () => this.matchbcc_$0_1($$dpth + 1, $$cr),
                    () => this.matchbcc_$0_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$bcc_$0$memo,
        );
    }
    public matchbcc_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<bcc_$0_1> {
        return this.run<bcc_$0_1>($$dpth,
            () => {
                let $scope$a: Nullable<address_list>;
                let $$res: Nullable<bcc_$0_1> = null;
                if (true
                    && ($scope$a = this.matchaddress_list($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.bcc_$0_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchbcc_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<bcc_$0_2> {
        return this.run<bcc_$0_2>($$dpth,
            () => {
                let $scope$b: Nullable<CFWS>;
                let $$res: Nullable<bcc_$0_2> = null;
                if (true
                    && ($scope$b = this.matchCFWS($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.bcc_$0_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchmessage_id($$dpth: number, $$cr?: ErrorTracker): Nullable<message_id> {
        return this.memoise(
            () => {
                return this.run<message_id>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<msg_id>;
                        let $scope$c: Nullable<CRLF>;
                        let $$res: Nullable<message_id> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:Message-ID:)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.matchmsg_id($$dpth + 1, $$cr)) !== null
                            && ($scope$c = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new message_id($scope$a, $scope$b, $scope$c);
                        }
                        return $$res;
                    });
            },
            this.$scope$message_id$memo,
        );
    }
    public matchin_reply_to($$dpth: number, $$cr?: ErrorTracker): Nullable<in_reply_to> {
        return this.memoise(
            () => {
                return this.run<in_reply_to>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<msg_id[]>;
                        let $scope$c: Nullable<CRLF>;
                        let $$res: Nullable<in_reply_to> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:In-Reply-To:)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<msg_id>(() => this.matchmsg_id($$dpth + 1, $$cr), false)) !== null
                            && ($scope$c = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new in_reply_to($scope$a, $scope$b, $scope$c);
                        }
                        return $$res;
                    });
            },
            this.$scope$in_reply_to$memo,
        );
    }
    public matchreferences($$dpth: number, $$cr?: ErrorTracker): Nullable<references> {
        return this.memoise(
            () => {
                return this.run<references>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<msg_id[]>;
                        let $scope$c: Nullable<CRLF>;
                        let $$res: Nullable<references> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:References:)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<msg_id>(() => this.matchmsg_id($$dpth + 1, $$cr), false)) !== null
                            && ($scope$c = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new references($scope$a, $scope$b, $scope$c);
                        }
                        return $$res;
                    });
            },
            this.$scope$references$memo,
        );
    }
    public matchmsg_id($$dpth: number, $$cr?: ErrorTracker): Nullable<msg_id> {
        return this.memoise(
            () => {
                return this.run<msg_id>($$dpth,
                    () => {
                        let $scope$a: Nullable<Nullable<CFWS>>;
                        let $scope$b: Nullable<string>;
                        let $scope$c: Nullable<id_left>;
                        let $scope$d: Nullable<string>;
                        let $scope$e: Nullable<id_right>;
                        let $scope$f: Nullable<string>;
                        let $scope$g: Nullable<Nullable<CFWS>>;
                        let $$res: Nullable<msg_id> = null;
                        if (true
                            && (($scope$a = this.matchCFWS($$dpth + 1, $$cr)) || true)
                            && ($scope$b = this.regexAccept(String.raw`(?:<)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$c = this.matchid_left($$dpth + 1, $$cr)) !== null
                            && ($scope$d = this.regexAccept(String.raw`(?:@)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$e = this.matchid_right($$dpth + 1, $$cr)) !== null
                            && ($scope$f = this.regexAccept(String.raw`(?:>)`, $$dpth + 1, $$cr)) !== null
                            && (($scope$g = this.matchCFWS($$dpth + 1, $$cr)) || true)
                        ) {
                            $$res = new msg_id($scope$a, $scope$b, $scope$c, $scope$d, $scope$e, $scope$f, $scope$g);
                        }
                        return $$res;
                    });
            },
            this.$scope$msg_id$memo,
        );
    }
    public matchid_left($$dpth: number, $$cr?: ErrorTracker): Nullable<id_left> {
        return this.memoise(
            () => {
                return this.choice<id_left>([
                    () => this.matchid_left_1($$dpth + 1, $$cr),
                    () => this.matchid_left_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$id_left$memo,
        );
    }
    public matchid_left_1($$dpth: number, $$cr?: ErrorTracker): Nullable<id_left_1> {
        return this.run<id_left_1>($$dpth,
            () => {
                let $scope$a: Nullable<dot_atom_text>;
                let $$res: Nullable<id_left_1> = null;
                if (true
                    && ($scope$a = this.matchdot_atom_text($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.id_left_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchid_left_2($$dpth: number, $$cr?: ErrorTracker): Nullable<id_left_2> {
        return this.run<id_left_2>($$dpth,
            () => {
                let $scope$b: Nullable<obs_id_left>;
                let $$res: Nullable<id_left_2> = null;
                if (true
                    && ($scope$b = this.matchobs_id_left($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new id_left_2($scope$b);
                }
                return $$res;
            });
    }
    public matchid_right($$dpth: number, $$cr?: ErrorTracker): Nullable<id_right> {
        return this.memoise(
            () => {
                return this.choice<id_right>([
                    () => this.matchid_right_1($$dpth + 1, $$cr),
                    () => this.matchid_right_2($$dpth + 1, $$cr),
                    () => this.matchid_right_3($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$id_right$memo,
        );
    }
    public matchid_right_1($$dpth: number, $$cr?: ErrorTracker): Nullable<id_right_1> {
        return this.run<id_right_1>($$dpth,
            () => {
                let $scope$a: Nullable<dot_atom_text>;
                let $$res: Nullable<id_right_1> = null;
                if (true
                    && ($scope$a = this.matchdot_atom_text($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.id_right_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchid_right_2($$dpth: number, $$cr?: ErrorTracker): Nullable<id_right_2> {
        return this.run<id_right_2>($$dpth,
            () => {
                let $scope$b: Nullable<no_fold_literal>;
                let $$res: Nullable<id_right_2> = null;
                if (true
                    && ($scope$b = this.matchno_fold_literal($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.id_right_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchid_right_3($$dpth: number, $$cr?: ErrorTracker): Nullable<id_right_3> {
        return this.run<id_right_3>($$dpth,
            () => {
                let $scope$c: Nullable<obs_id_right>;
                let $$res: Nullable<id_right_3> = null;
                if (true
                    && ($scope$c = this.matchobs_id_right($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new id_right_3($scope$c);
                }
                return $$res;
            });
    }
    public matchno_fold_literal($$dpth: number, $$cr?: ErrorTracker): Nullable<no_fold_literal> {
        return this.memoise(
            () => {
                return this.run<no_fold_literal>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<dtext[]>;
                        let $scope$c: Nullable<string>;
                        let $$res: Nullable<no_fold_literal> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:\[)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<dtext>(() => this.matchdtext($$dpth + 1, $$cr), true)) !== null
                            && ($scope$c = this.regexAccept(String.raw`(?:\])`, $$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new no_fold_literal($scope$a, $scope$b, $scope$c);
                        }
                        return $$res;
                    });
            },
            this.$scope$no_fold_literal$memo,
        );
    }
    public matchsubject($$dpth: number, $$cr?: ErrorTracker): Nullable<subject> {
        return this.memoise(
            () => {
                return this.run<subject>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<unstructured>;
                        let $scope$c: Nullable<CRLF>;
                        let $$res: Nullable<subject> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:Subject:)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.matchunstructured($$dpth + 1, $$cr)) !== null
                            && ($scope$c = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new subject($scope$a, $scope$b, $scope$c);
                        }
                        return $$res;
                    });
            },
            this.$scope$subject$memo,
        );
    }
    public matchcomments($$dpth: number, $$cr?: ErrorTracker): Nullable<comments> {
        return this.memoise(
            () => {
                return this.run<comments>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<unstructured>;
                        let $scope$c: Nullable<CRLF>;
                        let $$res: Nullable<comments> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:Comments:)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.matchunstructured($$dpth + 1, $$cr)) !== null
                            && ($scope$c = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new comments($scope$a, $scope$b, $scope$c);
                        }
                        return $$res;
                    });
            },
            this.$scope$comments$memo,
        );
    }
    public matchkeywords($$dpth: number, $$cr?: ErrorTracker): Nullable<keywords> {
        return this.memoise(
            () => {
                return this.run<keywords>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<phrase>;
                        let $scope$c: Nullable<keywords_$0[]>;
                        let $scope$d: Nullable<CRLF>;
                        let $$res: Nullable<keywords> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:Keywords:)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.matchphrase($$dpth + 1, $$cr)) !== null
                            && ($scope$c = this.loop<keywords_$0>(() => this.matchkeywords_$0($$dpth + 1, $$cr), true)) !== null
                            && ($scope$d = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new keywords($scope$a, $scope$b, $scope$c, $scope$d);
                        }
                        return $$res;
                    });
            },
            this.$scope$keywords$memo,
        );
    }
    public matchkeywords_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<keywords_$0> {
        return this.memoise(
            () => {
                return this.run<keywords_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<phrase>;
                        let $$res: Nullable<keywords_$0> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.matchphrase($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.keywords_$0, a: $scope$a, b: $scope$b};
                        }
                        return $$res;
                    });
            },
            this.$scope$keywords_$0$memo,
        );
    }
    public matchresent_date($$dpth: number, $$cr?: ErrorTracker): Nullable<resent_date> {
        return this.memoise(
            () => {
                return this.run<resent_date>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<date_time>;
                        let $scope$c: Nullable<CRLF>;
                        let $$res: Nullable<resent_date> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:Resent-Date:)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.matchdate_time($$dpth + 1, $$cr)) !== null
                            && ($scope$c = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new resent_date($scope$a, $scope$b, $scope$c);
                        }
                        return $$res;
                    });
            },
            this.$scope$resent_date$memo,
        );
    }
    public matchresent_from($$dpth: number, $$cr?: ErrorTracker): Nullable<resent_from> {
        return this.memoise(
            () => {
                return this.run<resent_from>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<mailbox_list>;
                        let $scope$c: Nullable<CRLF>;
                        let $$res: Nullable<resent_from> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:Resent-From:)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.matchmailbox_list($$dpth + 1, $$cr)) !== null
                            && ($scope$c = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new resent_from($scope$a, $scope$b, $scope$c);
                        }
                        return $$res;
                    });
            },
            this.$scope$resent_from$memo,
        );
    }
    public matchresent_sender($$dpth: number, $$cr?: ErrorTracker): Nullable<resent_sender> {
        return this.memoise(
            () => {
                return this.run<resent_sender>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<mailbox>;
                        let $scope$c: Nullable<CRLF>;
                        let $$res: Nullable<resent_sender> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:Resent-Sender:)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.matchmailbox($$dpth + 1, $$cr)) !== null
                            && ($scope$c = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new resent_sender($scope$a, $scope$b, $scope$c);
                        }
                        return $$res;
                    });
            },
            this.$scope$resent_sender$memo,
        );
    }
    public matchresent_to($$dpth: number, $$cr?: ErrorTracker): Nullable<resent_to> {
        return this.memoise(
            () => {
                return this.run<resent_to>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<address_list>;
                        let $scope$c: Nullable<CRLF>;
                        let $$res: Nullable<resent_to> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:Resent-To:)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.matchaddress_list($$dpth + 1, $$cr)) !== null
                            && ($scope$c = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new resent_to($scope$a, $scope$b, $scope$c);
                        }
                        return $$res;
                    });
            },
            this.$scope$resent_to$memo,
        );
    }
    public matchresent_cc($$dpth: number, $$cr?: ErrorTracker): Nullable<resent_cc> {
        return this.memoise(
            () => {
                return this.run<resent_cc>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<address_list>;
                        let $scope$c: Nullable<CRLF>;
                        let $$res: Nullable<resent_cc> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:Resent-Cc:)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.matchaddress_list($$dpth + 1, $$cr)) !== null
                            && ($scope$c = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new resent_cc($scope$a, $scope$b, $scope$c);
                        }
                        return $$res;
                    });
            },
            this.$scope$resent_cc$memo,
        );
    }
    public matchresent_bcc($$dpth: number, $$cr?: ErrorTracker): Nullable<resent_bcc> {
        return this.memoise(
            () => {
                return this.run<resent_bcc>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<Nullable<resent_bcc_$0>>;
                        let $scope$c: Nullable<CRLF>;
                        let $$res: Nullable<resent_bcc> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:Resent-Bcc:)`, $$dpth + 1, $$cr)) !== null
                            && (($scope$b = this.matchresent_bcc_$0($$dpth + 1, $$cr)) || true)
                            && ($scope$c = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new resent_bcc($scope$a, $scope$b, $scope$c);
                        }
                        return $$res;
                    });
            },
            this.$scope$resent_bcc$memo,
        );
    }
    public matchresent_bcc_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<resent_bcc_$0> {
        return this.memoise(
            () => {
                return this.choice<resent_bcc_$0>([
                    () => this.matchresent_bcc_$0_1($$dpth + 1, $$cr),
                    () => this.matchresent_bcc_$0_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$resent_bcc_$0$memo,
        );
    }
    public matchresent_bcc_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<resent_bcc_$0_1> {
        return this.run<resent_bcc_$0_1>($$dpth,
            () => {
                let $scope$a: Nullable<address_list>;
                let $$res: Nullable<resent_bcc_$0_1> = null;
                if (true
                    && ($scope$a = this.matchaddress_list($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.resent_bcc_$0_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchresent_bcc_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<resent_bcc_$0_2> {
        return this.run<resent_bcc_$0_2>($$dpth,
            () => {
                let $scope$b: Nullable<CFWS>;
                let $$res: Nullable<resent_bcc_$0_2> = null;
                if (true
                    && ($scope$b = this.matchCFWS($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.resent_bcc_$0_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchresent_msg_id($$dpth: number, $$cr?: ErrorTracker): Nullable<resent_msg_id> {
        return this.memoise(
            () => {
                return this.run<resent_msg_id>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<msg_id>;
                        let $scope$c: Nullable<CRLF>;
                        let $$res: Nullable<resent_msg_id> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:Resent-Message_ID:)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.matchmsg_id($$dpth + 1, $$cr)) !== null
                            && ($scope$c = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new resent_msg_id($scope$a, $scope$b, $scope$c);
                        }
                        return $$res;
                    });
            },
            this.$scope$resent_msg_id$memo,
        );
    }
    public matchtrace($$dpth: number, $$cr?: ErrorTracker): Nullable<trace> {
        return this.memoise(
            () => {
                return this.run<trace>($$dpth,
                    () => {
                        let $scope$a: Nullable<Nullable<return_path>>;
                        let $scope$b: Nullable<received[]>;
                        let $$res: Nullable<trace> = null;
                        if (true
                            && (($scope$a = this.matchreturn_path($$dpth + 1, $$cr)) || true)
                            && ($scope$b = this.loop<received>(() => this.matchreceived($$dpth + 1, $$cr), false)) !== null
                        ) {
                            $$res = new trace($scope$a, $scope$b);
                        }
                        return $$res;
                    });
            },
            this.$scope$trace$memo,
        );
    }
    public matchreturn_path($$dpth: number, $$cr?: ErrorTracker): Nullable<return_path> {
        return this.memoise(
            () => {
                return this.run<return_path>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<path>;
                        let $scope$c: Nullable<CRLF>;
                        let $$res: Nullable<return_path> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:Return-Path:)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.matchpath($$dpth + 1, $$cr)) !== null
                            && ($scope$c = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new return_path($scope$a, $scope$b, $scope$c);
                        }
                        return $$res;
                    });
            },
            this.$scope$return_path$memo,
        );
    }
    public matchpath($$dpth: number, $$cr?: ErrorTracker): Nullable<path> {
        return this.memoise(
            () => {
                return this.choice<path>([
                    () => this.matchpath_1($$dpth + 1, $$cr),
                    () => this.matchpath_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$path$memo,
        );
    }
    public matchpath_1($$dpth: number, $$cr?: ErrorTracker): Nullable<path_1> {
        return this.run<path_1>($$dpth,
            () => {
                let $scope$a: Nullable<angle_addr>;
                let $$res: Nullable<path_1> = null;
                if (true
                    && ($scope$a = this.matchangle_addr($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.path_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchpath_2($$dpth: number, $$cr?: ErrorTracker): Nullable<path_2> {
        return this.run<path_2>($$dpth,
            () => {
                let $scope$b: Nullable<path_$0>;
                let $$res: Nullable<path_2> = null;
                if (true
                    && ($scope$b = this.matchpath_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new path_2($scope$b);
                }
                return $$res;
            });
    }
    public matchpath_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<path_$0> {
        return this.memoise(
            () => {
                return this.run<path_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<Nullable<CFWS>>;
                        let $scope$b: Nullable<string>;
                        let $scope$c: Nullable<CFWS>;
                        let $scope$d: Nullable<string>;
                        let $scope$e: Nullable<Nullable<CFWS>>;
                        let $$res: Nullable<path_$0> = null;
                        if (true
                            && (($scope$a = this.matchCFWS($$dpth + 1, $$cr)) || true)
                            && ($scope$b = this.regexAccept(String.raw`(?:<)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$c = this.matchCFWS($$dpth + 1, $$cr)) !== null
                            && ($scope$d = this.regexAccept(String.raw`(?:>)`, $$dpth + 1, $$cr)) !== null
                            && (($scope$e = this.matchCFWS($$dpth + 1, $$cr)) || true)
                        ) {
                            $$res = {kind: ASTKinds.path_$0, a: $scope$a, b: $scope$b, c: $scope$c, d: $scope$d, e: $scope$e};
                        }
                        return $$res;
                    });
            },
            this.$scope$path_$0$memo,
        );
    }
    public matchreceived($$dpth: number, $$cr?: ErrorTracker): Nullable<received> {
        return this.memoise(
            () => {
                return this.run<received>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<received_token[]>;
                        let $scope$c: Nullable<string>;
                        let $scope$d: Nullable<date_time>;
                        let $scope$e: Nullable<CRLF>;
                        let $$res: Nullable<received> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:Received:)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<received_token>(() => this.matchreceived_token($$dpth + 1, $$cr), true)) !== null
                            && ($scope$c = this.regexAccept(String.raw`(?:;)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$d = this.matchdate_time($$dpth + 1, $$cr)) !== null
                            && ($scope$e = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new received($scope$a, $scope$b, $scope$c, $scope$d, $scope$e);
                        }
                        return $$res;
                    });
            },
            this.$scope$received$memo,
        );
    }
    public matchreceived_token($$dpth: number, $$cr?: ErrorTracker): Nullable<received_token> {
        return this.memoise(
            () => {
                return this.choice<received_token>([
                    () => this.matchreceived_token_1($$dpth + 1, $$cr),
                    () => this.matchreceived_token_2($$dpth + 1, $$cr),
                    () => this.matchreceived_token_3($$dpth + 1, $$cr),
                    () => this.matchreceived_token_4($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$received_token$memo,
        );
    }
    public matchreceived_token_1($$dpth: number, $$cr?: ErrorTracker): Nullable<received_token_1> {
        return this.run<received_token_1>($$dpth,
            () => {
                let $scope$a: Nullable<word>;
                let $$res: Nullable<received_token_1> = null;
                if (true
                    && ($scope$a = this.matchword($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.received_token_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchreceived_token_2($$dpth: number, $$cr?: ErrorTracker): Nullable<received_token_2> {
        return this.run<received_token_2>($$dpth,
            () => {
                let $scope$b: Nullable<angle_addr>;
                let $$res: Nullable<received_token_2> = null;
                if (true
                    && ($scope$b = this.matchangle_addr($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.received_token_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchreceived_token_3($$dpth: number, $$cr?: ErrorTracker): Nullable<received_token_3> {
        return this.run<received_token_3>($$dpth,
            () => {
                let $scope$c: Nullable<addr_spec>;
                let $$res: Nullable<received_token_3> = null;
                if (true
                    && ($scope$c = this.matchaddr_spec($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.received_token_3, c: $scope$c};
                }
                return $$res;
            });
    }
    public matchreceived_token_4($$dpth: number, $$cr?: ErrorTracker): Nullable<received_token_4> {
        return this.run<received_token_4>($$dpth,
            () => {
                let $scope$d: Nullable<domain>;
                let $$res: Nullable<received_token_4> = null;
                if (true
                    && ($scope$d = this.matchdomain($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new received_token_4($scope$d);
                }
                return $$res;
            });
    }
    public matchoptional_field($$dpth: number, $$cr?: ErrorTracker): Nullable<optional_field> {
        return this.memoise(
            () => {
                return this.run<optional_field>($$dpth,
                    () => {
                        let $scope$a: Nullable<field_name>;
                        let $scope$b: Nullable<string>;
                        let $scope$c: Nullable<unstructured>;
                        let $scope$d: Nullable<CRLF>;
                        let $$res: Nullable<optional_field> = null;
                        if (true
                            && ($scope$a = this.matchfield_name($$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$c = this.matchunstructured($$dpth + 1, $$cr)) !== null
                            && ($scope$d = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new optional_field($scope$a, $scope$b, $scope$c, $scope$d);
                        }
                        return $$res;
                    });
            },
            this.$scope$optional_field$memo,
        );
    }
    public matchfield_name($$dpth: number, $$cr?: ErrorTracker): Nullable<field_name> {
        return this.memoise(
            () => {
                return this.run<field_name>($$dpth,
                    () => {
                        let $scope$a: Nullable<ftext[]>;
                        let $$res: Nullable<field_name> = null;
                        if (true
                            && ($scope$a = this.loop<ftext>(() => this.matchftext($$dpth + 1, $$cr), false)) !== null
                        ) {
                            $$res = new field_name($scope$a);
                        }
                        return $$res;
                    });
            },
            this.$scope$field_name$memo,
        );
    }
    public matchftext($$dpth: number, $$cr?: ErrorTracker): Nullable<ftext> {
        return this.memoise(
            () => {
                return this.choice<ftext>([
                    () => this.matchftext_1($$dpth + 1, $$cr),
                    () => this.matchftext_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$ftext$memo,
        );
    }
    public matchftext_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ftext_1> {
        return this.run<ftext_1>($$dpth,
            () => {
                let $scope$a: Nullable<string>;
                let $$res: Nullable<ftext_1> = null;
                if (true
                    && ($scope$a = this.regexAccept(String.raw`(?:[\x21-\x39])`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ftext_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchftext_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ftext_2> {
        return this.run<ftext_2>($$dpth,
            () => {
                let $scope$b: Nullable<string>;
                let $$res: Nullable<ftext_2> = null;
                if (true
                    && ($scope$b = this.regexAccept(String.raw`(?:[\x3b-\x7e])`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new ftext_2($scope$b);
                }
                return $$res;
            });
    }
    public matchobs_NO_WS_CTL($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_NO_WS_CTL> {
        return this.memoise(
            () => {
                return this.choice<obs_NO_WS_CTL>([
                    () => this.matchobs_NO_WS_CTL_1($$dpth + 1, $$cr),
                    () => this.matchobs_NO_WS_CTL_2($$dpth + 1, $$cr),
                    () => this.matchobs_NO_WS_CTL_3($$dpth + 1, $$cr),
                    () => this.matchobs_NO_WS_CTL_4($$dpth + 1, $$cr),
                    () => this.matchobs_NO_WS_CTL_5($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$obs_NO_WS_CTL$memo,
        );
    }
    public matchobs_NO_WS_CTL_1($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_NO_WS_CTL_1> {
        return this.run<obs_NO_WS_CTL_1>($$dpth,
            () => {
                let $scope$a: Nullable<string>;
                let $$res: Nullable<obs_NO_WS_CTL_1> = null;
                if (true
                    && ($scope$a = this.regexAccept(String.raw`(?:[\x01-\x08])`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_NO_WS_CTL_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchobs_NO_WS_CTL_2($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_NO_WS_CTL_2> {
        return this.run<obs_NO_WS_CTL_2>($$dpth,
            () => {
                let $scope$b: Nullable<string>;
                let $$res: Nullable<obs_NO_WS_CTL_2> = null;
                if (true
                    && ($scope$b = this.regexAccept(String.raw`(?:\x0B)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_NO_WS_CTL_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchobs_NO_WS_CTL_3($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_NO_WS_CTL_3> {
        return this.run<obs_NO_WS_CTL_3>($$dpth,
            () => {
                let $scope$c: Nullable<string>;
                let $$res: Nullable<obs_NO_WS_CTL_3> = null;
                if (true
                    && ($scope$c = this.regexAccept(String.raw`(?:\x0C)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_NO_WS_CTL_3, c: $scope$c};
                }
                return $$res;
            });
    }
    public matchobs_NO_WS_CTL_4($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_NO_WS_CTL_4> {
        return this.run<obs_NO_WS_CTL_4>($$dpth,
            () => {
                let $scope$d: Nullable<string>;
                let $$res: Nullable<obs_NO_WS_CTL_4> = null;
                if (true
                    && ($scope$d = this.regexAccept(String.raw`(?:[\x0E-\x1F])`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_NO_WS_CTL_4, d: $scope$d};
                }
                return $$res;
            });
    }
    public matchobs_NO_WS_CTL_5($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_NO_WS_CTL_5> {
        return this.run<obs_NO_WS_CTL_5>($$dpth,
            () => {
                let $scope$e: Nullable<string>;
                let $$res: Nullable<obs_NO_WS_CTL_5> = null;
                if (true
                    && ($scope$e = this.regexAccept(String.raw`(?:\x7F)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new obs_NO_WS_CTL_5($scope$e);
                }
                return $$res;
            });
    }
    public matchobs_ctext($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_ctext> {
        return this.memoise(
            () => {
                return this.run<obs_ctext>($$dpth,
                    () => {
                        let $scope$a: Nullable<obs_NO_WS_CTL>;
                        let $$res: Nullable<obs_ctext> = null;
                        if (true
                            && ($scope$a = this.matchobs_NO_WS_CTL($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new obs_ctext($scope$a);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_ctext$memo,
        );
    }
    public matchobs_qtext($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_qtext> {
        return this.memoise(
            () => {
                return this.run<obs_qtext>($$dpth,
                    () => {
                        let $scope$a: Nullable<obs_NO_WS_CTL>;
                        let $$res: Nullable<obs_qtext> = null;
                        if (true
                            && ($scope$a = this.matchobs_NO_WS_CTL($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new obs_qtext($scope$a);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_qtext$memo,
        );
    }
    public matchobs_utext($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_utext> {
        return this.memoise(
            () => {
                return this.choice<obs_utext>([
                    () => this.matchobs_utext_1($$dpth + 1, $$cr),
                    () => this.matchobs_utext_2($$dpth + 1, $$cr),
                    () => this.matchobs_utext_3($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$obs_utext$memo,
        );
    }
    public matchobs_utext_1($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_utext_1> {
        return this.run<obs_utext_1>($$dpth,
            () => {
                let $scope$a: Nullable<string>;
                let $$res: Nullable<obs_utext_1> = null;
                if (true
                    && ($scope$a = this.regexAccept(String.raw`(?:\x00)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_utext_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchobs_utext_2($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_utext_2> {
        return this.run<obs_utext_2>($$dpth,
            () => {
                let $scope$b: Nullable<obs_NO_WS_CTL>;
                let $$res: Nullable<obs_utext_2> = null;
                if (true
                    && ($scope$b = this.matchobs_NO_WS_CTL($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_utext_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchobs_utext_3($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_utext_3> {
        return this.run<obs_utext_3>($$dpth,
            () => {
                let $scope$c: Nullable<VCHAR>;
                let $$res: Nullable<obs_utext_3> = null;
                if (true
                    && ($scope$c = this.matchVCHAR($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new obs_utext_3($scope$c);
                }
                return $$res;
            });
    }
    public matchobs_qp($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_qp> {
        return this.memoise(
            () => {
                return this.run<obs_qp>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<obs_qp_$0>;
                        let $$res: Nullable<obs_qp> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:\\)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.matchobs_qp_$0($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new obs_qp($scope$a, $scope$b);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_qp$memo,
        );
    }
    public matchobs_qp_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_qp_$0> {
        return this.memoise(
            () => {
                return this.choice<obs_qp_$0>([
                    () => this.matchobs_qp_$0_1($$dpth + 1, $$cr),
                    () => this.matchobs_qp_$0_2($$dpth + 1, $$cr),
                    () => this.matchobs_qp_$0_3($$dpth + 1, $$cr),
                    () => this.matchobs_qp_$0_4($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$obs_qp_$0$memo,
        );
    }
    public matchobs_qp_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_qp_$0_1> {
        return this.run<obs_qp_$0_1>($$dpth,
            () => {
                let $scope$a: Nullable<string>;
                let $$res: Nullable<obs_qp_$0_1> = null;
                if (true
                    && ($scope$a = this.regexAccept(String.raw`(?:\x00)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_qp_$0_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchobs_qp_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_qp_$0_2> {
        return this.run<obs_qp_$0_2>($$dpth,
            () => {
                let $scope$b: Nullable<obs_NO_WS_CTL>;
                let $$res: Nullable<obs_qp_$0_2> = null;
                if (true
                    && ($scope$b = this.matchobs_NO_WS_CTL($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_qp_$0_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchobs_qp_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_qp_$0_3> {
        return this.run<obs_qp_$0_3>($$dpth,
            () => {
                let $scope$c: Nullable<LF>;
                let $$res: Nullable<obs_qp_$0_3> = null;
                if (true
                    && ($scope$c = this.matchLF($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_qp_$0_3, c: $scope$c};
                }
                return $$res;
            });
    }
    public matchobs_qp_$0_4($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_qp_$0_4> {
        return this.run<obs_qp_$0_4>($$dpth,
            () => {
                let $scope$d: Nullable<CR>;
                let $$res: Nullable<obs_qp_$0_4> = null;
                if (true
                    && ($scope$d = this.matchCR($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_qp_$0_4, d: $scope$d};
                }
                return $$res;
            });
    }
    public matchobs_body($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_body> {
        return this.memoise(
            () => {
                return this.run<obs_body>($$dpth,
                    () => {
                        let $scope$a: Nullable<obs_body_$0[]>;
                        let $$res: Nullable<obs_body> = null;
                        if (true
                            && ($scope$a = this.loop<obs_body_$0>(() => this.matchobs_body_$0($$dpth + 1, $$cr), true)) !== null
                        ) {
                            $$res = new obs_body($scope$a);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_body$memo,
        );
    }
    public matchobs_body_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_body_$0> {
        return this.memoise(
            () => {
                return this.choice<obs_body_$0>([
                    () => this.matchobs_body_$0_1($$dpth + 1, $$cr),
                    () => this.matchobs_body_$0_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$obs_body_$0$memo,
        );
    }
    public matchobs_body_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_body_$0_1> {
        return this.run<obs_body_$0_1>($$dpth,
            () => {
                let $scope$a: Nullable<obs_body_$0_$0>;
                let $$res: Nullable<obs_body_$0_1> = null;
                if (true
                    && ($scope$a = this.matchobs_body_$0_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_body_$0_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchobs_body_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_body_$0_2> {
        return this.run<obs_body_$0_2>($$dpth,
            () => {
                let $scope$b: Nullable<CRLF>;
                let $$res: Nullable<obs_body_$0_2> = null;
                if (true
                    && ($scope$b = this.matchCRLF($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_body_$0_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchobs_body_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_body_$0_$0> {
        return this.memoise(
            () => {
                return this.run<obs_body_$0_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<LF[]>;
                        let $scope$b: Nullable<CR[]>;
                        let $scope$c: Nullable<obs_body_$0_$0_$0[]>;
                        let $$res: Nullable<obs_body_$0_$0> = null;
                        if (true
                            && ($scope$a = this.loop<LF>(() => this.matchLF($$dpth + 1, $$cr), true)) !== null
                            && ($scope$b = this.loop<CR>(() => this.matchCR($$dpth + 1, $$cr), true)) !== null
                            && ($scope$c = this.loop<obs_body_$0_$0_$0>(() => this.matchobs_body_$0_$0_$0($$dpth + 1, $$cr), true)) !== null
                        ) {
                            $$res = {kind: ASTKinds.obs_body_$0_$0, a: $scope$a, b: $scope$b, c: $scope$c};
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_body_$0_$0$memo,
        );
    }
    public matchobs_body_$0_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_body_$0_$0_$0> {
        return this.memoise(
            () => {
                return this.run<obs_body_$0_$0_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<obs_body_$0_$0_$0_$0>;
                        let $scope$b: Nullable<LF[]>;
                        let $scope$c: Nullable<CR[]>;
                        let $$res: Nullable<obs_body_$0_$0_$0> = null;
                        if (true
                            && ($scope$a = this.matchobs_body_$0_$0_$0_$0($$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<LF>(() => this.matchLF($$dpth + 1, $$cr), true)) !== null
                            && ($scope$c = this.loop<CR>(() => this.matchCR($$dpth + 1, $$cr), true)) !== null
                        ) {
                            $$res = {kind: ASTKinds.obs_body_$0_$0_$0, a: $scope$a, b: $scope$b, c: $scope$c};
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_body_$0_$0_$0$memo,
        );
    }
    public matchobs_body_$0_$0_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_body_$0_$0_$0_$0> {
        return this.memoise(
            () => {
                return this.choice<obs_body_$0_$0_$0_$0>([
                    () => this.matchobs_body_$0_$0_$0_$0_1($$dpth + 1, $$cr),
                    () => this.matchobs_body_$0_$0_$0_$0_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$obs_body_$0_$0_$0_$0$memo,
        );
    }
    public matchobs_body_$0_$0_$0_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_body_$0_$0_$0_$0_1> {
        return this.run<obs_body_$0_$0_$0_$0_1>($$dpth,
            () => {
                let $scope$a: Nullable<string>;
                let $$res: Nullable<obs_body_$0_$0_$0_$0_1> = null;
                if (true
                    && ($scope$a = this.regexAccept(String.raw`(?:\x00)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_body_$0_$0_$0_$0_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchobs_body_$0_$0_$0_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_body_$0_$0_$0_$0_2> {
        return this.run<obs_body_$0_$0_$0_$0_2>($$dpth,
            () => {
                let $scope$b: Nullable<text>;
                let $$res: Nullable<obs_body_$0_$0_$0_$0_2> = null;
                if (true
                    && ($scope$b = this.matchtext($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_body_$0_$0_$0_$0_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchobs_unstruct($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_unstruct> {
        return this.memoise(
            () => {
                return this.run<obs_unstruct>($$dpth,
                    () => {
                        let $scope$a: Nullable<obs_unstruct_$0[]>;
                        let $$res: Nullable<obs_unstruct> = null;
                        if (true
                            && ($scope$a = this.loop<obs_unstruct_$0>(() => this.matchobs_unstruct_$0($$dpth + 1, $$cr), true)) !== null
                        ) {
                            $$res = new obs_unstruct($scope$a);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_unstruct$memo,
        );
    }
    public matchobs_unstruct_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_unstruct_$0> {
        return this.memoise(
            () => {
                return this.choice<obs_unstruct_$0>([
                    () => this.matchobs_unstruct_$0_1($$dpth + 1, $$cr),
                    () => this.matchobs_unstruct_$0_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$obs_unstruct_$0$memo,
        );
    }
    public matchobs_unstruct_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_unstruct_$0_1> {
        return this.run<obs_unstruct_$0_1>($$dpth,
            () => {
                let $scope$a: Nullable<obs_unstruct_$0_$0>;
                let $$res: Nullable<obs_unstruct_$0_1> = null;
                if (true
                    && ($scope$a = this.matchobs_unstruct_$0_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_unstruct_$0_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchobs_unstruct_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_unstruct_$0_2> {
        return this.run<obs_unstruct_$0_2>($$dpth,
            () => {
                let $scope$b: Nullable<FWS>;
                let $$res: Nullable<obs_unstruct_$0_2> = null;
                if (true
                    && ($scope$b = this.matchFWS($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_unstruct_$0_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchobs_unstruct_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_unstruct_$0_$0> {
        return this.memoise(
            () => {
                return this.run<obs_unstruct_$0_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<LF[]>;
                        let $scope$b: Nullable<CR[]>;
                        let $scope$c: Nullable<obs_unstruct_$0_$0_$0[]>;
                        let $$res: Nullable<obs_unstruct_$0_$0> = null;
                        if (true
                            && ($scope$a = this.loop<LF>(() => this.matchLF($$dpth + 1, $$cr), true)) !== null
                            && ($scope$b = this.loop<CR>(() => this.matchCR($$dpth + 1, $$cr), true)) !== null
                            && ($scope$c = this.loop<obs_unstruct_$0_$0_$0>(() => this.matchobs_unstruct_$0_$0_$0($$dpth + 1, $$cr), true)) !== null
                        ) {
                            $$res = {kind: ASTKinds.obs_unstruct_$0_$0, a: $scope$a, b: $scope$b, c: $scope$c};
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_unstruct_$0_$0$memo,
        );
    }
    public matchobs_unstruct_$0_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_unstruct_$0_$0_$0> {
        return this.memoise(
            () => {
                return this.run<obs_unstruct_$0_$0_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<obs_utext>;
                        let $scope$b: Nullable<LF[]>;
                        let $scope$c: Nullable<CR[]>;
                        let $$res: Nullable<obs_unstruct_$0_$0_$0> = null;
                        if (true
                            && ($scope$a = this.matchobs_utext($$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<LF>(() => this.matchLF($$dpth + 1, $$cr), true)) !== null
                            && ($scope$c = this.loop<CR>(() => this.matchCR($$dpth + 1, $$cr), true)) !== null
                        ) {
                            $$res = {kind: ASTKinds.obs_unstruct_$0_$0_$0, a: $scope$a, b: $scope$b, c: $scope$c};
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_unstruct_$0_$0_$0$memo,
        );
    }
    public matchobs_phrase($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_phrase> {
        return this.memoise(
            () => {
                return this.run<obs_phrase>($$dpth,
                    () => {
                        let $scope$a: Nullable<word>;
                        let $scope$b: Nullable<obs_phrase_$0>;
                        let $$res: Nullable<obs_phrase> = null;
                        if (true
                            && ($scope$a = this.matchword($$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.matchobs_phrase_$0($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new obs_phrase($scope$a, $scope$b);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_phrase$memo,
        );
    }
    public matchobs_phrase_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_phrase_$0> {
        return this.memoise(
            () => {
                return this.choice<obs_phrase_$0>([
                    () => this.matchobs_phrase_$0_1($$dpth + 1, $$cr),
                    () => this.matchobs_phrase_$0_2($$dpth + 1, $$cr),
                    () => this.matchobs_phrase_$0_3($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$obs_phrase_$0$memo,
        );
    }
    public matchobs_phrase_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_phrase_$0_1> {
        return this.run<obs_phrase_$0_1>($$dpth,
            () => {
                let $scope$a: Nullable<word>;
                let $$res: Nullable<obs_phrase_$0_1> = null;
                if (true
                    && ($scope$a = this.matchword($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_phrase_$0_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchobs_phrase_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_phrase_$0_2> {
        return this.run<obs_phrase_$0_2>($$dpth,
            () => {
                let $scope$b: Nullable<string>;
                let $$res: Nullable<obs_phrase_$0_2> = null;
                if (true
                    && ($scope$b = this.regexAccept(String.raw`(?:.)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_phrase_$0_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchobs_phrase_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_phrase_$0_3> {
        return this.run<obs_phrase_$0_3>($$dpth,
            () => {
                let $scope$c: Nullable<CFWS>;
                let $$res: Nullable<obs_phrase_$0_3> = null;
                if (true
                    && ($scope$c = this.matchCFWS($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_phrase_$0_3, c: $scope$c};
                }
                return $$res;
            });
    }
    public matchobs_phrase_list($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_phrase_list> {
        return this.memoise(
            () => {
                return this.run<obs_phrase_list>($$dpth,
                    () => {
                        let $scope$a: Nullable<obs_phrase_list_$0>;
                        let $scope$b: Nullable<obs_phrase_list_$1[]>;
                        let $$res: Nullable<obs_phrase_list> = null;
                        if (true
                            && ($scope$a = this.matchobs_phrase_list_$0($$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<obs_phrase_list_$1>(() => this.matchobs_phrase_list_$1($$dpth + 1, $$cr), true)) !== null
                        ) {
                            $$res = new obs_phrase_list($scope$a, $scope$b);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_phrase_list$memo,
        );
    }
    public matchobs_phrase_list_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_phrase_list_$0> {
        return this.memoise(
            () => {
                return this.choice<obs_phrase_list_$0>([
                    () => this.matchobs_phrase_list_$0_1($$dpth + 1, $$cr),
                    () => this.matchobs_phrase_list_$0_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$obs_phrase_list_$0$memo,
        );
    }
    public matchobs_phrase_list_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_phrase_list_$0_1> {
        return this.run<obs_phrase_list_$0_1>($$dpth,
            () => {
                let $scope$a: Nullable<phrase>;
                let $$res: Nullable<obs_phrase_list_$0_1> = null;
                if (true
                    && ($scope$a = this.matchphrase($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_phrase_list_$0_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchobs_phrase_list_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_phrase_list_$0_2> {
        return this.run<obs_phrase_list_$0_2>($$dpth,
            () => {
                let $scope$b: Nullable<CFWS>;
                let $$res: Nullable<obs_phrase_list_$0_2> = null;
                if (true
                    && ($scope$b = this.matchCFWS($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_phrase_list_$0_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchobs_phrase_list_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_phrase_list_$1> {
        return this.memoise(
            () => {
                return this.run<obs_phrase_list_$1>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<Nullable<obs_phrase_list_$1_$0>>;
                        let $$res: Nullable<obs_phrase_list_$1> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr)) !== null
                            && (($scope$b = this.matchobs_phrase_list_$1_$0($$dpth + 1, $$cr)) || true)
                        ) {
                            $$res = {kind: ASTKinds.obs_phrase_list_$1, a: $scope$a, b: $scope$b};
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_phrase_list_$1$memo,
        );
    }
    public matchobs_phrase_list_$1_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_phrase_list_$1_$0> {
        return this.memoise(
            () => {
                return this.choice<obs_phrase_list_$1_$0>([
                    () => this.matchobs_phrase_list_$1_$0_1($$dpth + 1, $$cr),
                    () => this.matchobs_phrase_list_$1_$0_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$obs_phrase_list_$1_$0$memo,
        );
    }
    public matchobs_phrase_list_$1_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_phrase_list_$1_$0_1> {
        return this.run<obs_phrase_list_$1_$0_1>($$dpth,
            () => {
                let $scope$a: Nullable<phrase>;
                let $$res: Nullable<obs_phrase_list_$1_$0_1> = null;
                if (true
                    && ($scope$a = this.matchphrase($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_phrase_list_$1_$0_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchobs_phrase_list_$1_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_phrase_list_$1_$0_2> {
        return this.run<obs_phrase_list_$1_$0_2>($$dpth,
            () => {
                let $scope$b: Nullable<CFWS>;
                let $$res: Nullable<obs_phrase_list_$1_$0_2> = null;
                if (true
                    && ($scope$b = this.matchCFWS($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_phrase_list_$1_$0_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchobs_FWS($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_FWS> {
        return this.memoise(
            () => {
                return this.run<obs_FWS>($$dpth,
                    () => {
                        let $scope$a: Nullable<WSP[]>;
                        let $scope$b: Nullable<obs_FWS_$0[]>;
                        let $$res: Nullable<obs_FWS> = null;
                        if (true
                            && ($scope$a = this.loop<WSP>(() => this.matchWSP($$dpth + 1, $$cr), false)) !== null
                            && ($scope$b = this.loop<obs_FWS_$0>(() => this.matchobs_FWS_$0($$dpth + 1, $$cr), true)) !== null
                        ) {
                            $$res = new obs_FWS($scope$a, $scope$b);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_FWS$memo,
        );
    }
    public matchobs_FWS_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_FWS_$0> {
        return this.memoise(
            () => {
                return this.run<obs_FWS_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<CRLF>;
                        let $scope$b: Nullable<WSP[]>;
                        let $$res: Nullable<obs_FWS_$0> = null;
                        if (true
                            && ($scope$a = this.matchCRLF($$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<WSP>(() => this.matchWSP($$dpth + 1, $$cr), false)) !== null
                        ) {
                            $$res = {kind: ASTKinds.obs_FWS_$0, a: $scope$a, b: $scope$b};
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_FWS_$0$memo,
        );
    }
    public matchobs_day_of_week($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_day_of_week> {
        return this.memoise(
            () => {
                return this.run<obs_day_of_week>($$dpth,
                    () => {
                        let $scope$a: Nullable<Nullable<CFWS>>;
                        let $scope$b: Nullable<day_name>;
                        let $scope$c: Nullable<Nullable<CFWS>>;
                        let $$res: Nullable<obs_day_of_week> = null;
                        if (true
                            && (($scope$a = this.matchCFWS($$dpth + 1, $$cr)) || true)
                            && ($scope$b = this.matchday_name($$dpth + 1, $$cr)) !== null
                            && (($scope$c = this.matchCFWS($$dpth + 1, $$cr)) || true)
                        ) {
                            $$res = new obs_day_of_week($scope$a, $scope$b, $scope$c);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_day_of_week$memo,
        );
    }
    public matchobs_day($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_day> {
        return this.memoise(
            () => {
                return this.run<obs_day>($$dpth,
                    () => {
                        let $scope$a: Nullable<Nullable<CFWS>>;
                        let $scope$b: Nullable<DIGIT>;
                        let $scope$c: Nullable<Nullable<DIGIT>>;
                        let $scope$d: Nullable<Nullable<CFWS>>;
                        let $$res: Nullable<obs_day> = null;
                        if (true
                            && (($scope$a = this.matchCFWS($$dpth + 1, $$cr)) || true)
                            && ($scope$b = this.matchDIGIT($$dpth + 1, $$cr)) !== null
                            && (($scope$c = this.matchDIGIT($$dpth + 1, $$cr)) || true)
                            && (($scope$d = this.matchCFWS($$dpth + 1, $$cr)) || true)
                        ) {
                            $$res = new obs_day($scope$a, $scope$b, $scope$c, $scope$d);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_day$memo,
        );
    }
    public matchobs_year($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_year> {
        return this.memoise(
            () => {
                return this.run<obs_year>($$dpth,
                    () => {
                        let $scope$a: Nullable<Nullable<CFWS>>;
                        let $scope$b: Nullable<TWO_DIGIT>;
                        let $scope$c: Nullable<DIGIT[]>;
                        let $scope$d: Nullable<Nullable<CFWS>>;
                        let $$res: Nullable<obs_year> = null;
                        if (true
                            && (($scope$a = this.matchCFWS($$dpth + 1, $$cr)) || true)
                            && ($scope$b = this.matchTWO_DIGIT($$dpth + 1, $$cr)) !== null
                            && ($scope$c = this.loop<DIGIT>(() => this.matchDIGIT($$dpth + 1, $$cr), true)) !== null
                            && (($scope$d = this.matchCFWS($$dpth + 1, $$cr)) || true)
                        ) {
                            $$res = new obs_year($scope$a, $scope$b, $scope$c, $scope$d);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_year$memo,
        );
    }
    public matchobs_hour($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_hour> {
        return this.memoise(
            () => {
                return this.run<obs_hour>($$dpth,
                    () => {
                        let $scope$a: Nullable<Nullable<CFWS>>;
                        let $scope$b: Nullable<TWO_DIGIT>;
                        let $scope$c: Nullable<Nullable<CFWS>>;
                        let $$res: Nullable<obs_hour> = null;
                        if (true
                            && (($scope$a = this.matchCFWS($$dpth + 1, $$cr)) || true)
                            && ($scope$b = this.matchTWO_DIGIT($$dpth + 1, $$cr)) !== null
                            && (($scope$c = this.matchCFWS($$dpth + 1, $$cr)) || true)
                        ) {
                            $$res = new obs_hour($scope$a, $scope$b, $scope$c);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_hour$memo,
        );
    }
    public matchobs_minute($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_minute> {
        return this.memoise(
            () => {
                return this.run<obs_minute>($$dpth,
                    () => {
                        let $scope$a: Nullable<Nullable<CFWS>>;
                        let $scope$b: Nullable<TWO_DIGIT>;
                        let $scope$c: Nullable<Nullable<CFWS>>;
                        let $$res: Nullable<obs_minute> = null;
                        if (true
                            && (($scope$a = this.matchCFWS($$dpth + 1, $$cr)) || true)
                            && ($scope$b = this.matchTWO_DIGIT($$dpth + 1, $$cr)) !== null
                            && (($scope$c = this.matchCFWS($$dpth + 1, $$cr)) || true)
                        ) {
                            $$res = new obs_minute($scope$a, $scope$b, $scope$c);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_minute$memo,
        );
    }
    public matchobs_second($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_second> {
        return this.memoise(
            () => {
                return this.run<obs_second>($$dpth,
                    () => {
                        let $scope$a: Nullable<Nullable<CFWS>>;
                        let $scope$b: Nullable<TWO_DIGIT>;
                        let $scope$c: Nullable<Nullable<CFWS>>;
                        let $$res: Nullable<obs_second> = null;
                        if (true
                            && (($scope$a = this.matchCFWS($$dpth + 1, $$cr)) || true)
                            && ($scope$b = this.matchTWO_DIGIT($$dpth + 1, $$cr)) !== null
                            && (($scope$c = this.matchCFWS($$dpth + 1, $$cr)) || true)
                        ) {
                            $$res = new obs_second($scope$a, $scope$b, $scope$c);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_second$memo,
        );
    }
    public matchobs_zone($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_zone> {
        return this.memoise(
            () => {
                return this.choice<obs_zone>([
                    () => this.matchobs_zone_1($$dpth + 1, $$cr),
                    () => this.matchobs_zone_2($$dpth + 1, $$cr),
                    () => this.matchobs_zone_3($$dpth + 1, $$cr),
                    () => this.matchobs_zone_4($$dpth + 1, $$cr),
                    () => this.matchobs_zone_5($$dpth + 1, $$cr),
                    () => this.matchobs_zone_6($$dpth + 1, $$cr),
                    () => this.matchobs_zone_7($$dpth + 1, $$cr),
                    () => this.matchobs_zone_8($$dpth + 1, $$cr),
                    () => this.matchobs_zone_9($$dpth + 1, $$cr),
                    () => this.matchobs_zone_10($$dpth + 1, $$cr),
                    () => this.matchobs_zone_11($$dpth + 1, $$cr),
                    () => this.matchobs_zone_12($$dpth + 1, $$cr),
                    () => this.matchobs_zone_13($$dpth + 1, $$cr),
                    () => this.matchobs_zone_14($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$obs_zone$memo,
        );
    }
    public matchobs_zone_1($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_zone_1> {
        return this.run<obs_zone_1>($$dpth,
            () => {
                let $scope$a: Nullable<string>;
                let $$res: Nullable<obs_zone_1> = null;
                if (true
                    && ($scope$a = this.regexAccept(String.raw`(?:UT)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_zone_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchobs_zone_2($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_zone_2> {
        return this.run<obs_zone_2>($$dpth,
            () => {
                let $scope$b: Nullable<string>;
                let $$res: Nullable<obs_zone_2> = null;
                if (true
                    && ($scope$b = this.regexAccept(String.raw`(?:GMT)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_zone_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchobs_zone_3($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_zone_3> {
        return this.run<obs_zone_3>($$dpth,
            () => {
                let $scope$c: Nullable<string>;
                let $$res: Nullable<obs_zone_3> = null;
                if (true
                    && ($scope$c = this.regexAccept(String.raw`(?:EST)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_zone_3, c: $scope$c};
                }
                return $$res;
            });
    }
    public matchobs_zone_4($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_zone_4> {
        return this.run<obs_zone_4>($$dpth,
            () => {
                let $scope$d: Nullable<string>;
                let $$res: Nullable<obs_zone_4> = null;
                if (true
                    && ($scope$d = this.regexAccept(String.raw`(?:EDT)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_zone_4, d: $scope$d};
                }
                return $$res;
            });
    }
    public matchobs_zone_5($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_zone_5> {
        return this.run<obs_zone_5>($$dpth,
            () => {
                let $scope$e: Nullable<string>;
                let $$res: Nullable<obs_zone_5> = null;
                if (true
                    && ($scope$e = this.regexAccept(String.raw`(?:CST)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_zone_5, e: $scope$e};
                }
                return $$res;
            });
    }
    public matchobs_zone_6($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_zone_6> {
        return this.run<obs_zone_6>($$dpth,
            () => {
                let $scope$f: Nullable<string>;
                let $$res: Nullable<obs_zone_6> = null;
                if (true
                    && ($scope$f = this.regexAccept(String.raw`(?:CDT)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_zone_6, f: $scope$f};
                }
                return $$res;
            });
    }
    public matchobs_zone_7($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_zone_7> {
        return this.run<obs_zone_7>($$dpth,
            () => {
                let $scope$g: Nullable<string>;
                let $$res: Nullable<obs_zone_7> = null;
                if (true
                    && ($scope$g = this.regexAccept(String.raw`(?:MST)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_zone_7, g: $scope$g};
                }
                return $$res;
            });
    }
    public matchobs_zone_8($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_zone_8> {
        return this.run<obs_zone_8>($$dpth,
            () => {
                let $scope$h: Nullable<string>;
                let $$res: Nullable<obs_zone_8> = null;
                if (true
                    && ($scope$h = this.regexAccept(String.raw`(?:MDT)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_zone_8, h: $scope$h};
                }
                return $$res;
            });
    }
    public matchobs_zone_9($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_zone_9> {
        return this.run<obs_zone_9>($$dpth,
            () => {
                let $scope$i: Nullable<string>;
                let $$res: Nullable<obs_zone_9> = null;
                if (true
                    && ($scope$i = this.regexAccept(String.raw`(?:PST)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_zone_9, i: $scope$i};
                }
                return $$res;
            });
    }
    public matchobs_zone_10($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_zone_10> {
        return this.run<obs_zone_10>($$dpth,
            () => {
                let $scope$j: Nullable<string>;
                let $$res: Nullable<obs_zone_10> = null;
                if (true
                    && ($scope$j = this.regexAccept(String.raw`(?:PDT)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_zone_10, j: $scope$j};
                }
                return $$res;
            });
    }
    public matchobs_zone_11($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_zone_11> {
        return this.run<obs_zone_11>($$dpth,
            () => {
                let $scope$k: Nullable<string>;
                let $$res: Nullable<obs_zone_11> = null;
                if (true
                    && ($scope$k = this.regexAccept(String.raw`(?:[\x41-\x49])`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_zone_11, k: $scope$k};
                }
                return $$res;
            });
    }
    public matchobs_zone_12($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_zone_12> {
        return this.run<obs_zone_12>($$dpth,
            () => {
                let $scope$l: Nullable<string>;
                let $$res: Nullable<obs_zone_12> = null;
                if (true
                    && ($scope$l = this.regexAccept(String.raw`(?:[\x4b-\x5a])`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_zone_12, l: $scope$l};
                }
                return $$res;
            });
    }
    public matchobs_zone_13($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_zone_13> {
        return this.run<obs_zone_13>($$dpth,
            () => {
                let $scope$m: Nullable<string>;
                let $$res: Nullable<obs_zone_13> = null;
                if (true
                    && ($scope$m = this.regexAccept(String.raw`(?:[\x61-\x69])`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_zone_13, m: $scope$m};
                }
                return $$res;
            });
    }
    public matchobs_zone_14($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_zone_14> {
        return this.run<obs_zone_14>($$dpth,
            () => {
                let $scope$n: Nullable<string>;
                let $$res: Nullable<obs_zone_14> = null;
                if (true
                    && ($scope$n = this.regexAccept(String.raw`(?:[\x6b-\x7a])`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new obs_zone_14($scope$n);
                }
                return $$res;
            });
    }
    public matchobs_angle_addr($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_angle_addr> {
        return this.memoise(
            () => {
                return this.run<obs_angle_addr>($$dpth,
                    () => {
                        let $scope$a: Nullable<Nullable<CFWS>>;
                        let $scope$b: Nullable<string>;
                        let $scope$c: Nullable<obs_route>;
                        let $scope$d: Nullable<addr_spec>;
                        let $scope$e: Nullable<string>;
                        let $scope$f: Nullable<Nullable<CFWS>>;
                        let $$res: Nullable<obs_angle_addr> = null;
                        if (true
                            && (($scope$a = this.matchCFWS($$dpth + 1, $$cr)) || true)
                            && ($scope$b = this.regexAccept(String.raw`(?:<)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$c = this.matchobs_route($$dpth + 1, $$cr)) !== null
                            && ($scope$d = this.matchaddr_spec($$dpth + 1, $$cr)) !== null
                            && ($scope$e = this.regexAccept(String.raw`(?:>)`, $$dpth + 1, $$cr)) !== null
                            && (($scope$f = this.matchCFWS($$dpth + 1, $$cr)) || true)
                        ) {
                            $$res = new obs_angle_addr($scope$a, $scope$b, $scope$c, $scope$d, $scope$e, $scope$f);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_angle_addr$memo,
        );
    }
    public matchobs_route($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_route> {
        return this.memoise(
            () => {
                return this.run<obs_route>($$dpth,
                    () => {
                        let $scope$a: Nullable<obs_domain_list>;
                        let $scope$b: Nullable<string>;
                        let $$res: Nullable<obs_route> = null;
                        if (true
                            && ($scope$a = this.matchobs_domain_list($$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new obs_route($scope$a, $scope$b);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_route$memo,
        );
    }
    public matchobs_domain_list($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_domain_list> {
        return this.memoise(
            () => {
                return this.run<obs_domain_list>($$dpth,
                    () => {
                        let $scope$a: Nullable<obs_domain_list_$0[]>;
                        let $scope$b: Nullable<string>;
                        let $scope$c: Nullable<domain>;
                        let $scope$d: Nullable<obs_domain_list_$1[]>;
                        let $$res: Nullable<obs_domain_list> = null;
                        if (true
                            && ($scope$a = this.loop<obs_domain_list_$0>(() => this.matchobs_domain_list_$0($$dpth + 1, $$cr), true)) !== null
                            && ($scope$b = this.regexAccept(String.raw`(?:@)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$c = this.matchdomain($$dpth + 1, $$cr)) !== null
                            && ($scope$d = this.loop<obs_domain_list_$1>(() => this.matchobs_domain_list_$1($$dpth + 1, $$cr), true)) !== null
                        ) {
                            $$res = new obs_domain_list($scope$a, $scope$b, $scope$c, $scope$d);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_domain_list$memo,
        );
    }
    public matchobs_domain_list_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_domain_list_$0> {
        return this.memoise(
            () => {
                return this.choice<obs_domain_list_$0>([
                    () => this.matchobs_domain_list_$0_1($$dpth + 1, $$cr),
                    () => this.matchobs_domain_list_$0_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$obs_domain_list_$0$memo,
        );
    }
    public matchobs_domain_list_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_domain_list_$0_1> {
        return this.run<obs_domain_list_$0_1>($$dpth,
            () => {
                let $scope$a: Nullable<CFWS>;
                let $$res: Nullable<obs_domain_list_$0_1> = null;
                if (true
                    && ($scope$a = this.matchCFWS($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_domain_list_$0_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchobs_domain_list_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_domain_list_$0_2> {
        return this.run<obs_domain_list_$0_2>($$dpth,
            () => {
                let $scope$b: Nullable<string>;
                let $$res: Nullable<obs_domain_list_$0_2> = null;
                if (true
                    && ($scope$b = this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_domain_list_$0_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchobs_domain_list_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_domain_list_$1> {
        return this.memoise(
            () => {
                return this.run<obs_domain_list_$1>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<Nullable<CFWS>>;
                        let $scope$c: Nullable<Nullable<obs_domain_list_$1_$0>>;
                        let $$res: Nullable<obs_domain_list_$1> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr)) !== null
                            && (($scope$b = this.matchCFWS($$dpth + 1, $$cr)) || true)
                            && (($scope$c = this.matchobs_domain_list_$1_$0($$dpth + 1, $$cr)) || true)
                        ) {
                            $$res = {kind: ASTKinds.obs_domain_list_$1, a: $scope$a, b: $scope$b, c: $scope$c};
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_domain_list_$1$memo,
        );
    }
    public matchobs_domain_list_$1_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_domain_list_$1_$0> {
        return this.memoise(
            () => {
                return this.run<obs_domain_list_$1_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<domain>;
                        let $$res: Nullable<obs_domain_list_$1_$0> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:@)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.matchdomain($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.obs_domain_list_$1_$0, a: $scope$a, b: $scope$b};
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_domain_list_$1_$0$memo,
        );
    }
    public matchobs_mbox_list($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_mbox_list> {
        return this.memoise(
            () => {
                return this.run<obs_mbox_list>($$dpth,
                    () => {
                        let $scope$a: Nullable<obs_mbox_list_$0[]>;
                        let $scope$b: Nullable<mailbox>;
                        let $scope$c: Nullable<obs_mbox_list_$1[]>;
                        let $$res: Nullable<obs_mbox_list> = null;
                        if (true
                            && ($scope$a = this.loop<obs_mbox_list_$0>(() => this.matchobs_mbox_list_$0($$dpth + 1, $$cr), true)) !== null
                            && ($scope$b = this.matchmailbox($$dpth + 1, $$cr)) !== null
                            && ($scope$c = this.loop<obs_mbox_list_$1>(() => this.matchobs_mbox_list_$1($$dpth + 1, $$cr), true)) !== null
                        ) {
                            $$res = new obs_mbox_list($scope$a, $scope$b, $scope$c);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_mbox_list$memo,
        );
    }
    public matchobs_mbox_list_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_mbox_list_$0> {
        return this.memoise(
            () => {
                return this.run<obs_mbox_list_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<Nullable<CFWS>>;
                        let $scope$b: Nullable<string>;
                        let $$res: Nullable<obs_mbox_list_$0> = null;
                        if (true
                            && (($scope$a = this.matchCFWS($$dpth + 1, $$cr)) || true)
                            && ($scope$b = this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.obs_mbox_list_$0, a: $scope$a, b: $scope$b};
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_mbox_list_$0$memo,
        );
    }
    public matchobs_mbox_list_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_mbox_list_$1> {
        return this.memoise(
            () => {
                return this.run<obs_mbox_list_$1>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<Nullable<obs_mbox_list_$1_$0>>;
                        let $$res: Nullable<obs_mbox_list_$1> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr)) !== null
                            && (($scope$b = this.matchobs_mbox_list_$1_$0($$dpth + 1, $$cr)) || true)
                        ) {
                            $$res = {kind: ASTKinds.obs_mbox_list_$1, a: $scope$a, b: $scope$b};
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_mbox_list_$1$memo,
        );
    }
    public matchobs_mbox_list_$1_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_mbox_list_$1_$0> {
        return this.memoise(
            () => {
                return this.choice<obs_mbox_list_$1_$0>([
                    () => this.matchobs_mbox_list_$1_$0_1($$dpth + 1, $$cr),
                    () => this.matchobs_mbox_list_$1_$0_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$obs_mbox_list_$1_$0$memo,
        );
    }
    public matchobs_mbox_list_$1_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_mbox_list_$1_$0_1> {
        return this.run<obs_mbox_list_$1_$0_1>($$dpth,
            () => {
                let $scope$a: Nullable<mailbox>;
                let $$res: Nullable<obs_mbox_list_$1_$0_1> = null;
                if (true
                    && ($scope$a = this.matchmailbox($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_mbox_list_$1_$0_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchobs_mbox_list_$1_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_mbox_list_$1_$0_2> {
        return this.run<obs_mbox_list_$1_$0_2>($$dpth,
            () => {
                let $scope$b: Nullable<CFWS>;
                let $$res: Nullable<obs_mbox_list_$1_$0_2> = null;
                if (true
                    && ($scope$b = this.matchCFWS($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_mbox_list_$1_$0_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchobs_addr_list($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_addr_list> {
        return this.memoise(
            () => {
                return this.run<obs_addr_list>($$dpth,
                    () => {
                        let $scope$a: Nullable<obs_addr_list_$0[]>;
                        let $scope$b: Nullable<address>;
                        let $scope$c: Nullable<obs_addr_list_$1[]>;
                        let $$res: Nullable<obs_addr_list> = null;
                        if (true
                            && ($scope$a = this.loop<obs_addr_list_$0>(() => this.matchobs_addr_list_$0($$dpth + 1, $$cr), true)) !== null
                            && ($scope$b = this.matchaddress($$dpth + 1, $$cr)) !== null
                            && ($scope$c = this.loop<obs_addr_list_$1>(() => this.matchobs_addr_list_$1($$dpth + 1, $$cr), true)) !== null
                        ) {
                            $$res = new obs_addr_list($scope$a, $scope$b, $scope$c);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_addr_list$memo,
        );
    }
    public matchobs_addr_list_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_addr_list_$0> {
        return this.memoise(
            () => {
                return this.run<obs_addr_list_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<Nullable<CFWS>>;
                        let $scope$b: Nullable<string>;
                        let $$res: Nullable<obs_addr_list_$0> = null;
                        if (true
                            && (($scope$a = this.matchCFWS($$dpth + 1, $$cr)) || true)
                            && ($scope$b = this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.obs_addr_list_$0, a: $scope$a, b: $scope$b};
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_addr_list_$0$memo,
        );
    }
    public matchobs_addr_list_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_addr_list_$1> {
        return this.memoise(
            () => {
                return this.run<obs_addr_list_$1>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<Nullable<obs_addr_list_$1_$0>>;
                        let $$res: Nullable<obs_addr_list_$1> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr)) !== null
                            && (($scope$b = this.matchobs_addr_list_$1_$0($$dpth + 1, $$cr)) || true)
                        ) {
                            $$res = {kind: ASTKinds.obs_addr_list_$1, a: $scope$a, b: $scope$b};
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_addr_list_$1$memo,
        );
    }
    public matchobs_addr_list_$1_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_addr_list_$1_$0> {
        return this.memoise(
            () => {
                return this.choice<obs_addr_list_$1_$0>([
                    () => this.matchobs_addr_list_$1_$0_1($$dpth + 1, $$cr),
                    () => this.matchobs_addr_list_$1_$0_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$obs_addr_list_$1_$0$memo,
        );
    }
    public matchobs_addr_list_$1_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_addr_list_$1_$0_1> {
        return this.run<obs_addr_list_$1_$0_1>($$dpth,
            () => {
                let $scope$a: Nullable<address>;
                let $$res: Nullable<obs_addr_list_$1_$0_1> = null;
                if (true
                    && ($scope$a = this.matchaddress($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_addr_list_$1_$0_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchobs_addr_list_$1_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_addr_list_$1_$0_2> {
        return this.run<obs_addr_list_$1_$0_2>($$dpth,
            () => {
                let $scope$b: Nullable<CFWS>;
                let $$res: Nullable<obs_addr_list_$1_$0_2> = null;
                if (true
                    && ($scope$b = this.matchCFWS($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_addr_list_$1_$0_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchobs_group_list($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_group_list> {
        return this.memoise(
            () => {
                return this.run<obs_group_list>($$dpth,
                    () => {
                        let $scope$a: Nullable<obs_group_list_$0[]>;
                        let $scope$b: Nullable<Nullable<CFWS>>;
                        let $$res: Nullable<obs_group_list> = null;
                        if (true
                            && ($scope$a = this.loop<obs_group_list_$0>(() => this.matchobs_group_list_$0($$dpth + 1, $$cr), false)) !== null
                            && (($scope$b = this.matchCFWS($$dpth + 1, $$cr)) || true)
                        ) {
                            $$res = new obs_group_list($scope$a, $scope$b);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_group_list$memo,
        );
    }
    public matchobs_group_list_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_group_list_$0> {
        return this.memoise(
            () => {
                return this.run<obs_group_list_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<Nullable<CFWS>>;
                        let $scope$b: Nullable<string>;
                        let $$res: Nullable<obs_group_list_$0> = null;
                        if (true
                            && (($scope$a = this.matchCFWS($$dpth + 1, $$cr)) || true)
                            && ($scope$b = this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.obs_group_list_$0, a: $scope$a, b: $scope$b};
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_group_list_$0$memo,
        );
    }
    public matchobs_local_part($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_local_part> {
        return this.memoise(
            () => {
                return this.run<obs_local_part>($$dpth,
                    () => {
                        let $scope$a: Nullable<word>;
                        let $scope$b: Nullable<obs_local_part_$0[]>;
                        let $$res: Nullable<obs_local_part> = null;
                        if (true
                            && ($scope$a = this.matchword($$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<obs_local_part_$0>(() => this.matchobs_local_part_$0($$dpth + 1, $$cr), true)) !== null
                        ) {
                            $$res = new obs_local_part($scope$a, $scope$b);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_local_part$memo,
        );
    }
    public matchobs_local_part_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_local_part_$0> {
        return this.memoise(
            () => {
                return this.run<obs_local_part_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<word>;
                        let $$res: Nullable<obs_local_part_$0> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:\.)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.matchword($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.obs_local_part_$0, a: $scope$a, b: $scope$b};
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_local_part_$0$memo,
        );
    }
    public matchobs_domain($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_domain> {
        return this.memoise(
            () => {
                return this.run<obs_domain>($$dpth,
                    () => {
                        let $scope$a: Nullable<atom>;
                        let $scope$b: Nullable<obs_domain_$0[]>;
                        let $$res: Nullable<obs_domain> = null;
                        if (true
                            && ($scope$a = this.matchatom($$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<obs_domain_$0>(() => this.matchobs_domain_$0($$dpth + 1, $$cr), true)) !== null
                        ) {
                            $$res = new obs_domain($scope$a, $scope$b);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_domain$memo,
        );
    }
    public matchobs_domain_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_domain_$0> {
        return this.memoise(
            () => {
                return this.run<obs_domain_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<atom>;
                        let $$res: Nullable<obs_domain_$0> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:\.)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.matchatom($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.obs_domain_$0, a: $scope$a, b: $scope$b};
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_domain_$0$memo,
        );
    }
    public matchobs_dtext($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_dtext> {
        return this.memoise(
            () => {
                return this.choice<obs_dtext>([
                    () => this.matchobs_dtext_1($$dpth + 1, $$cr),
                    () => this.matchobs_dtext_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$obs_dtext$memo,
        );
    }
    public matchobs_dtext_1($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_dtext_1> {
        return this.run<obs_dtext_1>($$dpth,
            () => {
                let $scope$a: Nullable<obs_NO_WS_CTL>;
                let $$res: Nullable<obs_dtext_1> = null;
                if (true
                    && ($scope$a = this.matchobs_NO_WS_CTL($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_dtext_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchobs_dtext_2($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_dtext_2> {
        return this.run<obs_dtext_2>($$dpth,
            () => {
                let $scope$b: Nullable<quoted_pair>;
                let $$res: Nullable<obs_dtext_2> = null;
                if (true
                    && ($scope$b = this.matchquoted_pair($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new obs_dtext_2($scope$b);
                }
                return $$res;
            });
    }
    public matchobs_fields($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_fields> {
        return this.memoise(
            () => {
                return this.run<obs_fields>($$dpth,
                    () => {
                        let $scope$a: Nullable<obs_fields_$0[]>;
                        let $$res: Nullable<obs_fields> = null;
                        if (true
                            && ($scope$a = this.loop<obs_fields_$0>(() => this.matchobs_fields_$0($$dpth + 1, $$cr), true)) !== null
                        ) {
                            $$res = new obs_fields($scope$a);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_fields$memo,
        );
    }
    public matchobs_fields_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_fields_$0> {
        return this.memoise(
            () => {
                return this.choice<obs_fields_$0>([
                    () => this.matchobs_fields_$0_1($$dpth + 1, $$cr),
                    () => this.matchobs_fields_$0_2($$dpth + 1, $$cr),
                    () => this.matchobs_fields_$0_3($$dpth + 1, $$cr),
                    () => this.matchobs_fields_$0_4($$dpth + 1, $$cr),
                    () => this.matchobs_fields_$0_5($$dpth + 1, $$cr),
                    () => this.matchobs_fields_$0_6($$dpth + 1, $$cr),
                    () => this.matchobs_fields_$0_7($$dpth + 1, $$cr),
                    () => this.matchobs_fields_$0_8($$dpth + 1, $$cr),
                    () => this.matchobs_fields_$0_9($$dpth + 1, $$cr),
                    () => this.matchobs_fields_$0_10($$dpth + 1, $$cr),
                    () => this.matchobs_fields_$0_11($$dpth + 1, $$cr),
                    () => this.matchobs_fields_$0_12($$dpth + 1, $$cr),
                    () => this.matchobs_fields_$0_13($$dpth + 1, $$cr),
                    () => this.matchobs_fields_$0_14($$dpth + 1, $$cr),
                    () => this.matchobs_fields_$0_15($$dpth + 1, $$cr),
                    () => this.matchobs_fields_$0_16($$dpth + 1, $$cr),
                    () => this.matchobs_fields_$0_17($$dpth + 1, $$cr),
                    () => this.matchobs_fields_$0_18($$dpth + 1, $$cr),
                    () => this.matchobs_fields_$0_19($$dpth + 1, $$cr),
                    () => this.matchobs_fields_$0_20($$dpth + 1, $$cr),
                    () => this.matchobs_fields_$0_21($$dpth + 1, $$cr),
                    () => this.matchobs_fields_$0_22($$dpth + 1, $$cr),
                    () => this.matchobs_fields_$0_23($$dpth + 1, $$cr),
                    () => this.matchobs_fields_$0_24($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$obs_fields_$0$memo,
        );
    }
    public matchobs_fields_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_fields_$0_1> {
        return this.run<obs_fields_$0_1>($$dpth,
            () => {
                let $scope$a: Nullable<obs_return>;
                let $$res: Nullable<obs_fields_$0_1> = null;
                if (true
                    && ($scope$a = this.matchobs_return($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_fields_$0_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchobs_fields_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_fields_$0_2> {
        return this.run<obs_fields_$0_2>($$dpth,
            () => {
                let $scope$b: Nullable<obs_received>;
                let $$res: Nullable<obs_fields_$0_2> = null;
                if (true
                    && ($scope$b = this.matchobs_received($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_fields_$0_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchobs_fields_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_fields_$0_3> {
        return this.run<obs_fields_$0_3>($$dpth,
            () => {
                let $scope$c: Nullable<obs_orig_date>;
                let $$res: Nullable<obs_fields_$0_3> = null;
                if (true
                    && ($scope$c = this.matchobs_orig_date($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_fields_$0_3, c: $scope$c};
                }
                return $$res;
            });
    }
    public matchobs_fields_$0_4($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_fields_$0_4> {
        return this.run<obs_fields_$0_4>($$dpth,
            () => {
                let $scope$d: Nullable<obs_from>;
                let $$res: Nullable<obs_fields_$0_4> = null;
                if (true
                    && ($scope$d = this.matchobs_from($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_fields_$0_4, d: $scope$d};
                }
                return $$res;
            });
    }
    public matchobs_fields_$0_5($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_fields_$0_5> {
        return this.run<obs_fields_$0_5>($$dpth,
            () => {
                let $scope$e: Nullable<obs_sender>;
                let $$res: Nullable<obs_fields_$0_5> = null;
                if (true
                    && ($scope$e = this.matchobs_sender($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_fields_$0_5, e: $scope$e};
                }
                return $$res;
            });
    }
    public matchobs_fields_$0_6($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_fields_$0_6> {
        return this.run<obs_fields_$0_6>($$dpth,
            () => {
                let $scope$f: Nullable<obs_reply_to>;
                let $$res: Nullable<obs_fields_$0_6> = null;
                if (true
                    && ($scope$f = this.matchobs_reply_to($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_fields_$0_6, f: $scope$f};
                }
                return $$res;
            });
    }
    public matchobs_fields_$0_7($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_fields_$0_7> {
        return this.run<obs_fields_$0_7>($$dpth,
            () => {
                let $scope$g: Nullable<obs_to>;
                let $$res: Nullable<obs_fields_$0_7> = null;
                if (true
                    && ($scope$g = this.matchobs_to($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_fields_$0_7, g: $scope$g};
                }
                return $$res;
            });
    }
    public matchobs_fields_$0_8($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_fields_$0_8> {
        return this.run<obs_fields_$0_8>($$dpth,
            () => {
                let $scope$h: Nullable<obs_cc>;
                let $$res: Nullable<obs_fields_$0_8> = null;
                if (true
                    && ($scope$h = this.matchobs_cc($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_fields_$0_8, h: $scope$h};
                }
                return $$res;
            });
    }
    public matchobs_fields_$0_9($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_fields_$0_9> {
        return this.run<obs_fields_$0_9>($$dpth,
            () => {
                let $scope$i: Nullable<obs_bcc>;
                let $$res: Nullable<obs_fields_$0_9> = null;
                if (true
                    && ($scope$i = this.matchobs_bcc($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_fields_$0_9, i: $scope$i};
                }
                return $$res;
            });
    }
    public matchobs_fields_$0_10($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_fields_$0_10> {
        return this.run<obs_fields_$0_10>($$dpth,
            () => {
                let $scope$j: Nullable<obs_message_id>;
                let $$res: Nullable<obs_fields_$0_10> = null;
                if (true
                    && ($scope$j = this.matchobs_message_id($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_fields_$0_10, j: $scope$j};
                }
                return $$res;
            });
    }
    public matchobs_fields_$0_11($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_fields_$0_11> {
        return this.run<obs_fields_$0_11>($$dpth,
            () => {
                let $scope$k: Nullable<obs_in_reply_to>;
                let $$res: Nullable<obs_fields_$0_11> = null;
                if (true
                    && ($scope$k = this.matchobs_in_reply_to($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_fields_$0_11, k: $scope$k};
                }
                return $$res;
            });
    }
    public matchobs_fields_$0_12($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_fields_$0_12> {
        return this.run<obs_fields_$0_12>($$dpth,
            () => {
                let $scope$l: Nullable<obs_references>;
                let $$res: Nullable<obs_fields_$0_12> = null;
                if (true
                    && ($scope$l = this.matchobs_references($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_fields_$0_12, l: $scope$l};
                }
                return $$res;
            });
    }
    public matchobs_fields_$0_13($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_fields_$0_13> {
        return this.run<obs_fields_$0_13>($$dpth,
            () => {
                let $scope$m: Nullable<obs_subject>;
                let $$res: Nullable<obs_fields_$0_13> = null;
                if (true
                    && ($scope$m = this.matchobs_subject($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_fields_$0_13, m: $scope$m};
                }
                return $$res;
            });
    }
    public matchobs_fields_$0_14($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_fields_$0_14> {
        return this.run<obs_fields_$0_14>($$dpth,
            () => {
                let $scope$n: Nullable<obs_comments>;
                let $$res: Nullable<obs_fields_$0_14> = null;
                if (true
                    && ($scope$n = this.matchobs_comments($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_fields_$0_14, n: $scope$n};
                }
                return $$res;
            });
    }
    public matchobs_fields_$0_15($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_fields_$0_15> {
        return this.run<obs_fields_$0_15>($$dpth,
            () => {
                let $scope$o: Nullable<obs_keywords>;
                let $$res: Nullable<obs_fields_$0_15> = null;
                if (true
                    && ($scope$o = this.matchobs_keywords($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_fields_$0_15, o: $scope$o};
                }
                return $$res;
            });
    }
    public matchobs_fields_$0_16($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_fields_$0_16> {
        return this.run<obs_fields_$0_16>($$dpth,
            () => {
                let $scope$p: Nullable<obs_resent_date>;
                let $$res: Nullable<obs_fields_$0_16> = null;
                if (true
                    && ($scope$p = this.matchobs_resent_date($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_fields_$0_16, p: $scope$p};
                }
                return $$res;
            });
    }
    public matchobs_fields_$0_17($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_fields_$0_17> {
        return this.run<obs_fields_$0_17>($$dpth,
            () => {
                let $scope$q: Nullable<obs_resent_from>;
                let $$res: Nullable<obs_fields_$0_17> = null;
                if (true
                    && ($scope$q = this.matchobs_resent_from($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_fields_$0_17, q: $scope$q};
                }
                return $$res;
            });
    }
    public matchobs_fields_$0_18($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_fields_$0_18> {
        return this.run<obs_fields_$0_18>($$dpth,
            () => {
                let $scope$r: Nullable<obs_resent_send>;
                let $$res: Nullable<obs_fields_$0_18> = null;
                if (true
                    && ($scope$r = this.matchobs_resent_send($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_fields_$0_18, r: $scope$r};
                }
                return $$res;
            });
    }
    public matchobs_fields_$0_19($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_fields_$0_19> {
        return this.run<obs_fields_$0_19>($$dpth,
            () => {
                let $scope$s: Nullable<obs_resent_rply>;
                let $$res: Nullable<obs_fields_$0_19> = null;
                if (true
                    && ($scope$s = this.matchobs_resent_rply($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_fields_$0_19, s: $scope$s};
                }
                return $$res;
            });
    }
    public matchobs_fields_$0_20($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_fields_$0_20> {
        return this.run<obs_fields_$0_20>($$dpth,
            () => {
                let $scope$t: Nullable<obs_resent_to>;
                let $$res: Nullable<obs_fields_$0_20> = null;
                if (true
                    && ($scope$t = this.matchobs_resent_to($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_fields_$0_20, t: $scope$t};
                }
                return $$res;
            });
    }
    public matchobs_fields_$0_21($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_fields_$0_21> {
        return this.run<obs_fields_$0_21>($$dpth,
            () => {
                let $scope$u: Nullable<obs_resent_cc>;
                let $$res: Nullable<obs_fields_$0_21> = null;
                if (true
                    && ($scope$u = this.matchobs_resent_cc($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_fields_$0_21, u: $scope$u};
                }
                return $$res;
            });
    }
    public matchobs_fields_$0_22($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_fields_$0_22> {
        return this.run<obs_fields_$0_22>($$dpth,
            () => {
                let $scope$v: Nullable<obs_resent_bcc>;
                let $$res: Nullable<obs_fields_$0_22> = null;
                if (true
                    && ($scope$v = this.matchobs_resent_bcc($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_fields_$0_22, v: $scope$v};
                }
                return $$res;
            });
    }
    public matchobs_fields_$0_23($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_fields_$0_23> {
        return this.run<obs_fields_$0_23>($$dpth,
            () => {
                let $scope$w: Nullable<obs_resent_mid>;
                let $$res: Nullable<obs_fields_$0_23> = null;
                if (true
                    && ($scope$w = this.matchobs_resent_mid($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_fields_$0_23, w: $scope$w};
                }
                return $$res;
            });
    }
    public matchobs_fields_$0_24($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_fields_$0_24> {
        return this.run<obs_fields_$0_24>($$dpth,
            () => {
                let $scope$x: Nullable<obs_optional>;
                let $$res: Nullable<obs_fields_$0_24> = null;
                if (true
                    && ($scope$x = this.matchobs_optional($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_fields_$0_24, x: $scope$x};
                }
                return $$res;
            });
    }
    public matchobs_orig_date($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_orig_date> {
        return this.memoise(
            () => {
                return this.run<obs_orig_date>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<WSP[]>;
                        let $scope$c: Nullable<string>;
                        let $scope$d: Nullable<date_time>;
                        let $scope$e: Nullable<CRLF>;
                        let $$res: Nullable<obs_orig_date> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:Date)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<WSP>(() => this.matchWSP($$dpth + 1, $$cr), true)) !== null
                            && ($scope$c = this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$d = this.matchdate_time($$dpth + 1, $$cr)) !== null
                            && ($scope$e = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new obs_orig_date($scope$a, $scope$b, $scope$c, $scope$d, $scope$e);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_orig_date$memo,
        );
    }
    public matchobs_from($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_from> {
        return this.memoise(
            () => {
                return this.run<obs_from>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<WSP[]>;
                        let $scope$c: Nullable<string>;
                        let $scope$d: Nullable<mailbox_list>;
                        let $scope$e: Nullable<CRLF>;
                        let $$res: Nullable<obs_from> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:From)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<WSP>(() => this.matchWSP($$dpth + 1, $$cr), true)) !== null
                            && ($scope$c = this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$d = this.matchmailbox_list($$dpth + 1, $$cr)) !== null
                            && ($scope$e = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new obs_from($scope$a, $scope$b, $scope$c, $scope$d, $scope$e);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_from$memo,
        );
    }
    public matchobs_sender($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_sender> {
        return this.memoise(
            () => {
                return this.run<obs_sender>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<WSP[]>;
                        let $scope$c: Nullable<string>;
                        let $scope$d: Nullable<mailbox>;
                        let $scope$e: Nullable<CRLF>;
                        let $$res: Nullable<obs_sender> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:Sender)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<WSP>(() => this.matchWSP($$dpth + 1, $$cr), true)) !== null
                            && ($scope$c = this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$d = this.matchmailbox($$dpth + 1, $$cr)) !== null
                            && ($scope$e = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new obs_sender($scope$a, $scope$b, $scope$c, $scope$d, $scope$e);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_sender$memo,
        );
    }
    public matchobs_reply_to($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_reply_to> {
        return this.memoise(
            () => {
                return this.run<obs_reply_to>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<WSP[]>;
                        let $scope$c: Nullable<string>;
                        let $scope$d: Nullable<address_list>;
                        let $scope$e: Nullable<CRLF>;
                        let $$res: Nullable<obs_reply_to> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:Reply-To)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<WSP>(() => this.matchWSP($$dpth + 1, $$cr), true)) !== null
                            && ($scope$c = this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$d = this.matchaddress_list($$dpth + 1, $$cr)) !== null
                            && ($scope$e = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new obs_reply_to($scope$a, $scope$b, $scope$c, $scope$d, $scope$e);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_reply_to$memo,
        );
    }
    public matchobs_to($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_to> {
        return this.memoise(
            () => {
                return this.run<obs_to>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<WSP[]>;
                        let $scope$c: Nullable<string>;
                        let $scope$d: Nullable<address_list>;
                        let $scope$e: Nullable<CRLF>;
                        let $$res: Nullable<obs_to> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:To)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<WSP>(() => this.matchWSP($$dpth + 1, $$cr), true)) !== null
                            && ($scope$c = this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$d = this.matchaddress_list($$dpth + 1, $$cr)) !== null
                            && ($scope$e = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new obs_to($scope$a, $scope$b, $scope$c, $scope$d, $scope$e);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_to$memo,
        );
    }
    public matchobs_cc($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_cc> {
        return this.memoise(
            () => {
                return this.run<obs_cc>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<WSP[]>;
                        let $scope$c: Nullable<string>;
                        let $scope$d: Nullable<address_list>;
                        let $scope$e: Nullable<CRLF>;
                        let $$res: Nullable<obs_cc> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:Cc)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<WSP>(() => this.matchWSP($$dpth + 1, $$cr), true)) !== null
                            && ($scope$c = this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$d = this.matchaddress_list($$dpth + 1, $$cr)) !== null
                            && ($scope$e = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new obs_cc($scope$a, $scope$b, $scope$c, $scope$d, $scope$e);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_cc$memo,
        );
    }
    public matchobs_bcc($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_bcc> {
        return this.memoise(
            () => {
                return this.run<obs_bcc>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<WSP[]>;
                        let $scope$c: Nullable<string>;
                        let $scope$d: Nullable<obs_bcc_$0>;
                        let $scope$e: Nullable<CRLF>;
                        let $$res: Nullable<obs_bcc> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:Bcc)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<WSP>(() => this.matchWSP($$dpth + 1, $$cr), true)) !== null
                            && ($scope$c = this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$d = this.matchobs_bcc_$0($$dpth + 1, $$cr)) !== null
                            && ($scope$e = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new obs_bcc($scope$a, $scope$b, $scope$c, $scope$d, $scope$e);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_bcc$memo,
        );
    }
    public matchobs_bcc_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_bcc_$0> {
        return this.memoise(
            () => {
                return this.choice<obs_bcc_$0>([
                    () => this.matchobs_bcc_$0_1($$dpth + 1, $$cr),
                    () => this.matchobs_bcc_$0_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$obs_bcc_$0$memo,
        );
    }
    public matchobs_bcc_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_bcc_$0_1> {
        return this.run<obs_bcc_$0_1>($$dpth,
            () => {
                let $scope$a: Nullable<address_list>;
                let $$res: Nullable<obs_bcc_$0_1> = null;
                if (true
                    && ($scope$a = this.matchaddress_list($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_bcc_$0_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchobs_bcc_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_bcc_$0_2> {
        return this.run<obs_bcc_$0_2>($$dpth,
            () => {
                let $scope$b: Nullable<obs_bcc_$0_$0>;
                let $$res: Nullable<obs_bcc_$0_2> = null;
                if (true
                    && ($scope$b = this.matchobs_bcc_$0_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_bcc_$0_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchobs_bcc_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_bcc_$0_$0> {
        return this.memoise(
            () => {
                return this.run<obs_bcc_$0_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<obs_bcc_$0_$0_$0[]>;
                        let $scope$b: Nullable<Nullable<CFWS>>;
                        let $$res: Nullable<obs_bcc_$0_$0> = null;
                        if (true
                            && ($scope$a = this.loop<obs_bcc_$0_$0_$0>(() => this.matchobs_bcc_$0_$0_$0($$dpth + 1, $$cr), true)) !== null
                            && (($scope$b = this.matchCFWS($$dpth + 1, $$cr)) || true)
                        ) {
                            $$res = {kind: ASTKinds.obs_bcc_$0_$0, a: $scope$a, b: $scope$b};
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_bcc_$0_$0$memo,
        );
    }
    public matchobs_bcc_$0_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_bcc_$0_$0_$0> {
        return this.memoise(
            () => {
                return this.run<obs_bcc_$0_$0_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<Nullable<CFWS>>;
                        let $scope$b: Nullable<string>;
                        let $$res: Nullable<obs_bcc_$0_$0_$0> = null;
                        if (true
                            && (($scope$a = this.matchCFWS($$dpth + 1, $$cr)) || true)
                            && ($scope$b = this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.obs_bcc_$0_$0_$0, a: $scope$a, b: $scope$b};
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_bcc_$0_$0_$0$memo,
        );
    }
    public matchobs_message_id($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_message_id> {
        return this.memoise(
            () => {
                return this.run<obs_message_id>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<WSP[]>;
                        let $scope$c: Nullable<string>;
                        let $scope$d: Nullable<msg_id>;
                        let $scope$e: Nullable<CRLF>;
                        let $$res: Nullable<obs_message_id> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:Message-ID)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<WSP>(() => this.matchWSP($$dpth + 1, $$cr), true)) !== null
                            && ($scope$c = this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$d = this.matchmsg_id($$dpth + 1, $$cr)) !== null
                            && ($scope$e = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new obs_message_id($scope$a, $scope$b, $scope$c, $scope$d, $scope$e);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_message_id$memo,
        );
    }
    public matchobs_in_reply_to($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_in_reply_to> {
        return this.memoise(
            () => {
                return this.run<obs_in_reply_to>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<WSP[]>;
                        let $scope$c: Nullable<string>;
                        let $scope$d: Nullable<obs_in_reply_to_$0[]>;
                        let $scope$e: Nullable<CRLF>;
                        let $$res: Nullable<obs_in_reply_to> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:In-Reply-To)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<WSP>(() => this.matchWSP($$dpth + 1, $$cr), true)) !== null
                            && ($scope$c = this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$d = this.loop<obs_in_reply_to_$0>(() => this.matchobs_in_reply_to_$0($$dpth + 1, $$cr), true)) !== null
                            && ($scope$e = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new obs_in_reply_to($scope$a, $scope$b, $scope$c, $scope$d, $scope$e);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_in_reply_to$memo,
        );
    }
    public matchobs_in_reply_to_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_in_reply_to_$0> {
        return this.memoise(
            () => {
                return this.choice<obs_in_reply_to_$0>([
                    () => this.matchobs_in_reply_to_$0_1($$dpth + 1, $$cr),
                    () => this.matchobs_in_reply_to_$0_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$obs_in_reply_to_$0$memo,
        );
    }
    public matchobs_in_reply_to_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_in_reply_to_$0_1> {
        return this.run<obs_in_reply_to_$0_1>($$dpth,
            () => {
                let $scope$a: Nullable<phrase>;
                let $$res: Nullable<obs_in_reply_to_$0_1> = null;
                if (true
                    && ($scope$a = this.matchphrase($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_in_reply_to_$0_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchobs_in_reply_to_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_in_reply_to_$0_2> {
        return this.run<obs_in_reply_to_$0_2>($$dpth,
            () => {
                let $scope$b: Nullable<msg_id>;
                let $$res: Nullable<obs_in_reply_to_$0_2> = null;
                if (true
                    && ($scope$b = this.matchmsg_id($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_in_reply_to_$0_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchobs_references($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_references> {
        return this.memoise(
            () => {
                return this.run<obs_references>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<WSP[]>;
                        let $scope$c: Nullable<string>;
                        let $scope$d: Nullable<obs_references_$0[]>;
                        let $scope$e: Nullable<CRLF>;
                        let $$res: Nullable<obs_references> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:References)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<WSP>(() => this.matchWSP($$dpth + 1, $$cr), true)) !== null
                            && ($scope$c = this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$d = this.loop<obs_references_$0>(() => this.matchobs_references_$0($$dpth + 1, $$cr), true)) !== null
                            && ($scope$e = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new obs_references($scope$a, $scope$b, $scope$c, $scope$d, $scope$e);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_references$memo,
        );
    }
    public matchobs_references_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_references_$0> {
        return this.memoise(
            () => {
                return this.choice<obs_references_$0>([
                    () => this.matchobs_references_$0_1($$dpth + 1, $$cr),
                    () => this.matchobs_references_$0_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$obs_references_$0$memo,
        );
    }
    public matchobs_references_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_references_$0_1> {
        return this.run<obs_references_$0_1>($$dpth,
            () => {
                let $scope$a: Nullable<phrase>;
                let $$res: Nullable<obs_references_$0_1> = null;
                if (true
                    && ($scope$a = this.matchphrase($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_references_$0_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchobs_references_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_references_$0_2> {
        return this.run<obs_references_$0_2>($$dpth,
            () => {
                let $scope$b: Nullable<msg_id>;
                let $$res: Nullable<obs_references_$0_2> = null;
                if (true
                    && ($scope$b = this.matchmsg_id($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_references_$0_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchobs_id_left($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_id_left> {
        return this.memoise(
            () => {
                return this.run<obs_id_left>($$dpth,
                    () => {
                        let $scope$a: Nullable<local_part>;
                        let $$res: Nullable<obs_id_left> = null;
                        if (true
                            && ($scope$a = this.matchlocal_part($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new obs_id_left($scope$a);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_id_left$memo,
        );
    }
    public matchobs_id_right($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_id_right> {
        return this.memoise(
            () => {
                return this.run<obs_id_right>($$dpth,
                    () => {
                        let $scope$a: Nullable<domain>;
                        let $$res: Nullable<obs_id_right> = null;
                        if (true
                            && ($scope$a = this.matchdomain($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new obs_id_right($scope$a);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_id_right$memo,
        );
    }
    public matchobs_subject($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_subject> {
        return this.memoise(
            () => {
                return this.run<obs_subject>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<WSP[]>;
                        let $scope$c: Nullable<string>;
                        let $scope$d: Nullable<unstructured>;
                        let $scope$e: Nullable<CRLF>;
                        let $$res: Nullable<obs_subject> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:Subject)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<WSP>(() => this.matchWSP($$dpth + 1, $$cr), true)) !== null
                            && ($scope$c = this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$d = this.matchunstructured($$dpth + 1, $$cr)) !== null
                            && ($scope$e = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new obs_subject($scope$a, $scope$b, $scope$c, $scope$d, $scope$e);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_subject$memo,
        );
    }
    public matchobs_comments($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_comments> {
        return this.memoise(
            () => {
                return this.run<obs_comments>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<WSP[]>;
                        let $scope$c: Nullable<string>;
                        let $scope$d: Nullable<unstructured>;
                        let $scope$e: Nullable<CRLF>;
                        let $$res: Nullable<obs_comments> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:Comments)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<WSP>(() => this.matchWSP($$dpth + 1, $$cr), true)) !== null
                            && ($scope$c = this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$d = this.matchunstructured($$dpth + 1, $$cr)) !== null
                            && ($scope$e = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new obs_comments($scope$a, $scope$b, $scope$c, $scope$d, $scope$e);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_comments$memo,
        );
    }
    public matchobs_keywords($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_keywords> {
        return this.memoise(
            () => {
                return this.run<obs_keywords>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<WSP[]>;
                        let $scope$c: Nullable<string>;
                        let $scope$d: Nullable<obs_phrase_list>;
                        let $scope$e: Nullable<CRLF>;
                        let $$res: Nullable<obs_keywords> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:Keywords)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<WSP>(() => this.matchWSP($$dpth + 1, $$cr), true)) !== null
                            && ($scope$c = this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$d = this.matchobs_phrase_list($$dpth + 1, $$cr)) !== null
                            && ($scope$e = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new obs_keywords($scope$a, $scope$b, $scope$c, $scope$d, $scope$e);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_keywords$memo,
        );
    }
    public matchobs_resent_from($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_resent_from> {
        return this.memoise(
            () => {
                return this.run<obs_resent_from>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<WSP[]>;
                        let $scope$c: Nullable<string>;
                        let $scope$d: Nullable<mailbox_list>;
                        let $scope$e: Nullable<CRLF>;
                        let $$res: Nullable<obs_resent_from> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:Resent-From)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<WSP>(() => this.matchWSP($$dpth + 1, $$cr), true)) !== null
                            && ($scope$c = this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$d = this.matchmailbox_list($$dpth + 1, $$cr)) !== null
                            && ($scope$e = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new obs_resent_from($scope$a, $scope$b, $scope$c, $scope$d, $scope$e);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_resent_from$memo,
        );
    }
    public matchobs_resent_send($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_resent_send> {
        return this.memoise(
            () => {
                return this.run<obs_resent_send>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<WSP[]>;
                        let $scope$c: Nullable<string>;
                        let $scope$d: Nullable<mailbox>;
                        let $scope$e: Nullable<CRLF>;
                        let $$res: Nullable<obs_resent_send> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:Resent-Sender)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<WSP>(() => this.matchWSP($$dpth + 1, $$cr), true)) !== null
                            && ($scope$c = this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$d = this.matchmailbox($$dpth + 1, $$cr)) !== null
                            && ($scope$e = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new obs_resent_send($scope$a, $scope$b, $scope$c, $scope$d, $scope$e);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_resent_send$memo,
        );
    }
    public matchobs_resent_date($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_resent_date> {
        return this.memoise(
            () => {
                return this.run<obs_resent_date>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<WSP[]>;
                        let $scope$c: Nullable<string>;
                        let $scope$d: Nullable<date_time>;
                        let $scope$e: Nullable<CRLF>;
                        let $$res: Nullable<obs_resent_date> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:Resent-Date)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<WSP>(() => this.matchWSP($$dpth + 1, $$cr), true)) !== null
                            && ($scope$c = this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$d = this.matchdate_time($$dpth + 1, $$cr)) !== null
                            && ($scope$e = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new obs_resent_date($scope$a, $scope$b, $scope$c, $scope$d, $scope$e);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_resent_date$memo,
        );
    }
    public matchobs_resent_to($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_resent_to> {
        return this.memoise(
            () => {
                return this.run<obs_resent_to>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<WSP[]>;
                        let $scope$c: Nullable<string>;
                        let $scope$d: Nullable<address_list>;
                        let $scope$e: Nullable<CRLF>;
                        let $$res: Nullable<obs_resent_to> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:Resent-To)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<WSP>(() => this.matchWSP($$dpth + 1, $$cr), true)) !== null
                            && ($scope$c = this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$d = this.matchaddress_list($$dpth + 1, $$cr)) !== null
                            && ($scope$e = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new obs_resent_to($scope$a, $scope$b, $scope$c, $scope$d, $scope$e);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_resent_to$memo,
        );
    }
    public matchobs_resent_cc($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_resent_cc> {
        return this.memoise(
            () => {
                return this.run<obs_resent_cc>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<WSP[]>;
                        let $scope$c: Nullable<string>;
                        let $scope$d: Nullable<address_list>;
                        let $scope$e: Nullable<CRLF>;
                        let $$res: Nullable<obs_resent_cc> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:Resent-Cc)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<WSP>(() => this.matchWSP($$dpth + 1, $$cr), true)) !== null
                            && ($scope$c = this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$d = this.matchaddress_list($$dpth + 1, $$cr)) !== null
                            && ($scope$e = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new obs_resent_cc($scope$a, $scope$b, $scope$c, $scope$d, $scope$e);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_resent_cc$memo,
        );
    }
    public matchobs_resent_bcc($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_resent_bcc> {
        return this.memoise(
            () => {
                return this.run<obs_resent_bcc>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<WSP[]>;
                        let $scope$c: Nullable<string>;
                        let $scope$d: Nullable<obs_resent_bcc_$0>;
                        let $scope$e: Nullable<CRLF>;
                        let $$res: Nullable<obs_resent_bcc> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:Resent-Bcc)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<WSP>(() => this.matchWSP($$dpth + 1, $$cr), true)) !== null
                            && ($scope$c = this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$d = this.matchobs_resent_bcc_$0($$dpth + 1, $$cr)) !== null
                            && ($scope$e = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new obs_resent_bcc($scope$a, $scope$b, $scope$c, $scope$d, $scope$e);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_resent_bcc$memo,
        );
    }
    public matchobs_resent_bcc_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_resent_bcc_$0> {
        return this.memoise(
            () => {
                return this.choice<obs_resent_bcc_$0>([
                    () => this.matchobs_resent_bcc_$0_1($$dpth + 1, $$cr),
                    () => this.matchobs_resent_bcc_$0_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$obs_resent_bcc_$0$memo,
        );
    }
    public matchobs_resent_bcc_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_resent_bcc_$0_1> {
        return this.run<obs_resent_bcc_$0_1>($$dpth,
            () => {
                let $scope$a: Nullable<address_list>;
                let $$res: Nullable<obs_resent_bcc_$0_1> = null;
                if (true
                    && ($scope$a = this.matchaddress_list($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_resent_bcc_$0_1, a: $scope$a};
                }
                return $$res;
            });
    }
    public matchobs_resent_bcc_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_resent_bcc_$0_2> {
        return this.run<obs_resent_bcc_$0_2>($$dpth,
            () => {
                let $scope$b: Nullable<obs_resent_bcc_$0_$0>;
                let $$res: Nullable<obs_resent_bcc_$0_2> = null;
                if (true
                    && ($scope$b = this.matchobs_resent_bcc_$0_$0($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.obs_resent_bcc_$0_2, b: $scope$b};
                }
                return $$res;
            });
    }
    public matchobs_resent_bcc_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_resent_bcc_$0_$0> {
        return this.memoise(
            () => {
                return this.run<obs_resent_bcc_$0_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<obs_resent_bcc_$0_$0_$0[]>;
                        let $scope$b: Nullable<Nullable<CFWS>>;
                        let $$res: Nullable<obs_resent_bcc_$0_$0> = null;
                        if (true
                            && ($scope$a = this.loop<obs_resent_bcc_$0_$0_$0>(() => this.matchobs_resent_bcc_$0_$0_$0($$dpth + 1, $$cr), true)) !== null
                            && (($scope$b = this.matchCFWS($$dpth + 1, $$cr)) || true)
                        ) {
                            $$res = {kind: ASTKinds.obs_resent_bcc_$0_$0, a: $scope$a, b: $scope$b};
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_resent_bcc_$0_$0$memo,
        );
    }
    public matchobs_resent_bcc_$0_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_resent_bcc_$0_$0_$0> {
        return this.memoise(
            () => {
                return this.run<obs_resent_bcc_$0_$0_$0>($$dpth,
                    () => {
                        let $scope$a: Nullable<Nullable<CFWS>>;
                        let $scope$b: Nullable<string>;
                        let $$res: Nullable<obs_resent_bcc_$0_$0_$0> = null;
                        if (true
                            && (($scope$a = this.matchCFWS($$dpth + 1, $$cr)) || true)
                            && ($scope$b = this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.obs_resent_bcc_$0_$0_$0, a: $scope$a, b: $scope$b};
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_resent_bcc_$0_$0_$0$memo,
        );
    }
    public matchobs_resent_mid($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_resent_mid> {
        return this.memoise(
            () => {
                return this.run<obs_resent_mid>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<WSP[]>;
                        let $scope$c: Nullable<string>;
                        let $scope$d: Nullable<msg_id>;
                        let $scope$e: Nullable<CRLF>;
                        let $$res: Nullable<obs_resent_mid> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:Resent-Message-ID)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<WSP>(() => this.matchWSP($$dpth + 1, $$cr), true)) !== null
                            && ($scope$c = this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$d = this.matchmsg_id($$dpth + 1, $$cr)) !== null
                            && ($scope$e = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new obs_resent_mid($scope$a, $scope$b, $scope$c, $scope$d, $scope$e);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_resent_mid$memo,
        );
    }
    public matchobs_resent_rply($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_resent_rply> {
        return this.memoise(
            () => {
                return this.run<obs_resent_rply>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<WSP[]>;
                        let $scope$c: Nullable<string>;
                        let $scope$d: Nullable<address_list>;
                        let $scope$e: Nullable<CRLF>;
                        let $$res: Nullable<obs_resent_rply> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:Resent-Reply-To)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<WSP>(() => this.matchWSP($$dpth + 1, $$cr), true)) !== null
                            && ($scope$c = this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$d = this.matchaddress_list($$dpth + 1, $$cr)) !== null
                            && ($scope$e = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new obs_resent_rply($scope$a, $scope$b, $scope$c, $scope$d, $scope$e);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_resent_rply$memo,
        );
    }
    public matchobs_return($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_return> {
        return this.memoise(
            () => {
                return this.run<obs_return>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<WSP[]>;
                        let $scope$c: Nullable<string>;
                        let $scope$d: Nullable<path>;
                        let $scope$e: Nullable<CRLF>;
                        let $$res: Nullable<obs_return> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:Return-Path)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<WSP>(() => this.matchWSP($$dpth + 1, $$cr), true)) !== null
                            && ($scope$c = this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$d = this.matchpath($$dpth + 1, $$cr)) !== null
                            && ($scope$e = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new obs_return($scope$a, $scope$b, $scope$c, $scope$d, $scope$e);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_return$memo,
        );
    }
    public matchobs_received($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_received> {
        return this.memoise(
            () => {
                return this.run<obs_received>($$dpth,
                    () => {
                        let $scope$a: Nullable<string>;
                        let $scope$b: Nullable<WSP[]>;
                        let $scope$c: Nullable<string>;
                        let $scope$d: Nullable<received_token[]>;
                        let $scope$e: Nullable<CRLF>;
                        let $$res: Nullable<obs_received> = null;
                        if (true
                            && ($scope$a = this.regexAccept(String.raw`(?:Received)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<WSP>(() => this.matchWSP($$dpth + 1, $$cr), true)) !== null
                            && ($scope$c = this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$d = this.loop<received_token>(() => this.matchreceived_token($$dpth + 1, $$cr), true)) !== null
                            && ($scope$e = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new obs_received($scope$a, $scope$b, $scope$c, $scope$d, $scope$e);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_received$memo,
        );
    }
    public matchobs_optional($$dpth: number, $$cr?: ErrorTracker): Nullable<obs_optional> {
        return this.memoise(
            () => {
                return this.run<obs_optional>($$dpth,
                    () => {
                        let $scope$a: Nullable<field_name>;
                        let $scope$b: Nullable<WSP[]>;
                        let $scope$c: Nullable<string>;
                        let $scope$d: Nullable<unstructured>;
                        let $scope$e: Nullable<CRLF>;
                        let $$res: Nullable<obs_optional> = null;
                        if (true
                            && ($scope$a = this.matchfield_name($$dpth + 1, $$cr)) !== null
                            && ($scope$b = this.loop<WSP>(() => this.matchWSP($$dpth + 1, $$cr), true)) !== null
                            && ($scope$c = this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr)) !== null
                            && ($scope$d = this.matchunstructured($$dpth + 1, $$cr)) !== null
                            && ($scope$e = this.matchCRLF($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = new obs_optional($scope$a, $scope$b, $scope$c, $scope$d, $scope$e);
                        }
                        return $$res;
                    });
            },
            this.$scope$obs_optional$memo,
        );
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchstart(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchstart(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchstart(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const preMrk = this.mark();
            const t = func();
            if (t === null || this.pos.overallPos === preMrk.overallPos) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y");
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<start>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}